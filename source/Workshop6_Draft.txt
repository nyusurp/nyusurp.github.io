Workshop 5: Working with Data Frames
========================================================
author: Cassandra Buzby & Yen-Chung Chen
date: `r Sys.Date()`
autosize: true

Pairs Today
============

Filip/Yarek

Esther/Alejandra

Melchi/Kaitriana

Temima/Natalya



Review
========================================================
incremental: true
Vectors can be combined to create data frames. First, let's make three vectors of length 30:
```{r}
vector1 <- 1:30
vector2 <- seq(0,100,length.out = 30)
vector3 <- seq(12,1, length.out = 30)
```

```{r}
length(vector1)
length(vector2)
length(vector3)
```

Review
========================================================
incremental: true
Next, we can use the data.frame() function to combine these vectors into columns:
```{r}
data.frame(vector1, vector2, vector3)
```

Review
========================================================
incremental: true
We can also name the columns by defining each within the function data.frame() or by using the colnames() function.
```{r}
mydataframe <- data.frame(plate = vector1, survival = vector2, dose = vector3)
head(mydataframe,3)
```
```{r}
colnames(mydataframe) <- c("Plate", "Percent_Survived", "Dose")
head(mydataframe,3)
```

Review: Subsetting Vectors
==========
incremental: true
Some data frames have column **names** and all data frames have row-column **positions**. You can identify a value in a data frame by indicating the position in the column (essentially, the position in the vector) of a row, or by referencing the [row,column] number.

```{r}
mydataframe$Plate[2]
mydataframe[2,1]
mydataframe[1,2]
```

Practice
==========
1. Add together the third and fourth rows of your data frame.
2. Subset the third column of your data frame and save it as a new variable, then view the first 4 elements of this variable using head().
3. Find the mean of the second column of your data frame

Practice
==========
1. Add together the third and fourth rows of your data frame.
2. Subset the third column of your data frame and save it as a new variable, then view the first 4 elements of this variable using head().
3. Find the mean of the second column of your data frame

```{r}
mydataframe[3,] + mydataframe[4,]

newvariable <- mydataframe[,3]
head(newvariable, 4)

mean(mydataframe[,2])
```

Review: Logicals
==========

Just like you can make a vector of characters or a vector of numeric values, you can also make a vector of logicals.
```{r}
# Make a vector with 3 TRUEs and 2 FALSEs, save it as logical_vec1

# Make a vector called num_vec that starts at 2 and ends at 10 (increasing by 1)
```
```{r}
logical_vec1 <- c(TRUE,TRUE,TRUE,FALSE,FALSE)
num_vec <- c(2:100)
```
```{r}
logical_vec2 <- num_vec %% 3 == 2 #what is this line of code doing?
```

Treating numbers as logicals
================
incremental: true

In R, FALSE is also encoded as 0, and TRUE is encoded as 1. 

1. How do you think we could easily figure out *how many* TRUEs there are in logical_vec2?
2. What function will tell us which of these elements are TRUEs?

```{r}
sum(logical_vec2)
```
```{r}
which(logical_vec2)
```


Expanding on Logical Operations (AND, OR)
=======
incremental: true
We can also do "and" (`&`) and "or" (`|`, all the way on the right side of your keyboard). "And" only returns true if both things are true. "Or" returns true if at least one thing is true.

Try predicting what all the operations below will return
```{r}
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE
FALSE | TRUE
```


===========
# Working with Data Frames

Working with Data Frames
==========
incremental: true
R has several built-in data sets to use as examples, such as the Iris dataset. Try loading it in my using head(iris).

```{r}
head(iris)
```

Working with Data Frames
==========
incremental: true
Often, you'll have to work with data compiled into a table, and you'll want to see what you're working with when you load it in to R. Some functions that you can use are dim() for dimensions or str() for the type of data that you have.
```{r}
dim(iris)
```

```{r}
str(iris)
```

Working with Data Frames
==========
incremental: true
Several functions can also describe your data, such as min(), max(), and quantile(). Quantile() returns the value that is the value at which your input (a probability) is above. 
```{r}
quantile(iris$Sepal.Length)
min(iris$Sepal.Length)
median(iris$Sepal.Length)
max(iris$Sepal.Length)
```

Exercise
==========
incremental: true
Once you have this data, you might want to select from the data frame all of the values that are in the top or bottom 10% of a value. Use quantile() to find these values for Petal Length in the iris dataset.

```{r}
quantile(iris$Petal.Length, 0.1, 0.9)
```

Exercise
========
incremental: true

You want to extract the **rows** which include the top 10% of your Petal Length data. 

1. Use quantile() to find the cutoff for your top 10% of Petal Length values
2. Use which() to identify which values of iris$Petal.Length are in the top 10% of petal lengths (hint: use a logical operator for this comparison)
3. Subset the iris data frame to print the **entire row** of these top 10% values

```{r}
quantile(iris$Petal.Length, 0.9)
which(iris$Petal.Length > quantile(iris$Petal.Length, 0.9))
```

Exercise
========
You want to extract the **rows** which include the top 10% of your Petal Length data. 

1. Use quantile() to find the cutoff for your top 10% of Petal Length values
2. Use which() to identify which values of iris$Petal.Length are in the top 10% of petal lengths (hint: use a logical operator for this comparison)
3. Subset the iris data frame to print the **entire row** of these top 10% values
```{r}
iris[which(iris$Petal.Length >= quantile(iris$Petal.Length, 0.9)),]
```

Loading in Datasets
==========
incremental: true

Obviously your own data is not already in R. This is where working directories come back into play. To load in a file, you can use read.csv() or read.table(), which each take in your file name and arguments that tell R how to format your data into a data frame.

Load in penguins.csv from the website (it will probably be in your downloads folder) and **save it as a variable**. Without saving to a variable, read.csv() will print the entire dataset into your workspace without saving.
```{r}
penguins <- read.csv("penguins.csv", header = TRUE)
head(penguins)
```

Exercise
=============
With your partner, pick one of the following tasks to complete:

1. Which species of penguin has the largest average bill length? Which species has the smallest bill depth?
2. Make a new data frame including the smallest 10% of flipper lengths and count how many penguins of each species are represented.
3. Is the sampling between islands consistent? How many penguins of each species were sampled from each island?
4. Was the sampling by sex equal each year? What percentage of penguins were female each year?

Exercise
=============
incremental: true
1. Which species of penguin has the largest average bill length? Which species has the smallest bill depth?
```{r}
adelie_BL <- which(penguins$species == "Adelie")
chinstrap_BL <- which(penguins$species == "Chinstrap")
gentoo_BL <- which(penguins$species == "Gentoo")

mean(penguins[adelie_BL, 4], na.rm = TRUE)
mean(penguins[chinstrap_BL, 4], na.rm = TRUE)
mean(penguins[gentoo_BL, 4], na.rm = TRUE)

```

Exercise
=============
incremental: true
2. Make a new data frame including the smallest 10% of flipper lengths and count how many penguins of each species are represented.
```{r}
ten_percent_cutoff <- quantile(penguins$flipper_length_mm, 0.1, na.rm = TRUE)
ten_percent_of_penguins <- penguins[penguins$flipper_length_mm <= ten_percent_cutoff,]

sum(ten_percent_of_penguins$species == "Adelie", na.rm = TRUE)
sum(ten_percent_of_penguins$species == "Chinstrap", na.rm = TRUE)
sum(ten_percent_of_penguins$species == "Gentoo", na.rm = TRUE)

#alternatively:
table(ten_percent_of_penguins)

```


Exercise
=============
incremental: true
3. Is the sampling between islands consistent? How many penguins of each species were sampled from each island?
```{r}


```


Exercise
=============
incremental: true
4. Was the sampling by sex equal each year? What percentage of penguins were female each year?
```{r}


```


