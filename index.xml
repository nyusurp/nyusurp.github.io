<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Workshop</title>
    <link>https://nyusurp.github.io/</link>
      <atom:link href="https://nyusurp.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>R Workshop</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© NYU 2021 - 2022</copyright><lastBuildDate>Thu, 23 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://nyusurp.github.io/images/icon_hu437f07d278844891d2e703134e956aad_197157_512x512_fill_lanczos_center_2.png</url>
      <title>R Workshop</title>
      <link>https://nyusurp.github.io/</link>
    </image>
    
    <item>
      <title>Understanding Indexing and Subsetting</title>
      <link>https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/</guid>
      <description>


&lt;div id=&#34;indexing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Indexing&lt;/h1&gt;
&lt;div id=&#34;what-do-we-mean-by-indexing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What do we mean by indexing?&lt;/h3&gt;
&lt;p&gt;So far, we’ve worked with data frames in R. Each data frame is really a set of rows and columns with values populated, and these can be broken down into what are called vectors. A vector is simply a one-dimensional set of &lt;em&gt;something&lt;/em&gt; that can have at minimum length 1.&lt;/p&gt;
&lt;p&gt;We can create vectors using the function c(), for concatenate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector &amp;lt;- c(4,20,10,21,60,3,14,63,9,6)

FirstVector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  4 20 10 21 60  3 14 63  9  6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This vector has a length, and each number has an index within that vector. In the upper right, you can see that your FirstVector values are 1:10 and numeric. We can also use the length() function to find out how many elements we have in our vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(FirstVector)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to identify the first value, we could use square brackets, ‘[]’, to identify that value. R will print the value that corresponds with that number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to find the fifth value, we would use the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 60&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#What is the 9th element in the vector? Write your code below:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make a set of numbers that is in a sequence by one, we can just use a ‘:’ to tell R to print that sequence. We can make a new vector using this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SecondVector &amp;lt;- 1:10
SecondVector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we can subset using the ‘:’ to ask R to give us a set of numbers to index by, such as the first three elements in the FirstVector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  4 20 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the last 4 elements of SecondVector. Print your code below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;indexing-data-frames&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Indexing Data Frames&lt;/h3&gt;
&lt;p&gt;If we wanted to make a data frame from vectors that we already have, we can use the data.frame() function to combine vectors &lt;em&gt;of the same size&lt;/em&gt;. If the vectors are different sizes, R won’t know what to do with the extra slots and will give you an error.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Making a data frame from vectors

NewDataFrame &amp;lt;- data.frame(Random = FirstVector, Index = SecondVector)

NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Random Index
## 1       4     1
## 2      20     2
## 3      10     3
## 4      21     4
## 5      60     5
## 6       3     6
## 7      14     7
## 8      63     8
## 9       9     9
## 10      6    10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of using length() to find out the size of a data frame, we would need to find the &lt;em&gt;dimensions&lt;/em&gt; of that data frame. We briefly covered this function in earlier sessions: you can use dim().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(NewDataFrame)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10  2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of dim() is a vector, which gives the number of rows (first number) and the number of columns (second number). An easy way to remember this is “railroad car”, which always has R before C, or rows before columns.&lt;/p&gt;
&lt;p&gt;What if we wanted to find the first row of our data frame? We could use square brackets again, but this time we would need to add a column in between our row argument and our column argument. To select &lt;em&gt;all&lt;/em&gt; of the values of one row or column, leave the element (before or after the comma) blank.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#The following code will give the first row:
NewDataFrame[1,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#This next code will give the second column:
NewDataFrame[,2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we wanted to find the first column and fourth row element? We would indicate both of these numbers in square brackets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame[4,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 21&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the third element of the second column below:

#Find the last 3 elements of the first column below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-column-names-with&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using column names with $&lt;/h3&gt;
&lt;p&gt;If you wanted to refer to a column by name, you can do so with the $ operator. We can print the second column as such:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to select the second element of the Index column, we could do so using the square brackets as we did before; in this case, though, we now have a vector (the column) rather than a data frame, so we only need one dimension in our square brackets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Index[2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the fourth element of the Random column below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;logicals&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Logicals&lt;/h1&gt;
&lt;div id=&#34;a-review-of-booleans&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A review of Booleans&lt;/h3&gt;
&lt;p&gt;Booleans are true/false statements that are evaluated by R. TRUE is encoded by a 1, and FALSE is encoded by a 0. R recognizes the words “TRUE” and “FALSE” when they are capitalized.&lt;/p&gt;
&lt;p&gt;We can evaluate two numbers by using the ‘==’ sign between them:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 == 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 == 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also find the numbers in a vector that are equal to a certain number:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector == 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that only the first element of FirstVector is 4; the rest are not, and so this evaluates to FALSE.&lt;/p&gt;
&lt;p&gt;We can also use the &amp;lt; and &amp;gt; to evaluate, and &amp;lt;= and &amp;gt;=:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector &amp;lt; 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Find all of the values of SecondVector that are greater than or equal to 4

# Find all of the values of FirstVector that are less than 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also evaluate two vectors to see if they have the same values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector == NewDataFrame[,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Below, use &amp;#39;!=&amp;#39; to ask if FirstVector is NOT equal to the first column of NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can compare if two columns are equal in our data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Random == NewDataFrame$Index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Subsetting&lt;/h1&gt;
&lt;div id=&#34;subsetting-by-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Subsetting by values&lt;/h3&gt;
&lt;p&gt;We’ve done this using dplyr in the past; we can take a data frame and filter it by a certain value. Without using the dplyr package, we can also do this based on the rows and column indices. Keep in mind that if you’re using the full name of the column,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#First we can print the indices where the Random column equals 4
NewDataFrame$Random == 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#By placing the true values in the square brackets, this code prints the rows where Rnadom is equal to 4
NewDataFrame[NewDataFrame$Random == 4,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Below, find the rows where the Random column is greater than 50

#Next, find the rows in which the Random column value is less than OR equal to the Index column value&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this can also be done using dplyr, but with naming columns and not the data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame %&amp;gt;% filter(Random == 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-it-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Putting it together&lt;/h3&gt;
&lt;p&gt;Before we move on to visualizing, we can also create a new column in our data frame using $, and we can populate that by using booleans:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$NewColumn &amp;lt;- NewDataFrame$Random &amp;gt;= NewDataFrame$Index

NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Random Index NewColumn
## 1       4     1      TRUE
## 2      20     2      TRUE
## 3      10     3      TRUE
## 4      21     4      TRUE
## 5      60     5      TRUE
## 6       3     6     FALSE
## 7      14     7      TRUE
## 8      63     8      TRUE
## 9       9     9      TRUE
## 10      6    10     FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-the-subset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualizing the subset&lt;/h1&gt;
&lt;div id=&#34;plotting-subsetted-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting subsetted values&lt;/h3&gt;
&lt;p&gt;If you wanted to plot only specific values, you could use these same booleans inside the functions to plot. This is going to be the basis of how we separate out values in our plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

# Plot our data frame here
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = Random, y = Index, data = NewDataFrame)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can change the size of our points by adding in the &amp;#39;size&amp;#39; argument
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Finally, we can add in coloring by a boolean logical
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$Index &amp;gt; 5, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$NewColumn, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exploring R&lt;/h1&gt;
&lt;p&gt;One of the most important things to do in R is read the documentation for different packages and functions. If we look at the function for qplot, it will give us the options for our plots.&lt;/p&gt;
&lt;p&gt;We can do this by either running help(&lt;function&gt;) or ?&lt;function&gt;, as done below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;help(qplot)
?qplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has lots of options, but the examples show where they have options for size and color. We’ll get into how to use these (and more!) in ggplot later, but you can explore how to visualize your own data using qplot, as long as you remember to load ggplot2 into your workspace.&lt;/p&gt;
&lt;p&gt;You’ll notice that there’s an option for &lt;em&gt;geom&lt;/em&gt;. This is the type of plot that will be made, and the default is a scatter plot (so geom = “point”). You can find this in the defaults for geom.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a scatter plot
qplot(x = Index, y = Random, data = NewDataFrame,
      geom = &amp;quot;point&amp;quot;,
      xlim = c(0,25), ylim = c(0,100),
      main = &amp;quot;Title of Randomness&amp;quot;,
      xlab = &amp;quot;Index Expanded&amp;quot;,
      ylab = &amp;quot;Random Numbers&amp;quot;,
      color = Random &amp;gt; 5, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a box plot with scatter (called jitter)
qplot(x = Random, y = NewColumn, data = NewDataFrame,
      geom = c(&amp;quot;boxplot&amp;quot;, &amp;quot;jitter&amp;quot;),
      main = &amp;quot;Boxplot of Random Numbers&amp;quot;,
      color = Index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;practice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice&lt;/h3&gt;
&lt;p&gt;Load in the dataset penguins.csv, and plot the bill length vs body mass of penguins, coloring by species and changing the shape by island.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Load in the csv using read.csv()

#View the data by using head() and find the names of the columns using str()

#Use qplot to plot the columns that you&amp;#39;re interested in&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;advanced-practice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Advanced Practice&lt;/h3&gt;
&lt;p&gt;Using either dplyr or subsetting, plot the Gentoo penguins bill length vs body mass, and color by if their body mass is above 5500.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Your code below&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hands-On Data Wrangling</title>
      <link>https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/</guid>
      <description>


&lt;div id=&#34;loading-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading data&lt;/h2&gt;
&lt;p&gt;Following what we did last week, we are going to keep working with the penguins
today. You can find the dataset after you extracted &lt;code&gt;session3.zip&lt;/code&gt; which
you can download from &lt;a href=&#34;https://nyusurp.github.io/assets/session3.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;figure-things-out-on-the-internet&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Figure things out on the internet&lt;/h3&gt;
&lt;p&gt;If you don’t remember how to do something with R and happen to be the most
R-fluent people in the peer, don’t panic. Most of the time, searching for
&lt;em&gt;[what you want to do] in R&lt;/em&gt; work out great.&lt;/p&gt;
&lt;p&gt;Online forums like StackOverflow and Kaggle often give great answers with code
examples that you could play with. If you are a genomic person, Biostar and
SEQanswers would be your friend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How do you load a csv file with R?
penguins &amp;lt;- read.csv(&amp;quot;penguins.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;figuring-things-out-within-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Figuring things out within R&lt;/h3&gt;
&lt;p&gt;Oftentimes, an answer you found online provides a code that almost works, but
you might not yet know enough to make it work. For times like this, R has
documentation built in for each function describing the arguments that you can
tweak and what it meant.&lt;/p&gt;
&lt;p&gt;You can trigger the help page with &lt;code&gt;?[function]&lt;/code&gt; in the console. Let’s try it
out: We used &lt;code&gt;head()&lt;/code&gt; last week to take a glimpse of the first few rows of a
table, so how do we print the first &lt;em&gt;3&lt;/em&gt; instead of 6 rows?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(penguins, n = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1  Adelie Torgersen           39.1          18.7               181        3750
## 2  Adelie Torgersen           39.5          17.4               186        3800
## 3  Adelie Torgersen           40.3          18.0               195        3250
##      sex year
## 1   male 2007
## 2 female 2007
## 3 female 2007&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;count-things&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;count()&lt;/code&gt; things&lt;/h2&gt;
&lt;p&gt;How many penguins of each &lt;code&gt;species&lt;/code&gt; were observed on each &lt;code&gt;island&lt;/code&gt;?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  count(island, species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      island   species   n
## 1    Biscoe    Adelie  44
## 2    Biscoe    Gentoo 124
## 3     Dream    Adelie  56
## 4     Dream Chinstrap  68
## 5 Torgersen    Adelie  52&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which species is found on all islands? I know it’s obvious, but let’s use a
sledgehammer to crack a nut this time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The output in the previous chunk is also a table that could be count()ed.
penguins %&amp;gt;%
  count(island, species) %&amp;gt;%
  count(species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     species n
## 1    Adelie 3
## 2 Chinstrap 1
## 3    Gentoo 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-out-your-species&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;filter()&lt;/code&gt; out your species&lt;/h2&gt;
&lt;p&gt;Let’s say you are interested in comparing how the islands influences the growth
of penguins. Either you’ll need to go to Antarctica to observe more Gentoo or
Chinstrap penguins on other islands, or only Adelie penguins make sense for
your purpose.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Since none of us is going to leave for Antarctica any time soon (right?)
# Let&amp;#39;s keep only the Adelie penguins, and **assign it to a new object**.
adelie &amp;lt;- penguins %&amp;gt;%
  filter(species == &amp;quot;Adelie&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;revisiting-the-criteria-for-filter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Revisiting the criteria for &lt;code&gt;filter()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;There are 6 basic types of comparison:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;: Equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt;: Not equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;: Larger than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;: Larger or equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;: Less than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;: Less than or equal to&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many male Adelie penguins were observed?
adelie %&amp;gt;%
  filter(sex == &amp;quot;male&amp;quot;) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    n
## 1 73&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many Adelie penguins were found on islands that are not Dream island?
adelie %&amp;gt;%
  filter(island != &amp;quot;Dream&amp;quot;) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    n
## 1 96&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many Adelie penguins were observed during or before 2008?
adelie %&amp;gt;%
  filter(year &amp;lt;= 2008) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     n
## 1 100&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-criteria&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining criteria&lt;/h3&gt;
&lt;p&gt;Sometimes, we’ll need more than one criteria to get the data we want.
For example, if you are interested in the female Adelie penguins on the Biscoe
island:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie %&amp;gt;%
  filter(sex == &amp;quot;female&amp;quot;, island == &amp;quot;Biscoe&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1   Adelie Biscoe           37.8          18.3               174        3400
## 2   Adelie Biscoe           35.9          19.2               189        3800
## 3   Adelie Biscoe           35.3          18.9               187        3800
## 4   Adelie Biscoe           40.5          17.9               187        3200
## 5   Adelie Biscoe           37.9          18.6               172        3150
## 6   Adelie Biscoe           39.6          17.7               186        3500
## 7   Adelie Biscoe           35.0          17.9               190        3450
## 8   Adelie Biscoe           34.5          18.1               187        2900
## 9   Adelie Biscoe           39.0          17.5               186        3550
## 10  Adelie Biscoe           36.5          16.6               181        2850
## 11  Adelie Biscoe           35.7          16.9               185        3150
## 12  Adelie Biscoe           37.6          17.0               185        3600
## 13  Adelie Biscoe           36.4          17.1               184        2850
## 14  Adelie Biscoe           35.5          16.2               195        3350
## 15  Adelie Biscoe           35.0          17.9               192        3725
## 16  Adelie Biscoe           37.7          16.0               183        3075
## 17  Adelie Biscoe           37.9          18.6               193        2925
## 18  Adelie Biscoe           38.6          17.2               199        3750
## 19  Adelie Biscoe           38.1          17.0               181        3175
## 20  Adelie Biscoe           38.1          16.5               198        3825
## 21  Adelie Biscoe           39.7          17.7               193        3200
## 22  Adelie Biscoe           39.6          20.7               191        3900
##       sex year
## 1  female 2007
## 2  female 2007
## 3  female 2007
## 4  female 2007
## 5  female 2007
## 6  female 2008
## 7  female 2008
## 8  female 2008
## 9  female 2008
## 10 female 2008
## 11 female 2008
## 12 female 2008
## 13 female 2008
## 14 female 2008
## 15 female 2009
## 16 female 2009
## 17 female 2009
## 18 female 2009
## 19 female 2009
## 20 female 2009
## 21 female 2009
## 22 female 2009&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if you need penguins with extreme body weight? Say either over 4700g or
below 2900g.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie %&amp;gt;%
  filter(body_mass_g &amp;gt; 4700 | body_mass_g &amp;lt; 2900)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1  Adelie Biscoe           36.5          16.6               181        2850
## 2  Adelie Biscoe           36.4          17.1               184        2850
## 3  Adelie Biscoe           41.0          20.0               203        4725
## 4  Adelie Biscoe           43.2          19.0               197        4775
##      sex year
## 1 female 2008
## 2 female 2008
## 3   male 2009
## 4   male 2009&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;logical-operations-whats-happening-under-the-dplyr-table&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Logical operations: What’s happening under the &lt;code&gt;dplyr&lt;/code&gt; table&lt;/h4&gt;
&lt;p&gt;Essentially, what &lt;code&gt;filter()&lt;/code&gt; relies on is to ask a series of yes/no question
to each row of a column, and the answers to these yes/no questions are called
Boolean or logical values.&lt;/p&gt;
&lt;p&gt;In R, &lt;code&gt;TRUE&lt;/code&gt; means yes, while &lt;code&gt;FALSE&lt;/code&gt; means no.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Is 3 larger than 5?
3 &amp;gt; 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Is 2022 equal to 2020?
2022 == 2020&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Is &amp;quot;apple&amp;quot; not equal to &amp;quot;orange&amp;quot;?
&amp;quot;apple&amp;quot; != &amp;quot;orange&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These logical values can be further calculated with &lt;code&gt;&amp;amp;&lt;/code&gt; (AND), &lt;code&gt;|&lt;/code&gt; (OR), and
&lt;code&gt;xor()&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;|&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;xor()&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;TRUE/TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;TRUE/FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;FALSE/TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;FALSE/FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, how many Adelie penguins either have a bill length shorter than 35mm
or a bill depth below 15mm?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie %&amp;gt;%
  filter(bill_length_mm &amp;lt; 35 | bill_depth_mm &amp;lt; 15) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   n
## 1 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we know &lt;code&gt;filter()&lt;/code&gt; is working with logical values, you won’t be
surprised that it can also use other functions that gives a logical value
as its output as a criterion.&lt;/p&gt;
&lt;p&gt;For example, we mentioned that &lt;code&gt;NA&lt;/code&gt; is how R labels missing data. Since we are
interested in body weight, we might want throw away rows with missing body
weight…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You might want to try filtering for body_mass_g== NA
adelie %&amp;gt;%
  filter(body_mass_g == NA)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] species           island            bill_length_mm    bill_depth_mm    
## [5] flipper_length_mm body_mass_g       sex               year             
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is happening? Remember that we said R treats NA very differently. As a
matter of fact, almost every operation gives you &lt;code&gt;NA&lt;/code&gt; when &lt;code&gt;NA&lt;/code&gt; is involved.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try these
5 == NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;3 &amp;gt; NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;&amp;quot;North America&amp;quot; != NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;3.1415926 &amp;lt;= NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;NA&lt;/code&gt; is missing data, this actually makes sense:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;5 == NA&lt;/code&gt; is like asking “is 5 equal to something I don’t know?”, and the
answer has to be “I don’t know”.&lt;/p&gt;
&lt;p&gt;So, how do we ask R if it doesn’t know something or has an &lt;code&gt;NA&lt;/code&gt; there? We use
&lt;code&gt;is.na()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is.na(NA)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is.na(&amp;quot;National Academy&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;is.na()&lt;/code&gt; with &lt;code&gt;filter()&lt;/code&gt; to find the rows where body weight is
&lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use is.na() to get rows with NA in body_mass_g
adelie %&amp;gt;%
  filter(is.na(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1  Adelie Torgersen             NA            NA                NA          NA
##    sex year
## 1 &amp;lt;NA&amp;gt; 2007&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How do we select all other rows then? In R, &lt;code&gt;!&lt;/code&gt; flips a logical value, and you
can pronounce it as &lt;em&gt;not&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Not TRUE
!TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Not FALSE
!FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Flipping (3 &amp;gt; 5)
!(3 &amp;gt; 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;!&lt;/code&gt; to find rows that are &lt;em&gt;not&lt;/em&gt; &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many Adelie penguins have their body mass recorded?
adelie %&amp;gt;%
  filter(!is.na(body_mass_g)) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     n
## 1 151&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;extended-reading-dealing-with-missing-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extended reading: Dealing with missing values&lt;/h3&gt;
&lt;p&gt;Depends on what you work with, you might not always want to drop missing values.&lt;/p&gt;
&lt;p&gt;If you are not going to throw those data away, you’ll need to ask yourself
questions like “Does missing value appear randomly?”, and decide how to best
deal with them.&lt;/p&gt;
&lt;p&gt;If you are interested, Hadley Wickham has
&lt;a href=&#34;https://r4ds.hadley.nz/missing-values.html&#34;&gt;a section in his book &lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt;
discussing this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;group-your-data-for-further-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Group your data for further analysis&lt;/h2&gt;
&lt;p&gt;Let’s say we are interested in how body weight differs between islands.
To perform this analysis, we might want to calculate the median and standard
deviation of body mass per island.&lt;/p&gt;
&lt;p&gt;To indicate how &lt;code&gt;dplyr&lt;/code&gt; should group your data, we use &lt;code&gt;group_by()&lt;/code&gt; to tell
it which column contains the group labels.&lt;/p&gt;
&lt;p&gt;Let’s assign the grouped data to another object named &lt;code&gt;adelie_per_island&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie_per_island &amp;lt;- adelie %&amp;gt;%
  filter(!is.na(body_mass_g)) %&amp;gt;%
  group_by(island)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-summary-statistics-with-summarize&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Get summary statistics with &lt;code&gt;summarize()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we grouped the data, we can calculate the summary statistics.&lt;/p&gt;
&lt;p&gt;The syntax for &lt;code&gt;summarize()&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You tell summarize() which functions to use on which column
adelie_per_island %&amp;gt;%
  summarize(mean(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##   island    `mean(body_mass_g)`
##   &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt;
## 1 Biscoe                  3710.
## 2 Dream                   3688.
## 3 Torgersen               3706.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the column names of the summary table is the function call we gives
to &lt;code&gt;summarize()&lt;/code&gt;, which could be a bit ugly. We can rename the columns by:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie_per_island %&amp;gt;%
  summarize(mean_bw = mean(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##   island    mean_bw
##   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 Biscoe      3710.
## 2 Dream       3688.
## 3 Torgersen   3706.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The summary statistics that we use the most often are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arithmetic mean (&lt;code&gt;mean()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Median (&lt;code&gt;median()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Standard deviation (&lt;code&gt;sd()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s summarize the data with median and standard deviation per island.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Summarize the Adelie subset per island with the median and standard deviation 
# of the body mass
adelie_per_island %&amp;gt;%
  summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   island    bw_median bw_sd
##   &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Biscoe         3750  488.
## 2 Dream          3575  455.
## 3 Torgersen      3700  445.&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;what-if-you-dont-group&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What if you don’t group?&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie %&amp;gt;%
  filter(!is.na(body_mass_g)) %&amp;gt;%
  summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   bw_median    bw_sd
## 1      3700 458.5661&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;what-if-you-want-to-group-with-another-grouping-variable&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What if you want to group with another grouping variable?&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s group with sex
adelie %&amp;gt;%
  filter(!is.na(body_mass_g), !is.na(sex)) %&amp;gt;%
  group_by(sex) %&amp;gt;%
  summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 3
##   sex    bw_median bw_sd
##   &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1 female      3400  269.
## 2 male        4000  347.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;a-picture-is-worth-a-thousand-words&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A picture is worth a thousand words&lt;/h2&gt;
&lt;p&gt;While it’s great to have summary statistics, oftentimes a quick visualization
of our data will be very helpful.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qplot()&lt;/code&gt; provided by &lt;code&gt;ggplot2&lt;/code&gt; is designed for this purpose and can be easily
incorporated into your pipeline.&lt;/p&gt;
&lt;div id=&#34;example-a-quick-scatterstrip-plot-per-island&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example: a quick scatter/strip plot per island&lt;/h3&gt;
&lt;p&gt;Let’s plot something with &lt;em&gt;points&lt;/em&gt; on a plane where the x-axis is the islands
and the y-axis is the body weight.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load ggplot2
library(ggplot2)

adelie_per_island %&amp;gt;%
  qplot(data = ., x = island, y = body_mass_g, geom = &amp;quot;point&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/index.en_files/figure-html/qplot-strip-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There several required arguments for &lt;code&gt;qplot()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data: The data you want to plot.&lt;/li&gt;
&lt;li&gt;x: The column name of the variable you want to use as the x-axis&lt;/li&gt;
&lt;li&gt;y: The column name of the variable you want to use as the y-axis&lt;/li&gt;
&lt;li&gt;color: The column name of the variable you want to color your plot by&lt;/li&gt;
&lt;li&gt;geom: Short for “geometry”, the type of plots you want to do. Popular ones
include:
&lt;ul&gt;
&lt;li&gt;point&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;li&gt;boxplot&lt;/li&gt;
&lt;li&gt;violin&lt;/li&gt;
&lt;li&gt;histogram&lt;/li&gt;
&lt;li&gt;density&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s do a boxplot instead
adelie_per_island %&amp;gt;%
  qplot(data = ., x = island, y = body_mass_g, geom = &amp;quot;boxplot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/index.en_files/figure-html/qplot-box-1.png&#34; width=&#34;672&#34; /&gt;
### What is the distribution of bill lengths of the whole dataset?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot a histogram with bill lengths on the x-axis
penguins %&amp;gt;%
  qplot(data = ., x = bill_length_mm, geom = &amp;quot;histogram&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_bin).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/index.en_files/figure-html/qplot-histogram-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;is-bill-length-and-depth-correlated-for-the-adelie-penguins&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Is bill length and depth correlated for the Adelie penguins?&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot a point plot with bill length on the x, bill depth on the y, and
# color by sex
adelie %&amp;gt;%
  qplot(
    data = .,
    x = bill_length_mm,
    y = bill_depth_mm,
    color = sex,
    geom = &amp;quot;point&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 1 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/index.en_files/figure-html/qplot-scatter-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Working directories</title>
      <link>https://nyusurp.github.io/2022/06/14/working-directories/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/14/working-directories/</guid>
      <description>&lt;p&gt;There are two different ways to represent where a file is: Absolute and relative.&lt;/p&gt;
&lt;p&gt;Absolute path for a file is using the root as the starting point (&lt;code&gt;/&lt;/code&gt; for Linux
and Mac and &lt;code&gt;C:\&lt;/code&gt; for Windows). This is usually clear to the computer, but it
can be really long and not comprehensible to human and thus impossible to wrap
our heads around it and write.&lt;/p&gt;
&lt;p&gt;For example, I had a note stored in &lt;code&gt;/Users/ycc/Library/Mobile Documents/iCloud~md~obsidian/Documents/YCC/Reading note/@gold.brand_2014.md&lt;/code&gt;. There is no way I can remember this and type it when
writing a script.&lt;/p&gt;
&lt;p&gt;Relative path is much shorter, but it could be tricky because sometimes where
the path is defined &lt;em&gt;relative&lt;/em&gt; to is unclear.&lt;/p&gt;
&lt;p&gt;In R, you can find the working directory with &lt;code&gt;getwd()&lt;/code&gt;, which gives you the
absolute path of the reference.&lt;/p&gt;
&lt;p&gt;Say your working directory is &lt;code&gt;/Users/me/my_cool_project&lt;/code&gt;, and you have a csv
file (named &lt;code&gt;myawesome.csv&lt;/code&gt;) stored in a subdirectory called &amp;ldquo;data&amp;rdquo;, you can
write &lt;code&gt;data/myawesome.csv&lt;/code&gt; in R, and R will append &lt;code&gt;/Users/me/my_cool_project&lt;/code&gt;
before your relative path for you.&lt;/p&gt;
&lt;p&gt;If you need to ask R to find &lt;code&gt;/Users/me/a_file_outside_wd.txt&lt;/code&gt; for you,
relative path still has you covered outside your working directory: &lt;code&gt;..&lt;/code&gt; means
go up to the parent folder in relative paths, so
&lt;code&gt;/Users/me/a_file_outside_wd.txt&lt;/code&gt; is &lt;code&gt;../a_file_outside_wd.txt&lt;/code&gt; if your working
directory is &lt;code&gt;/Users/me/my_cool_project&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For tips to set working directories in RStudio, you might also want to check

&lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200711843-Working-Directories-and-Workspaces-in-the-RStudio-IDE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prepare your computer for R</title>
      <link>https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/</guid>
      <description>


&lt;div id=&#34;agenda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;AGENDA&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Introductions&lt;/li&gt;
&lt;li&gt;Installing R&lt;/li&gt;
&lt;li&gt;This Worksheet :)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Adpated from material curated by Eugene Plavskin and Grace Avecilla&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploring &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34;&gt;RStudio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The console: Where you run commands one by one (bottom)&lt;/li&gt;
&lt;li&gt;The environment: Where you can see what is loaded in R (upper right)&lt;/li&gt;
&lt;li&gt;The file explorer: An easier way for you to find files (otherwise you’ll need to know the &lt;em&gt;path&lt;/em&gt; of a file to use it in R; lower right)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installing &lt;em&gt;packages&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Packages are like kits in experiments: They &lt;em&gt;package&lt;/em&gt; the reagents and instructions for otherwise complicated processes for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll be installing 3 packages today&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com&#34;&gt;rmarkdown&lt;/a&gt;: A tool that allows you to write your code along with your notes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt;: A handy and powerful visualization tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt;: A tool that handles and summarizes tables&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This is how we ask R to install packages
# R will try to ask several central repositories if they have this package
install.packages(&amp;quot;rmarkdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-rmarkdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using Rmarkdown&lt;/h2&gt;
&lt;p&gt;Rmarkdown file allow you to record your thinking process (as text) along with
your analyses (as &lt;em&gt;code chunks&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Having why you are doing the analysis and the specific code for it will help
you catch up faster if you ever need to go back to the same analysis again.&lt;/p&gt;
&lt;div id=&#34;text-and-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Text and code&lt;/h3&gt;
&lt;p&gt;This is a line of text:&lt;/p&gt;
&lt;p&gt;“I know how to use R!”&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This is a chunk of code. Do you notice that the background looks different?
# Also there is three buttons at the upper right corner

# Press the _play_ button, and the output will be shown below the chunk
print(&amp;quot;I know how to use R&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;I know how to use R&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2+2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running code:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the run button on the upper-right corner of a chunk&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl + Enter (Windows) / Cmd + Return (Mac)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generating output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the &lt;em&gt;knit&lt;/em&gt; button on the upper rim of the editor&lt;/li&gt;
&lt;li&gt;Knitting will &lt;em&gt;re-run all your code in the file from scratch&lt;/em&gt;, which is a
good thing because it makes sure:
&lt;ul&gt;
&lt;li&gt;The code works on its own&lt;/li&gt;
&lt;li&gt;We haven’t accidentally deleted or added some lines of code that will
break the code.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;working-directory-and-rstudio-projects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Working directory and Rstudio projects&lt;/h2&gt;
&lt;div id=&#34;what-is-a-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What is a working directory?&lt;/h3&gt;
&lt;p&gt;A working directory is where R will try to find things if you ask it to&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-and-setting-your-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Checking and setting your working directory&lt;/h3&gt;
&lt;p&gt;You can check the path of your working directory with &lt;code&gt;getwd()&lt;/code&gt;
(short for &lt;em&gt;get working directory&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Expect to see a path printed below
# This is where R find things for you
getwd()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/ycc/Dropbox/Docs/NYU/Teaching/SURP/NYU_SURP_blogdown/content/handout/2022-06-13-prepare-your-computer-for-r&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-files-from-your-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loading files from your working directory&lt;/h3&gt;
&lt;p&gt;Now that you have a directory, files inside that directory can be loaded using
functions like &lt;code&gt;read.csv()&lt;/code&gt;. This function will take a comma-separated file
(which you can make in Excel) and allow you to save it as a variable that R can
work with.&lt;/p&gt;
&lt;p&gt;For the example below, &lt;code&gt;mytestdata.csv&lt;/code&gt; can be found in the &lt;a href=&#34;assets/session1.zip&#34;&gt;example data&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Open the csv file with Excel or Google Sheet to take a look
# mytestdata

# And then we load it to see how it looks like in R
read.csv(&amp;quot;mytestdata.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Day Count Group
## 1   1    12     1
## 2   1    15     2
## 3   2     8     1
## 4   2     3     2
## 5   3    10     1
## 6   3    24     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You need to ask R to keep the csv files
# *Check the environment tab on the upper right corner of your window
mytestdata &amp;lt;- read.csv(&amp;quot;mytestdata.csv&amp;quot;)

# You can ask R to retrieve what it keeps later by the name you gave to the data
mytestdata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Day Count Group
## 1   1    12     1
## 2   1    15     2
## 3   2     8     1
## 4   2     3     2
## 5   3    10     1
## 6   3    24     2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-usage-of-r-using-it-as-a-calculator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic usage of R: Using it as a calculator&lt;/h2&gt;
&lt;p&gt;Enter the following line of command in the console&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;17 + 2.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 19.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In programming, division is often written as slashes (&lt;code&gt;/&lt;/code&gt;), while
multiplication is written as asterisks (&lt;code&gt;*&lt;/code&gt;). Now, let’s try doing these in the
console as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try multiplying 8 by 7

8*7&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 56&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try dividing 48 by 12

48/12&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;an-example-of-our-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An example of our data&lt;/h2&gt;
&lt;p&gt;Cassandra’s data is allele frequencies as read counts from sequencing. To
analyze it, she first:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;loads in the data,&lt;/li&gt;
&lt;li&gt;runs an R function to analyze it,&lt;/li&gt;
&lt;li&gt;plots using &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a quick version of this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)

#Read in the data
WeightedMeanZStats.100 &amp;lt;- read.csv(&amp;quot;CBData.csv&amp;quot;)

#Look at the data (this only prints the first 6 rows)
head(WeightedMeanZStats.100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          X CHROM    POS       Bulk     Parent         Int Stat
## 1 result.1    II 100153 -2.3893709 -1.0534663  1.64175559    Z
## 2 result.2    II 100367 -0.9361101 -0.2837268  0.55031705    Z
## 3 result.3    II 100413 -1.1028976 -0.6802854  0.95854049    Z
## 4 result.4    II 100878  0.7191787  0.9999416 -1.25245792    Z
## 5 result.5    II 101289 -1.2163032  1.4995884  0.07063202    Z
## 6 result.6    II 101340 -1.4019217  1.1382948 -0.29809070    Z&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the dimensions of the datast
dim(WeightedMeanZStats.100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 95106     7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(WeightedMeanZStats.100$Stat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Z&amp;quot;      &amp;quot;ZPrime&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Plot the data using ggplot (which we&amp;#39;ll go into more later!)
WeightedMeanZStats.100 %&amp;gt;% filter(Stat == &amp;quot;ZPrime&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Int&amp;quot;)) %&amp;gt;% 
  ggplot(., aes(x = POS, y = value, color = name)) + geom_line(size = 1) + #geom_point(alpha = 0.1) + #+ 
  geom_hline(yintercept = 0, color = &amp;quot;gray&amp;quot;) +
  geom_hline(yintercept = c(1.96, -1.96), color = &amp;quot;black&amp;quot;, linetype = &amp;quot;dashed&amp;quot;) +
  theme(axis.text.x = element_blank()) +  ylab(&amp;quot;Oak &amp;lt;- Effect -&amp;gt; Wine&amp;quot;) +
  scale_color_manual(values = c(&amp;quot;violet&amp;quot;, &amp;quot;lightblue&amp;quot;, &amp;quot;darkorange&amp;quot;)) +
  facet_grid(~CHROM, scales = &amp;quot;free&amp;quot;) + ggtitle(&amp;quot;Comparison of Zprime per Factor | Weighted Means W = 100&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/index.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes footnotes-end-of-document&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://nyusurp.github.io/2022/06/14/working-directories&#34;&gt;working directory&lt;/a&gt; if you are interested.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>https://nyusurp.github.io/terms/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0100</pubDate>
      <guid>https://nyusurp.github.io/terms/</guid>
      <description>&lt;p&gt;The contents provided on this website are for information purposes only. We
have no intention to provide professional advice via this website, and the
information is for discussion and communication only. Please consult a
professional person before applying any information posted on this website.&lt;/p&gt;
&lt;p&gt;We are not responsible for the accuracy, completeness, and timeliness of any
information on or linked from this website. We are not liable for any errors or
omissions of this information, and the availability of information provided by
or linked from the website is not warranted. I am not liable for any damage
resulting from or related to the use of this information.&lt;/p&gt;
&lt;p&gt;Information in this website is licensed under CC BY-NC-ND 4.0 unless otherwise
specified in the material. We retain the right to change the terms and
conditions at any time and without notice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://nyusurp.github.io/privacy/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0100</pubDate>
      <guid>https://nyusurp.github.io/privacy/</guid>
      <description>&lt;h2 id=&#34;who-we-are&#34;&gt;Who we are?&lt;/h2&gt;
&lt;p&gt;This is a course website (&lt;a href=&#34;https://nyusurp.github.io&#34;&gt;https://nyusurp.github.io&lt;/a&gt;) for the R workshop at NYU.
The site is currently maintained by Yen-Chung Chen, who is not an expert in
website technology nor in privacy law, so the following description is to the
best of my understanding of how this website is built and my intentions. If you
suspect your privacy is compromised while browsing, please don&amp;rsquo;t hesitate
to 
&lt;a href=&#34;mailto:ycc520@nyu.edu&#34;&gt;contact me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The website is written with 
&lt;a href=&#34;https://cran.r-project.org/web/packages/blogdown/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blogdown&lt;/a&gt;,
the source is hosted on 
&lt;a href=&#34;https://github.com/nyusurp/Workshop_website_src&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;
and rendered by 
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;collection-of-your-personal-information&#34;&gt;Collection of your personal information&lt;/h2&gt;
&lt;p&gt;The website does not identify you nor track the traffic.&lt;/p&gt;
&lt;h2 id=&#34;sharing-of-your-personal-information&#34;&gt;Sharing of your personal information&lt;/h2&gt;
&lt;p&gt;This website does not collect personal information.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
