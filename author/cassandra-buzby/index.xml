<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cassandra Buzby | R Workshop</title>
    <link>https://nyusurp.github.io/author/cassandra-buzby/</link>
      <atom:link href="https://nyusurp.github.io/author/cassandra-buzby/index.xml" rel="self" type="application/rss+xml" />
    <description>Cassandra Buzby</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© NYU 2021 - 2022</copyright><lastBuildDate>Thu, 23 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://nyusurp.github.io/images/icon_hu437f07d278844891d2e703134e956aad_197157_512x512_fill_lanczos_center_2.png</url>
      <title>Cassandra Buzby</title>
      <link>https://nyusurp.github.io/author/cassandra-buzby/</link>
    </image>
    
    <item>
      <title>Understanding Indexing and Subsetting</title>
      <link>https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/</guid>
      <description>


&lt;div id=&#34;indexing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Indexing&lt;/h1&gt;
&lt;div id=&#34;what-do-we-mean-by-indexing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What do we mean by indexing?&lt;/h3&gt;
&lt;p&gt;So far, we’ve worked with data frames in R. Each data frame is really a set of rows and columns with values populated, and these can be broken down into what are called vectors. A vector is simply a one-dimensional set of &lt;em&gt;something&lt;/em&gt; that can have at minimum length 1.&lt;/p&gt;
&lt;p&gt;We can create vectors using the function c(), for concatenate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector &amp;lt;- c(4,20,10,21,60,3,14,63,9,6)

FirstVector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  4 20 10 21 60  3 14 63  9  6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This vector has a length, and each number has an index within that vector. In the upper right, you can see that your FirstVector values are 1:10 and numeric. We can also use the length() function to find out how many elements we have in our vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(FirstVector)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to identify the first value, we could use square brackets, ‘[]’, to identify that value. R will print the value that corresponds with that number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to find the fifth value, we would use the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 60&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#What is the 9th element in the vector? Write your code below:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make a set of numbers that is in a sequence by one, we can just use a ‘:’ to tell R to print that sequence. We can make a new vector using this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SecondVector &amp;lt;- 1:10
SecondVector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we can subset using the ‘:’ to ask R to give us a set of numbers to index by, such as the first three elements in the FirstVector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  4 20 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the last 4 elements of SecondVector. Print your code below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;indexing-data-frames&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Indexing Data Frames&lt;/h3&gt;
&lt;p&gt;If we wanted to make a data frame from vectors that we already have, we can use the data.frame() function to combine vectors &lt;em&gt;of the same size&lt;/em&gt;. If the vectors are different sizes, R won’t know what to do with the extra slots and will give you an error.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Making a data frame from vectors

NewDataFrame &amp;lt;- data.frame(Random = FirstVector, Index = SecondVector)

NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Random Index
## 1       4     1
## 2      20     2
## 3      10     3
## 4      21     4
## 5      60     5
## 6       3     6
## 7      14     7
## 8      63     8
## 9       9     9
## 10      6    10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of using length() to find out the size of a data frame, we would need to find the &lt;em&gt;dimensions&lt;/em&gt; of that data frame. We briefly covered this function in earlier sessions: you can use dim().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(NewDataFrame)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10  2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of dim() is a vector, which gives the number of rows (first number) and the number of columns (second number). An easy way to remember this is “railroad car”, which always has R before C, or rows before columns.&lt;/p&gt;
&lt;p&gt;What if we wanted to find the first row of our data frame? We could use square brackets again, but this time we would need to add a column in between our row argument and our column argument. To select &lt;em&gt;all&lt;/em&gt; of the values of one row or column, leave the element (before or after the comma) blank.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#The following code will give the first row:
NewDataFrame[1,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#This next code will give the second column:
NewDataFrame[,2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we wanted to find the first column and fourth row element? We would indicate both of these numbers in square brackets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame[4,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 21&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the third element of the second column below:

#Find the last 3 elements of the first column below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-column-names-with&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using column names with $&lt;/h3&gt;
&lt;p&gt;If you wanted to refer to a column by name, you can do so with the $ operator. We can print the second column as such:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to select the second element of the Index column, we could do so using the square brackets as we did before; in this case, though, we now have a vector (the column) rather than a data frame, so we only need one dimension in our square brackets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Index[2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the fourth element of the Random column below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;logicals&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Logicals&lt;/h1&gt;
&lt;div id=&#34;a-review-of-booleans&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A review of Booleans&lt;/h3&gt;
&lt;p&gt;Booleans are true/false statements that are evaluated by R. TRUE is encoded by a 1, and FALSE is encoded by a 0. R recognizes the words “TRUE” and “FALSE” when they are capitalized.&lt;/p&gt;
&lt;p&gt;We can evaluate two numbers by using the ‘==’ sign between them:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 == 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 == 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also find the numbers in a vector that are equal to a certain number:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector == 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that only the first element of FirstVector is 4; the rest are not, and so this evaluates to FALSE.&lt;/p&gt;
&lt;p&gt;We can also use the &amp;lt; and &amp;gt; to evaluate, and &amp;lt;= and &amp;gt;=:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector &amp;lt; 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Find all of the values of SecondVector that are greater than or equal to 4

# Find all of the values of FirstVector that are less than 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also evaluate two vectors to see if they have the same values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector == NewDataFrame[,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Below, use &amp;#39;!=&amp;#39; to ask if FirstVector is NOT equal to the first column of NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can compare if two columns are equal in our data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Random == NewDataFrame$Index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Subsetting&lt;/h1&gt;
&lt;div id=&#34;subsetting-by-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Subsetting by values&lt;/h3&gt;
&lt;p&gt;We’ve done this using dplyr in the past; we can take a data frame and filter it by a certain value. Without using the dplyr package, we can also do this based on the rows and column indices. Keep in mind that if you’re using the full name of the column,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#First we can print the indices where the Random column equals 4
NewDataFrame$Random == 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#By placing the true values in the square brackets, this code prints the rows where Rnadom is equal to 4
NewDataFrame[NewDataFrame$Random == 4,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Below, find the rows where the Random column is greater than 50

#Next, find the rows in which the Random column value is less than OR equal to the Index column value&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this can also be done using dplyr, but with naming columns and not the data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame %&amp;gt;% filter(Random == 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-it-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Putting it together&lt;/h3&gt;
&lt;p&gt;Before we move on to visualizing, we can also create a new column in our data frame using $, and we can populate that by using booleans:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$NewColumn &amp;lt;- NewDataFrame$Random &amp;gt;= NewDataFrame$Index

NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Random Index NewColumn
## 1       4     1      TRUE
## 2      20     2      TRUE
## 3      10     3      TRUE
## 4      21     4      TRUE
## 5      60     5      TRUE
## 6       3     6     FALSE
## 7      14     7      TRUE
## 8      63     8      TRUE
## 9       9     9      TRUE
## 10      6    10     FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-the-subset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualizing the subset&lt;/h1&gt;
&lt;div id=&#34;plotting-subsetted-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting subsetted values&lt;/h3&gt;
&lt;p&gt;If you wanted to plot only specific values, you could use these same booleans inside the functions to plot. This is going to be the basis of how we separate out values in our plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

# Plot our data frame here
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = Random, y = Index, data = NewDataFrame)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can change the size of our points by adding in the &amp;#39;size&amp;#39; argument
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Finally, we can add in coloring by a boolean logical
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$Index &amp;gt; 5, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$NewColumn, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exploring R&lt;/h1&gt;
&lt;p&gt;One of the most important things to do in R is read the documentation for different packages and functions. If we look at the function for qplot, it will give us the options for our plots.&lt;/p&gt;
&lt;p&gt;We can do this by either running help(&lt;function&gt;) or ?&lt;function&gt;, as done below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;help(qplot)
?qplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has lots of options, but the examples show where they have options for size and color. We’ll get into how to use these (and more!) in ggplot later, but you can explore how to visualize your own data using qplot, as long as you remember to load ggplot2 into your workspace.&lt;/p&gt;
&lt;p&gt;You’ll notice that there’s an option for &lt;em&gt;geom&lt;/em&gt;. This is the type of plot that will be made, and the default is a scatter plot (so geom = “point”). You can find this in the defaults for geom.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a scatter plot
qplot(x = Index, y = Random, data = NewDataFrame,
      geom = &amp;quot;point&amp;quot;,
      xlim = c(0,25), ylim = c(0,100),
      main = &amp;quot;Title of Randomness&amp;quot;,
      xlab = &amp;quot;Index Expanded&amp;quot;,
      ylab = &amp;quot;Random Numbers&amp;quot;,
      color = Random &amp;gt; 5, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a box plot with scatter (called jitter)
qplot(x = Random, y = NewColumn, data = NewDataFrame,
      geom = c(&amp;quot;boxplot&amp;quot;, &amp;quot;jitter&amp;quot;),
      main = &amp;quot;Boxplot of Random Numbers&amp;quot;,
      color = Index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;practice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice&lt;/h3&gt;
&lt;p&gt;Load in the dataset penguins.csv, and plot the bill length vs body mass of penguins, coloring by species and changing the shape by island.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Load in the csv using read.csv()

#View the data by using head() and find the names of the columns using str()

#Use qplot to plot the columns that you&amp;#39;re interested in&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;advanced-practice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Advanced Practice&lt;/h3&gt;
&lt;p&gt;Using either dplyr or subsetting, plot the Gentoo penguins bill length vs body mass, and color by if their body mass is above 5500.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Your code below&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Prepare your computer for R</title>
      <link>https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/</guid>
      <description>


&lt;div id=&#34;agenda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;AGENDA&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Introductions&lt;/li&gt;
&lt;li&gt;Installing R&lt;/li&gt;
&lt;li&gt;This Worksheet :)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Adpated from material curated by Eugene Plavskin and Grace Avecilla&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploring &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34;&gt;RStudio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The console: Where you run commands one by one (bottom)&lt;/li&gt;
&lt;li&gt;The environment: Where you can see what is loaded in R (upper right)&lt;/li&gt;
&lt;li&gt;The file explorer: An easier way for you to find files (otherwise you’ll need to know the &lt;em&gt;path&lt;/em&gt; of a file to use it in R; lower right)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installing &lt;em&gt;packages&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Packages are like kits in experiments: They &lt;em&gt;package&lt;/em&gt; the reagents and instructions for otherwise complicated processes for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll be installing 3 packages today&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com&#34;&gt;rmarkdown&lt;/a&gt;: A tool that allows you to write your code along with your notes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt;: A handy and powerful visualization tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt;: A tool that handles and summarizes tables&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This is how we ask R to install packages
# R will try to ask several central repositories if they have this package
install.packages(&amp;quot;rmarkdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-rmarkdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using Rmarkdown&lt;/h2&gt;
&lt;p&gt;Rmarkdown file allow you to record your thinking process (as text) along with
your analyses (as &lt;em&gt;code chunks&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Having why you are doing the analysis and the specific code for it will help
you catch up faster if you ever need to go back to the same analysis again.&lt;/p&gt;
&lt;div id=&#34;text-and-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Text and code&lt;/h3&gt;
&lt;p&gt;This is a line of text:&lt;/p&gt;
&lt;p&gt;“I know how to use R!”&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This is a chunk of code. Do you notice that the background looks different?
# Also there is three buttons at the upper right corner

# Press the _play_ button, and the output will be shown below the chunk
print(&amp;quot;I know how to use R&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;I know how to use R&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2+2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running code:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the run button on the upper-right corner of a chunk&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl + Enter (Windows) / Cmd + Return (Mac)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generating output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the &lt;em&gt;knit&lt;/em&gt; button on the upper rim of the editor&lt;/li&gt;
&lt;li&gt;Knitting will &lt;em&gt;re-run all your code in the file from scratch&lt;/em&gt;, which is a
good thing because it makes sure:
&lt;ul&gt;
&lt;li&gt;The code works on its own&lt;/li&gt;
&lt;li&gt;We haven’t accidentally deleted or added some lines of code that will
break the code.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;working-directory-and-rstudio-projects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Working directory and Rstudio projects&lt;/h2&gt;
&lt;div id=&#34;what-is-a-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What is a working directory?&lt;/h3&gt;
&lt;p&gt;A working directory is where R will try to find things if you ask it to&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-and-setting-your-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Checking and setting your working directory&lt;/h3&gt;
&lt;p&gt;You can check the path of your working directory with &lt;code&gt;getwd()&lt;/code&gt;
(short for &lt;em&gt;get working directory&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Expect to see a path printed below
# This is where R find things for you
getwd()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/ycc/Dropbox/Docs/NYU/Teaching/SURP/NYU_SURP_blogdown/content/handout/2022-06-13-prepare-your-computer-for-r&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-files-from-your-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loading files from your working directory&lt;/h3&gt;
&lt;p&gt;Now that you have a directory, files inside that directory can be loaded using
functions like &lt;code&gt;read.csv()&lt;/code&gt;. This function will take a comma-separated file
(which you can make in Excel) and allow you to save it as a variable that R can
work with.&lt;/p&gt;
&lt;p&gt;For the example below, &lt;code&gt;mytestdata.csv&lt;/code&gt; can be found in the &lt;a href=&#34;assets/session1.zip&#34;&gt;example data&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Open the csv file with Excel or Google Sheet to take a look
# mytestdata

# And then we load it to see how it looks like in R
read.csv(&amp;quot;mytestdata.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Day Count Group
## 1   1    12     1
## 2   1    15     2
## 3   2     8     1
## 4   2     3     2
## 5   3    10     1
## 6   3    24     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You need to ask R to keep the csv files
# *Check the environment tab on the upper right corner of your window
mytestdata &amp;lt;- read.csv(&amp;quot;mytestdata.csv&amp;quot;)

# You can ask R to retrieve what it keeps later by the name you gave to the data
mytestdata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Day Count Group
## 1   1    12     1
## 2   1    15     2
## 3   2     8     1
## 4   2     3     2
## 5   3    10     1
## 6   3    24     2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-usage-of-r-using-it-as-a-calculator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic usage of R: Using it as a calculator&lt;/h2&gt;
&lt;p&gt;Enter the following line of command in the console&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;17 + 2.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 19.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In programming, division is often written as slashes (&lt;code&gt;/&lt;/code&gt;), while
multiplication is written as asterisks (&lt;code&gt;*&lt;/code&gt;). Now, let’s try doing these in the
console as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try multiplying 8 by 7

8*7&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 56&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try dividing 48 by 12

48/12&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;an-example-of-our-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An example of our data&lt;/h2&gt;
&lt;p&gt;Cassandra’s data is allele frequencies as read counts from sequencing. To
analyze it, she first:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;loads in the data,&lt;/li&gt;
&lt;li&gt;runs an R function to analyze it,&lt;/li&gt;
&lt;li&gt;plots using &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a quick version of this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)

#Read in the data
WeightedMeanZStats.100 &amp;lt;- read.csv(&amp;quot;CBData.csv&amp;quot;)

#Look at the data (this only prints the first 6 rows)
head(WeightedMeanZStats.100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          X CHROM    POS       Bulk     Parent         Int Stat
## 1 result.1    II 100153 -2.3893709 -1.0534663  1.64175559    Z
## 2 result.2    II 100367 -0.9361101 -0.2837268  0.55031705    Z
## 3 result.3    II 100413 -1.1028976 -0.6802854  0.95854049    Z
## 4 result.4    II 100878  0.7191787  0.9999416 -1.25245792    Z
## 5 result.5    II 101289 -1.2163032  1.4995884  0.07063202    Z
## 6 result.6    II 101340 -1.4019217  1.1382948 -0.29809070    Z&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the dimensions of the datast
dim(WeightedMeanZStats.100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 95106     7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(WeightedMeanZStats.100$Stat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Z&amp;quot;      &amp;quot;ZPrime&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Plot the data using ggplot (which we&amp;#39;ll go into more later!)
WeightedMeanZStats.100 %&amp;gt;% filter(Stat == &amp;quot;ZPrime&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Int&amp;quot;)) %&amp;gt;% 
  ggplot(., aes(x = POS, y = value, color = name)) + geom_line(size = 1) + #geom_point(alpha = 0.1) + #+ 
  geom_hline(yintercept = 0, color = &amp;quot;gray&amp;quot;) +
  geom_hline(yintercept = c(1.96, -1.96), color = &amp;quot;black&amp;quot;, linetype = &amp;quot;dashed&amp;quot;) +
  theme(axis.text.x = element_blank()) +  ylab(&amp;quot;Oak &amp;lt;- Effect -&amp;gt; Wine&amp;quot;) +
  scale_color_manual(values = c(&amp;quot;violet&amp;quot;, &amp;quot;lightblue&amp;quot;, &amp;quot;darkorange&amp;quot;)) +
  facet_grid(~CHROM, scales = &amp;quot;free&amp;quot;) + ggtitle(&amp;quot;Comparison of Zprime per Factor | Weighted Means W = 100&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/index.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes footnotes-end-of-document&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://nyusurp.github.io/2022/06/14/working-directories&#34;&gt;working directory&lt;/a&gt; if you are interested.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
