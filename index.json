[{"authors":["ycc"],"categories":null,"content":"Hello, I am a PhD candidate in the Desplan lab at New York University. I study genetic programs that specify different kind of neurons in development. Using fly visual system as my model, I aim to learn how important regulators, like those implicated in spatial and temporal patterning, interacts and defines neuronal fates in development.\n","date":1656547200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1656602226,"objectID":"d4aa3023f78e5f3d87ffdc9938d558a3","permalink":"https://nyusurp.github.io/author/yen-chung-chen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/yen-chung-chen/","section":"authors","summary":"Hello, I am a PhD candidate in the Desplan lab at New York University. I study genetic programs that specify different kind of neurons in development. Using fly visual system as my model, I aim to learn how important regulators, like those implicated in spatial and temporal patterning, interacts and defines neuronal fates in development.","tags":null,"title":"Yen-Chung Chen","type":"authors"},{"authors":["cb"],"categories":null,"content":"I am interested in understanding the prevalence and nature of genetic interactions in complex traits. Through growth rate assays, bulk segregant analysis, and comparative models of genetic architecture in budding yeast, we can make headway in characterizing epistasis.\n","date":1656374400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1656438129,"objectID":"4d2640abaaada3be20dbebb4aa26601d","permalink":"https://nyusurp.github.io/author/cassandra-buzby/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/cassandra-buzby/","section":"authors","summary":"I am interested in understanding the prevalence and nature of genetic interactions in complex traits. Through growth rate assays, bulk segregant analysis, and comparative models of genetic architecture in budding yeast, we can make headway in characterizing epistasis.","tags":null,"title":"Cassandra Buzby","type":"authors"},{"authors":["admin"],"categories":null,"content":"R Workshop for NYU SURP is a 10-session workshop focused on data exploration, visualization, and hypothesis testing. Taking advantage of the simple yet powerful tools developed by the R community, we aim to provide a lever to explore the ever-growing mass of data in biology and to develop insight by generating and testing hypotheses with various visualization and statistical techniques.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://nyusurp.github.io/author/site-admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/site-admin/","section":"authors","summary":"R Workshop for NYU SURP is a 10-session workshop focused on data exploration, visualization, and hypothesis testing. Taking advantage of the simple yet powerful tools developed by the R community, we aim to provide a lever to explore the ever-growing mass of data in biology and to develop insight by generating and testing hypotheses with various visualization and statistical techniques.","tags":null,"title":"Site admin","type":"authors"},{"authors":["Yen-Chung Chen"],"categories":["Handout"],"content":" Outline Review: Write yourself some functions\n Types: How they matter and how to avoid being bitten by them\n   Function practice: Normalizing RNA-Sequencing We will be using part of the data from a study on spinal motor neurons. You can find their full analysis scripts here.\n# Use read.delim instead of read.csv for **tab**-delimited files rawcount = read.delim(\u0026quot;BR-A-Control_counts.txt\u0026quot;) What is in the raw data?\n# Inspect the data you load! normalize_by_depth() How do we define a function that normalize a vector of counts by total counts?\nBefore you start writing. Let’s start humble and get a small proportion of the data so you can capture errors right away when you test your function.\nThe key of doing this is to have something that you can tell whether your code is doing something you want right away with test data structurally similar to the real data.\n# Take a small fraction of the data so we can test our function test_count = head(rawcount) Now, we are good to go. Let’s get the total count first!\n# What is our input? normalize_by_depth = function(input) { # How do we compute total count? # Let\u0026#39;s divide everything by the total count calculated above # Provide an output } Let’s test the function with our naked eyes.\n# Is the function doing what we expect it to do? normalize_by_depth(test_count) == 1472 + 6 + 109 + 43 ## logical(0) If everything goes as expected, let’s divide everything by total count in the function, too.\n# What is our input? normalize_by_depth = function(input) { # How do we compute total count? depth = sum(input$count) # Let\u0026#39;s divide everything by the total count calculated above # Provide an output # **Note that you would want to change your output!** return(depth) } Let’s test the revised function. What are we expecting here?\n# We are expecting the first gene to be ~0.903 after normalization # while the second gene is 0. # Let\u0026#39;s run the function on the test set and let the results print out. Let’s multiply the result by \\(10^{6}\\) (10^6) before returning it in our function.\n# What is our input? normalize_by_depth = function(input) { # How do we compute total count? depth = sum(input$count) # Let\u0026#39;s divide everything by the total count calculated above normalized_count = input$count/depth input$normalized_count = normalized_count # Provide an output return(input) } And test it again.\nNote that for the first gene, we used to getting 0.9030675 before multiplying with \\(10^{6}\\).\nnormalize_by_depth(test_count) ## id count normalized_count ## 1 ENSMUSG00000000001 1472 0.903067485 ## 2 ENSMUSG00000000003 0 0.000000000 ## 3 ENSMUSG00000000028 6 0.003680982 ## 4 ENSMUSG00000000031 109 0.066871166 ## 5 ENSMUSG00000000037 43 0.026380368 ## 6 ENSMUSG00000000049 0 0.000000000  get_tx_length() A gene model file contains the starting and ending coordinates of genes, transcripts, and exons.\nYou can get a gene model file from Ensembl.\nThey are often stored as GTF/GFF3 files, but the format is beyond the scope of what we are going to do today. If you are interested, you can find more information about GTF/GFF format here.\n# Load gene model file (pre-processed) gene_model = read.csv(\u0026quot;mouse_gene_model.csv\u0026quot;) head(gene_model) ## id start end ## 1 ENSMUSG00000102628 150956201 150958296 ## 2 ENSMUSG00000100595 150983666 150984611 ## 3 ENSMUSG00000097426 151012258 151012971 ## 4 ENSMUSG00000097426 151013347 151013531 ## 5 ENSMUSG00000104478 108344807 108347562 ## 6 ENSMUSG00000104385 6980784 6981446 How do we define a function that get us lengths for each gene?\n–\nlibrary(dplyr) ## ## Attaching package: \u0026#39;dplyr\u0026#39; ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## filter, lag ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## intersect, setdiff, setequal, union # How do we compute the length of each exons? gene_model %\u0026gt;% head() %\u0026gt;% mutate(length = (end - start + 1)) ## id start end length ## 1 ENSMUSG00000102628 150956201 150958296 2096 ## 2 ENSMUSG00000100595 150983666 150984611 946 ## 3 ENSMUSG00000097426 151012258 151012971 714 ## 4 ENSMUSG00000097426 151013347 151013531 185 ## 5 ENSMUSG00000104478 108344807 108347562 2756 ## 6 ENSMUSG00000104385 6980784 6981446 663 Let’s test if the length column is correctly calculated.\n# For the first gene 150958296 - 150956201 + 1 ## [1] 2096 If it seems right, let’s get the sum of lengths per id now.\nget_tx_length = function(input) { # How do we compute the sum of all exons of a gene? tx_length = input %\u0026gt;% mutate(length = (end - start + 1)) # Group # Summarize by summation # Provide an output return(tx_length) } What does the output look like?\ngene_model %\u0026gt;% head() %\u0026gt;% get_tx_length() ## id start end length ## 1 ENSMUSG00000102628 150956201 150958296 2096 ## 2 ENSMUSG00000100595 150983666 150984611 946 ## 3 ENSMUSG00000097426 151012258 151012971 714 ## 4 ENSMUSG00000097426 151013347 151013531 185 ## 5 ENSMUSG00000104478 108344807 108347562 2756 ## 6 ENSMUSG00000104385 6980784 6981446 663 How do you independently test if the answer is correct for ENSMUSG00000097426?\n# Doing it differently with base R gene_of_interest = gene_model[gene_model$id == \u0026quot;ENSMUSG00000097426\u0026quot;, ] print(gene_of_interest) ## id start end ## 3 ENSMUSG00000097426 151012258 151012971 ## 4 ENSMUSG00000097426 151013347 151013531 gene_of_interest$length = gene_of_interest$end - gene_of_interest$start + 1 print(gene_of_interest) ## id start end length ## 3 ENSMUSG00000097426 151012258 151012971 714 ## 4 ENSMUSG00000097426 151013347 151013531 185 sum(gene_of_interest$length) ## [1] 899  How to merge data with a shared column? If we check our small count table:\nhead(rawcount) ## id count ## 1 ENSMUSG00000000001 1472 ## 2 ENSMUSG00000000003 0 ## 3 ENSMUSG00000000028 6 ## 4 ENSMUSG00000000031 109 ## 5 ENSMUSG00000000037 43 ## 6 ENSMUSG00000000049 0 and the first few rows of our gene length table:\ngene_model %\u0026gt;% head() %\u0026gt;% get_tx_length() ## id start end length ## 1 ENSMUSG00000102628 150956201 150958296 2096 ## 2 ENSMUSG00000100595 150983666 150984611 946 ## 3 ENSMUSG00000097426 151012258 151012971 714 ## 4 ENSMUSG00000097426 151013347 151013531 185 ## 5 ENSMUSG00000104478 108344807 108347562 2756 ## 6 ENSMUSG00000104385 6980784 6981446 663 You’ll see that we are almost done except that the row order are not exactly the same.\nThis can be taken care of by left_join(x, y, by = column), which is a dplyr function that **merge two data.frames (x and y) by a shared column.\n(left_ means that it keeps all the rows in x even if y does not have it.)\nLet’s see how it works. First, I’ll make a small table of gene length for testing.\ntest_gene_model = gene_model %\u0026gt;% # Only keep rows that are present in test_count filter(id %in% test_count$id) # Compute gene length with our custom function test_gene_length = test_gene_model %\u0026gt;% get_tx_length() print(test_gene_length) ## id start end length ## 1 ENSMUSG00000000037 159945768 159946244 477 ## 2 ENSMUSG00000000037 159954486 159954531 46 ## 3 ENSMUSG00000000037 159960243 159960313 71 ## 4 ENSMUSG00000000037 159961033 159961267 235 ## 5 ENSMUSG00000000037 159970260 159970348 89 ## 6 ENSMUSG00000000037 159975200 159975443 244 ## 7 ENSMUSG00000000037 159985010 159985093 84 ## 8 ENSMUSG00000000037 159992191 159992265 75 ## 9 ENSMUSG00000000037 159992605 159992679 75 ## 10 ENSMUSG00000000037 159996237 159996320 84 ## 11 ENSMUSG00000000037 159998176 159998259 84 ## 12 ENSMUSG00000000037 160004662 160004745 84 ## 13 ENSMUSG00000000037 160006153 160006236 84 ## 14 ENSMUSG00000000037 160007457 160007540 84 ## 15 ENSMUSG00000000037 160008873 160008956 84 ## 16 ENSMUSG00000000037 160010369 160010452 84 ## 17 ENSMUSG00000000037 160011673 160011756 84 ## 18 ENSMUSG00000000037 160013087 160013170 84 ## 19 ENSMUSG00000000037 160014396 160014479 84 ## 20 ENSMUSG00000000037 160017609 160017692 84 ## 21 ENSMUSG00000000037 160020476 160020753 278 ## 22 ENSMUSG00000000037 160022746 160022860 115 ## 23 ENSMUSG00000000037 160024984 160025187 204 ## 24 ENSMUSG00000000037 160026362 160026544 183 ## 25 ENSMUSG00000000037 160029253 160029363 111 ## 26 ENSMUSG00000000037 160039562 160041192 1631 ## 27 ENSMUSG00000000003 76897015 76897229 215 ## 28 ENSMUSG00000000003 76891581 76891720 140 ## 29 ENSMUSG00000000003 76888625 76888692 68 ## 30 ENSMUSG00000000003 76886503 76886613 111 ## 31 ENSMUSG00000000003 76886121 76886222 102 ## 32 ENSMUSG00000000003 76885466 76885517 52 ## 33 ENSMUSG00000000003 76881507 76881720 214 ## 34 ENSMUSG00000000001 108053204 108053462 259 ## 35 ENSMUSG00000000001 108031111 108031153 43 ## 36 ENSMUSG00000000001 108030858 108030999 142 ## 37 ENSMUSG00000000001 108025617 108025774 158 ## 38 ENSMUSG00000000001 108023079 108023207 129 ## 39 ENSMUSG00000000001 108019789 108019918 130 ## 40 ENSMUSG00000000001 108019251 108019404 154 ## 41 ENSMUSG00000000001 108016719 108016928 210 ## 42 ENSMUSG00000000001 108014596 108016632 2037 ## 43 ENSMUSG00000000031 142130566 142130647 82 ## 44 ENSMUSG00000000031 142130350 142130484 135 ## 45 ENSMUSG00000000031 142129268 142130267 1000 ## 46 ENSMUSG00000000049 108286119 108286233 115 ## 47 ENSMUSG00000000049 108286642 108286818 177 ## 48 ENSMUSG00000000049 108288125 108288221 97 ## 49 ENSMUSG00000000049 108295637 108295713 77 ## 50 ENSMUSG00000000049 108298117 108298305 189 ## 51 ENSMUSG00000000049 108299957 108300136 180 ## 52 ENSMUSG00000000049 108302821 108303018 198 ## 53 ENSMUSG00000000049 108305066 108305222 157 ## 54 ENSMUSG00000000028 18630554 18630722 169 ## 55 ENSMUSG00000000028 18630265 18630459 195 ## 56 ENSMUSG00000000028 18630055 18630114 60 ## 57 ENSMUSG00000000028 18629139 18629231 93 ## 58 ENSMUSG00000000028 18627482 18627619 138 ## 59 ENSMUSG00000000028 18626030 18626173 144 ## 60 ENSMUSG00000000028 18624132 18624187 56 ## 61 ENSMUSG00000000028 18620551 18620599 49 ## 62 ENSMUSG00000000028 18617426 18617487 62 ## 63 ENSMUSG00000000028 18616099 18616149 51 ## 64 ENSMUSG00000000028 18614575 18614694 120 ## 65 ENSMUSG00000000028 18613845 18613976 132 ## 66 ENSMUSG00000000028 18613512 18613610 99 ## 67 ENSMUSG00000000028 18611928 18612089 162 ## 68 ENSMUSG00000000028 18605680 18605818 139 ## 69 ENSMUSG00000000028 18605519 18605602 84 ## 70 ENSMUSG00000000028 18603823 18603941 119 ## 71 ENSMUSG00000000028 18603556 18603632 77 ## 72 ENSMUSG00000000028 18600646 18600712 67 ## 73 ENSMUSG00000000028 18599197 18599323 127 And… boom!\nleft_join(x = test_count, y = test_gene_length, by = \u0026quot;id\u0026quot;) ## id count start end length ## 1 ENSMUSG00000000001 1472 108053204 108053462 259 ## 2 ENSMUSG00000000001 1472 108031111 108031153 43 ## 3 ENSMUSG00000000001 1472 108030858 108030999 142 ## 4 ENSMUSG00000000001 1472 108025617 108025774 158 ## 5 ENSMUSG00000000001 1472 108023079 108023207 129 ## 6 ENSMUSG00000000001 1472 108019789 108019918 130 ## 7 ENSMUSG00000000001 1472 108019251 108019404 154 ## 8 ENSMUSG00000000001 1472 108016719 108016928 210 ## 9 ENSMUSG00000000001 1472 108014596 108016632 2037 ## 10 ENSMUSG00000000003 0 76897015 76897229 215 ## 11 ENSMUSG00000000003 0 76891581 76891720 140 ## 12 ENSMUSG00000000003 0 76888625 76888692 68 ## 13 ENSMUSG00000000003 0 76886503 76886613 111 ## 14 ENSMUSG00000000003 0 76886121 76886222 102 ## 15 ENSMUSG00000000003 0 76885466 76885517 52 ## 16 ENSMUSG00000000003 0 76881507 76881720 214 ## 17 ENSMUSG00000000028 6 18630554 18630722 169 ## 18 ENSMUSG00000000028 6 18630265 18630459 195 ## 19 ENSMUSG00000000028 6 18630055 18630114 60 ## 20 ENSMUSG00000000028 6 18629139 18629231 93 ## 21 ENSMUSG00000000028 6 18627482 18627619 138 ## 22 ENSMUSG00000000028 6 18626030 18626173 144 ## 23 ENSMUSG00000000028 6 18624132 18624187 56 ## 24 ENSMUSG00000000028 6 18620551 18620599 49 ## 25 ENSMUSG00000000028 6 18617426 18617487 62 ## 26 ENSMUSG00000000028 6 18616099 18616149 51 ## 27 ENSMUSG00000000028 6 18614575 18614694 120 ## 28 ENSMUSG00000000028 6 18613845 18613976 132 ## 29 ENSMUSG00000000028 6 18613512 18613610 99 ## 30 ENSMUSG00000000028 6 18611928 18612089 162 ## 31 ENSMUSG00000000028 6 18605680 18605818 139 ## 32 ENSMUSG00000000028 6 18605519 18605602 84 ## 33 ENSMUSG00000000028 6 18603823 18603941 119 ## 34 ENSMUSG00000000028 6 18603556 18603632 77 ## 35 ENSMUSG00000000028 6 18600646 18600712 67 ## 36 ENSMUSG00000000028 6 18599197 18599323 127 ## 37 ENSMUSG00000000031 109 142130566 142130647 82 ## 38 ENSMUSG00000000031 109 142130350 142130484 135 ## 39 ENSMUSG00000000031 109 142129268 142130267 1000 ## 40 ENSMUSG00000000037 43 159945768 159946244 477 ## 41 ENSMUSG00000000037 43 159954486 159954531 46 ## 42 ENSMUSG00000000037 43 159960243 159960313 71 ## 43 ENSMUSG00000000037 43 159961033 159961267 235 ## 44 ENSMUSG00000000037 43 159970260 159970348 89 ## 45 ENSMUSG00000000037 43 159975200 159975443 244 ## 46 ENSMUSG00000000037 43 159985010 159985093 84 ## 47 ENSMUSG00000000037 43 159992191 159992265 75 ## 48 ENSMUSG00000000037 43 159992605 159992679 75 ## 49 ENSMUSG00000000037 43 159996237 159996320 84 ## 50 ENSMUSG00000000037 43 159998176 159998259 84 ## 51 ENSMUSG00000000037 43 160004662 160004745 84 ## 52 ENSMUSG00000000037 43 160006153 160006236 84 ## 53 ENSMUSG00000000037 43 160007457 160007540 84 ## 54 ENSMUSG00000000037 43 160008873 160008956 84 ## 55 ENSMUSG00000000037 43 160010369 160010452 84 ## 56 ENSMUSG00000000037 43 160011673 160011756 84 ## 57 ENSMUSG00000000037 43 160013087 160013170 84 ## 58 ENSMUSG00000000037 43 160014396 160014479 84 ## 59 ENSMUSG00000000037 43 160017609 160017692 84 ## 60 ENSMUSG00000000037 43 160020476 160020753 278 ## 61 ENSMUSG00000000037 43 160022746 160022860 115 ## 62 ENSMUSG00000000037 43 160024984 160025187 204 ## 63 ENSMUSG00000000037 43 160026362 160026544 183 ## 64 ENSMUSG00000000037 43 160029253 160029363 111 ## 65 ENSMUSG00000000037 43 160039562 160041192 1631 ## 66 ENSMUSG00000000049 0 108286119 108286233 115 ## 67 ENSMUSG00000000049 0 108286642 108286818 177 ## 68 ENSMUSG00000000049 0 108288125 108288221 97 ## 69 ENSMUSG00000000049 0 108295637 108295713 77 ## 70 ENSMUSG00000000049 0 108298117 108298305 189 ## 71 ENSMUSG00000000049 0 108299957 108300136 180 ## 72 ENSMUSG00000000049 0 108302821 108303018 198 ## 73 ENSMUSG00000000049 0 108305066 108305222 157 This works regardless of how the rows are ordered. You can try messing up the rows and see how if it makes a difference.\n# Mess up the rows and do left_join() again. # Say we have test_count[c(1, 3, 5, 2, 4, 6), ] and # test_gene_model[c(6, 5, 4, 3, 2, 1), ]  One function to do it all You must have noticed that functions are like Russian dolls: There are always functions inside a function.\nNow that we have normalize_by_depth to generate CPM, get_tx_length to calculate gene length, and we know that left_join can merge them by ID, we can write a master function to streamline everything.\nnormalize_rnaseq = function(count, gene_model){ # 1. Normalize read counts by sequencing depth = total reads we got from a sample. # (This gives CPM) # 2. Normalize again with transcript length. # (CPM/Gene length = Transcript per million (TPM)) # 3. Make a master table containing both CPM and length per gene return(normalized_count) } Finally, let’s test it:\nnormalize_rnaseq(test_count, test_gene_model) ## Error in normalize_rnaseq(test_count, test_gene_model): could not find function \u0026quot;normalize_rnaseq\u0026quot; All your hard work pays now – you can normalize the whole thing with ease!\n# Normalize the full table with full gene model   Common pitfalls on data types characters are friendly most of the time, but… Hidden character # There\u0026#39;s a L0 masquerading as 10 in your csv! fake_num = c(\u0026quot;1\u0026quot;, \u0026quot;3\u0026quot;, \u0026quot;5\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;9\u0026quot;, \u0026quot;l0\u0026quot;) typeof(fake_num) ## [1] \u0026quot;character\u0026quot; as.numeric(fake_num) ## Warning: NAs introduced by coercion ## [1] 1 3 5 7 9 NA  Alphabetical and numerical sorting chr_vec = c(\u0026quot;5\u0026quot;, \u0026quot;8\u0026quot;, \u0026quot;6\u0026quot;, \u0026quot;10\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;9\u0026quot;) # You might not expect it to sort like this sort(chr_vec) ## [1] \u0026quot;10\u0026quot; \u0026quot;5\u0026quot; \u0026quot;6\u0026quot; \u0026quot;7\u0026quot; \u0026quot;8\u0026quot; \u0026quot;9\u0026quot; # If they are numbers, they sort differently sort(as.numeric(chr_vec)) ## [1] 5 6 7 8 9 10   Numeric type: Precision can be dangerous… 0.1 + 0.2 == 0.3 ## [1] FALSE There’s a website called https://0.30000000000000004.com/ that explains this in detail.\nBut briefly, any number that is not an integer has limited precision, and propagation of error is a thing.\n# A more robust way to compare non-integers # Define an error margin that you want to tolerate error_margin = 10^-8 # and then decide if the difference is within the margin (0.1 + 0.2) - 0.3 \u0026lt; error_margin ## [1] TRUE  Factor: Ordered categories # Categories as characters works most of the time, but... month_tbl = data.frame( month = c( \u0026quot;January\u0026quot;, \u0026quot;February\u0026quot;, \u0026quot;March\u0026quot;, \u0026quot;April\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;June\u0026quot;, \u0026quot;July\u0026quot;, \u0026quot;August\u0026quot;, \u0026quot;September\u0026quot;, \u0026quot;October\u0026quot;, \u0026quot;November\u0026quot;, \u0026quot;December\u0026quot; ), length = c( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ) ) str(month_tbl) ## \u0026#39;data.frame\u0026#39;: 12 obs. of 2 variables: ## $ month : chr \u0026quot;January\u0026quot; \u0026quot;February\u0026quot; \u0026quot;March\u0026quot; \u0026quot;April\u0026quot; ... ## $ length: num 31 28 31 30 31 30 31 31 30 31 ... Most functions that you encounter in R will sort alphabetically for characters.\nlibrary(ggplot2) month_tbl %\u0026gt;% qplot(data = ., x = month, y = length, geom = \u0026quot;point\u0026quot;) + # This adjust the axis text to make the text more visible theme(axis.text.x = element_text(size = 20, angle = 60, hjust = 1)) You won’t be able to decide the order unless you convert it to a factor.\nmonth_tbl$month = factor( month_tbl$month, # R will respect the levels you set here levels = c( \u0026quot;January\u0026quot;, \u0026quot;February\u0026quot;, \u0026quot;March\u0026quot;, \u0026quot;April\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;June\u0026quot;, \u0026quot;July\u0026quot;, \u0026quot;August\u0026quot;, \u0026quot;September\u0026quot;, \u0026quot;October\u0026quot;, \u0026quot;November\u0026quot;, \u0026quot;December\u0026quot; ) ) month_tbl %\u0026gt;% qplot(data = ., x = month, y = length, geom = \u0026quot;point\u0026quot;) + # This adjust the axis text to make the text more visible theme(axis.text.x = element_text(size = 20, angle = 60, hjust = 1)) Factors are more complicated than characters and numbers, so they could be harder to troubleshoot, but at the same time, they are very powerful especially in statistics.\nAs a rule of thumb, when you inspect your data (e.g., with str()), always ask yourself if you are having categorical variables.\nIf you do, consider converting them to factors if:\n You know they are ordinal\n When you are building statistical models with categorical variables (ANOVA et al.)\n   Date and time They have a similar issue as ordinal categories: If considered as characters, they won’t be ordered chronologically.\n# This shouldn\u0026#39;t be surprising by now random_dates = c(\u0026quot;12-25-2022\u0026quot;, \u0026quot;07-04-1989\u0026quot;, \u0026quot;01-01-2077\u0026quot;) sort(random_dates) ## [1] \u0026quot;01-01-2077\u0026quot; \u0026quot;07-04-1989\u0026quot; \u0026quot;12-25-2022\u0026quot; Unlike most categorical variables, there are usually so many dates, so it is not practical for you to assign orders manually.\nLuckily, there is a package that will take care of this for you if you tell it the format of your dates.\n# You can tell R how the date is represented to chronologically sort library(lubridate) ## ## Attaching package: \u0026#39;lubridate\u0026#39; ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## date, intersect, setdiff, union # mdy() stands for month, day, year good_dates = mdy(random_dates) sort(good_dates) ## [1] \u0026quot;1989-07-04\u0026quot; \u0026quot;2022-12-25\u0026quot; \u0026quot;2077-01-01\u0026quot;   ","date":1656547200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656602226,"objectID":"a989893204b916ad034f5d93be615130","permalink":"https://nyusurp.github.io/2022/06/30/functions-and-data-types/","publishdate":"2022-06-30T00:00:00Z","relpermalink":"/2022/06/30/functions-and-data-types/","section":"handout","summary":"Outline Review: Write yourself some functions\n Types: How they matter and how to avoid being bitten by them\n   Function practice: Normalizing RNA-Sequencing We will be using part of the data from a study on spinal motor neurons.","tags":[],"title":"Functions and Data Types","type":"handout"},{"authors":["Cassandra Buzby"],"categories":["Handout"],"content":" Review Let’s create our data frames again by running the following code:\nNewDataFrame \u0026lt;- data.frame(Random = c(4, 20, 10, 21, 63, 3, 14, 60, 9, 6), Index = 1:10, Categories = c(\u0026quot;Month\u0026quot;, \u0026quot;Day\u0026quot;, \u0026quot;Month\u0026quot;, \u0026quot;Day\u0026quot;, \u0026quot;Year\u0026quot;, \u0026quot;Month\u0026quot;, \u0026quot;Day\u0026quot;, \u0026quot;Year\u0026quot;, \u0026quot;Month\u0026quot;, \u0026quot;Day\u0026quot;)) Examples for plotting subsetted values If you wanted to plot only specific values, you could use these same booleans inside the functions to plot. This is going to be the basis of how we separate out values in our plots.\nlibrary(ggplot2) library(dplyr) ## ## Attaching package: \u0026#39;dplyr\u0026#39; ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## filter, lag ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## intersect, setdiff, setequal, union # Plot our data frame here qplot(x = NewDataFrame$Random, y = NewDataFrame$Index) qplot(x = Random, y = Index, data = NewDataFrame) # We can change the size of our points by adding in the \u0026#39;size\u0026#39; argument qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, size = 1) # Finally, we can add in coloring by a boolean logical qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$Index \u0026gt; 5, size = 1) qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$Categories, size = 1)  Exploring R As a reminder, we can find out more about the functions we use with the help menu, found using help() or just simply a ‘?’ in front of the function (without spaces).\nhelp(qplot) ?qplot As a reminder, there’s an option for geom. This is the type of plot that will be made, and the default is a scatter plot (so geom = “point”). You can find this in the defaults for geom.\n#Make a scatter plot qplot(x = Index, y = Random, data = NewDataFrame, geom = \u0026quot;point\u0026quot;, xlim = c(0,25), ylim = c(0,100), main = \u0026quot;Rainfall Distribution\u0026quot;, xlab = \u0026quot;Month\u0026quot;, ylab = \u0026quot;Rainfall (in)\u0026quot;, color = Random \u0026gt; 5, size = 1) #Make a box plot with scatter (called jitter) qplot(x = Random, y = Categories, data = NewDataFrame, geom = c(\u0026quot;boxplot\u0026quot;, \u0026quot;jitter\u0026quot;), main = \u0026quot;Boxplot of Random Numbers\u0026quot;, color = Index)  Practice from last time: Load in the dataset penguins.csv, and plot the bill length vs body mass of penguins, coloring by species and changing the shape by island.\n#Load in the csv using read.csv() #View the data by using head() and find the names of the columns using str() #Use qplot to plot the columns that you\u0026#39;re interested in  Advanced Practice Using either dplyr or subsetting, plot the Gentoo penguins bill length vs body mass, and color by if their body mass is above 5500.\n# Your code below   Functions We’ve been using functions throughout this course; a function is anything that has an input and an output, often changing that input to create a different output. The functions that we’ve used so far have either been built into R such as mean(), dim(), sum(), and length(), or they have been loaded in as a package, such as dplyr::filter(), dplyr::summarize(), and ggplot::qplot().\nLet’s now look up the help menu for the function seq(). What does it do?\nhelp(seq) Let’s run this function with default values:\n#Uncomment this line to see what happens if you don\u0026#39;t include any values: #seq() #Let\u0026#39;s run this line to see what happens when you include only a single value: seq(5) ## [1] 1 2 3 4 5 Let’s include three numbers without explicitly calling each argument:\nseq(5,10,2) ## [1] 5 7 9 #This is the same as running: seq(from = 5, to = 10, by = 2) ## [1] 5 7 9 Let’s change up the order now:\n#This will also produce values that are equivalent: seq(to = 10, by = 2, from = 5) ## [1] 5 7 9 #But this will not: #seq(10, 2, 5) Practice Save a vector of values from 12 to 200, increasing by 4. Then print the last 10 values of this vector.\n#define your variable as the output of seq() #look at the documentation for tail() #print the last 10 values using tail()  Writing your own function We can write functions as well as using them. Today we’ll start off with a simple code to convert Celsius to Fahrenheit.\n#define your variable celcius \u0026lt;- 20 #calculate your new value farenheit \u0026lt;- 9/5 * celcius + 32 #print the new value farenheit ## [1] 68 Now let’s turn this into a function, using the function() function. Keep in mind that functions follow essentially the format of\n\\[y=f(x)\\]\nwhich can also be read as:\n\\[output = myfunction(input)\\]\nWhen we write this in code, we define the name of the function (below it’s c2f) as function(input){}, where inside the curly brackets {} there is the actual calculation. We then use the function return() to designate to the function what to output, which is our “y” in the above formula.\nc2f \u0026lt;- function(celcius) { farenheit = 9/5 * celcius + 32 return(farenheit) } What happens if we run this without an argument?\n#Run the following code: c2f() We need to include arguments for celcius:\n#Try explicitly stating the value c2f(celcius = 10) ## [1] 50 #What happens if we don\u0026#39;t define celcius? c2f(10) ## [1] 50 Finally, we can actually include a default when we create this function. Let’s add in something to c2f().\nc2f_adv \u0026lt;- function(celcius = 0) { farenheit \u0026lt;- 9/5 * celcius + 32 return(farenheit) } #now run the code without an argument to see what happens c2f_adv() ## [1] 32  Functions with two arguments: If we include x and y into the equation, we can set two variables values:\nmultiply \u0026lt;- function(x, y){x*y} Now we can run this, but it won’t work if we don’t give two arguments:\n#This does not work without defaults #multiply() #This will multiply 2 and 3: multiply(2,3) ## [1] 6 If we rewrite this function, then it will work if defaults are set:\nmultiply2 \u0026lt;- function(x = 2, y = 4){x*y} #This will multiply the default arguments multiply2() ## [1] 8 #This will multiply the inputs multiply2(3,10) ## [1] 30 #What happens if you only include one number? multiply2(10) ## [1] 40 multiply2(y = 10) ## [1] 20   Data Types So far we’ve been able to run calculations using variables, and used read.csv() to take in a character (the name of your file) that is converted into a data frame. We’ve also mentioned that data frame columns must be vectors of the same “type”. But what are the other data types that R can use?\nSome basic data types:\n Characters (char): “string” of text, which has the value of the text\n Numbers (num): overall class of numbers, which includes integers and doubles\n Integers (int): numbers without decimal points (takes less space)\n Doubles (dbl): floating point numbers, or those with precision (takes more space)\n Factors (fact): categorical elements which can be ordered (this sounds weird, but we’ll explain more later)\n  examplestring \u0026lt;- \u0026quot;This is a string of text\u0026quot; exampledouble \u0026lt;- 26.2 exampleinteger \u0026lt;- 5 #We can find out the data types by running typeof() typeof(examplestring) ## [1] \u0026quot;character\u0026quot; #What data types are exampledouble and exampleinteger? typeof(exampledouble) ## [1] \u0026quot;double\u0026quot; typeof(exampleinteger) ## [1] \u0026quot;double\u0026quot; #Notice that exampleinteger is also listed as a double; this is because R will automatically store numbers as doubles, and converts between numeric classes automatically realinteger \u0026lt;- as.integer(exampleinteger) typeof(realinteger) ## [1] \u0026quot;integer\u0026quot; When plotting, data types will change how plots view your data. For example, characters will often be unique values without order, numbers will often be continuous rather than discrete, and ordered alphabetically, and factors will be discrete and maintain an order. We will learn more about this soon, but we can use an example with qplot (which we’ve reviewed).\npenguins \u0026lt;- read.csv(\u0026quot;penguins.csv\u0026quot;) # How many colors are there when we color by island? qplot(x = bill_length_mm, y = bill_depth_mm, data = penguins, color = island) ## Warning: Removed 2 rows containing missing values (geom_point). # How many colors are there when we color by bill depth? qplot(x = bill_length_mm, y = bill_depth_mm, data = penguins, color = bill_depth_mm) ## Warning: Removed 2 rows containing missing values (geom_point). Answers to practice problems ## \u0026#39;data.frame\u0026#39;: 344 obs. of 8 variables: ## $ species : chr \u0026quot;Adelie\u0026quot; \u0026quot;Adelie\u0026quot; \u0026quot;Adelie\u0026quot; \u0026quot;Adelie\u0026quot; ... ## $ island : chr \u0026quot;Torgersen\u0026quot; \u0026quot;Torgersen\u0026quot; \u0026quot;Torgersen\u0026quot; \u0026quot;Torgersen\u0026quot; ... ## $ bill_length_mm : num 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ... ## $ bill_depth_mm : num 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ... ## $ flipper_length_mm: int 181 186 195 NA 193 190 181 195 193 190 ... ## $ body_mass_g : int 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ... ## $ sex : chr \u0026quot;male\u0026quot; \u0026quot;female\u0026quot; \u0026quot;female\u0026quot; NA ... ## $ year : int 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ... ## Warning: Removed 2 rows containing missing values (geom_point). ## Warning: Removed 1 rows containing missing values (geom_point). ## Warning: Removed 1 rows containing missing values (geom_point).   ","date":1656374400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656438129,"objectID":"d8278a20ced3788fc74356df608f2131","permalink":"https://nyusurp.github.io/2022/06/28/understanding-functions/","publishdate":"2022-06-28T00:00:00Z","relpermalink":"/2022/06/28/understanding-functions/","section":"handout","summary":"Review Let’s create our data frames again by running the following code:\nNewDataFrame \u0026lt;- data.frame(Random = c(4, 20, 10, 21, 63, 3, 14, 60, 9, 6), Index = 1:10, Categories = c(\u0026quot;Month\u0026quot;, \u0026quot;Day\u0026quot;, \u0026quot;Month\u0026quot;, \u0026quot;Day\u0026quot;, \u0026quot;Year\u0026quot;, \u0026quot;Month\u0026quot;, \u0026quot;Day\u0026quot;, \u0026quot;Year\u0026quot;, \u0026quot;Month\u0026quot;, \u0026quot;Day\u0026quot;)) Examples for plotting subsetted values If you wanted to plot only specific values, you could use these same booleans inside the functions to plot.","tags":[],"title":"Understanding Functions","type":"handout"},{"authors":["Cassandra Buzby"],"categories":["Handout"],"content":" Indexing What do we mean by indexing? So far, we’ve worked with data frames in R. Each data frame is really a set of rows and columns with values populated, and these can be broken down into what are called vectors. A vector is simply a one-dimensional set of something that can have at minimum length 1.\nWe can create vectors using the function c(), for concatenate.\nFirstVector \u0026lt;- c(4,20,10,21,60,3,14,63,9,6) FirstVector ## [1] 4 20 10 21 60 3 14 63 9 6 This vector has a length, and each number has an index within that vector. In the upper right, you can see that your FirstVector values are 1:10 and numeric. We can also use the length() function to find out how many elements we have in our vector.\nlength(FirstVector) ## [1] 10 If we wanted to identify the first value, we could use square brackets, ‘[]’, to identify that value. R will print the value that corresponds with that number.\nFirstVector[1] ## [1] 4 If we wanted to find the fifth value, we would use the following:\nFirstVector[5] ## [1] 60 #What is the 9th element in the vector? Write your code below: To make a set of numbers that is in a sequence by one, we can just use a ‘:’ to tell R to print that sequence. We can make a new vector using this:\nSecondVector \u0026lt;- 1:10 SecondVector ## [1] 1 2 3 4 5 6 7 8 9 10 Similarly, we can subset using the ‘:’ to ask R to give us a set of numbers to index by, such as the first three elements in the FirstVector.\nFirstVector[1:3] ## [1] 4 20 10 #Find the last 4 elements of SecondVector. Print your code below:  Indexing Data Frames If we wanted to make a data frame from vectors that we already have, we can use the data.frame() function to combine vectors of the same size. If the vectors are different sizes, R won’t know what to do with the extra slots and will give you an error.\n#Making a data frame from vectors NewDataFrame \u0026lt;- data.frame(Random = FirstVector, Index = SecondVector) NewDataFrame ## Random Index ## 1 4 1 ## 2 20 2 ## 3 10 3 ## 4 21 4 ## 5 60 5 ## 6 3 6 ## 7 14 7 ## 8 63 8 ## 9 9 9 ## 10 6 10 Instead of using length() to find out the size of a data frame, we would need to find the dimensions of that data frame. We briefly covered this function in earlier sessions: you can use dim().\ndim(NewDataFrame) ## [1] 10 2 The output of dim() is a vector, which gives the number of rows (first number) and the number of columns (second number). An easy way to remember this is “railroad car”, which always has R before C, or rows before columns.\nWhat if we wanted to find the first row of our data frame? We could use square brackets again, but this time we would need to add a column in between our row argument and our column argument. To select all of the values of one row or column, leave the element (before or after the comma) blank.\n#The following code will give the first row: NewDataFrame[1,] ## Random Index ## 1 4 1 #This next code will give the second column: NewDataFrame[,2] ## [1] 1 2 3 4 5 6 7 8 9 10 What if we wanted to find the first column and fourth row element? We would indicate both of these numbers in square brackets:\nNewDataFrame[4,1] ## [1] 21 #Find the third element of the second column below: #Find the last 3 elements of the first column below:  Using column names with $ If you wanted to refer to a column by name, you can do so with the $ operator. We can print the second column as such:\nNewDataFrame$Index ## [1] 1 2 3 4 5 6 7 8 9 10 If we wanted to select the second element of the Index column, we could do so using the square brackets as we did before; in this case, though, we now have a vector (the column) rather than a data frame, so we only need one dimension in our square brackets:\nNewDataFrame$Index[2] ## [1] 2 #Find the fourth element of the Random column below:   Logicals A review of Booleans Booleans are true/false statements that are evaluated by R. TRUE is encoded by a 1, and FALSE is encoded by a 0. R recognizes the words “TRUE” and “FALSE” when they are capitalized.\nWe can evaluate two numbers by using the ‘==’ sign between them:\n2 == 2 ## [1] TRUE 2 == 3 ## [1] FALSE We can also find the numbers in a vector that are equal to a certain number:\nFirstVector == 4 ## [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE Note that only the first element of FirstVector is 4; the rest are not, and so this evaluates to FALSE.\nWe can also use the \u0026lt; and \u0026gt; to evaluate, and \u0026lt;= and \u0026gt;=:\nFirstVector \u0026lt; 10 ## [1] TRUE FALSE FALSE FALSE FALSE TRUE FALSE FALSE TRUE TRUE # Find all of the values of SecondVector that are greater than or equal to 4 # Find all of the values of FirstVector that are less than 5 We can also evaluate two vectors to see if they have the same values:\nFirstVector == NewDataFrame[,1] ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #Below, use \u0026#39;!=\u0026#39; to ask if FirstVector is NOT equal to the first column of NewDataFrame Finally, we can compare if two columns are equal in our data frame:\nNewDataFrame$Random == NewDataFrame$Index ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE   Subsetting Subsetting by values We’ve done this using dplyr in the past; we can take a data frame and filter it by a certain value. Without using the dplyr package, we can also do this based on the rows and column indices. Keep in mind that if you’re using the full name of the column,\n#First we can print the indices where the Random column equals 4 NewDataFrame$Random == 4 ## [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #By placing the true values in the square brackets, this code prints the rows where Rnadom is equal to 4 NewDataFrame[NewDataFrame$Random == 4,] ## Random Index ## 1 4 1 #Below, find the rows where the Random column is greater than 50 #Next, find the rows in which the Random column value is less than OR equal to the Index column value Of course, this can also be done using dplyr, but with naming columns and not the data frame:\nlibrary(dplyr) ## ## Attaching package: \u0026#39;dplyr\u0026#39; ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## filter, lag ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## intersect, setdiff, setequal, union NewDataFrame %\u0026gt;% filter(Random == 4) ## Random Index ## 1 4 1  Putting it together Before we move on to visualizing, we can also create a new column in our data frame using $, and we can populate that by using booleans:\nNewDataFrame$NewColumn \u0026lt;- NewDataFrame$Random \u0026gt;= NewDataFrame$Index NewDataFrame ## Random Index NewColumn ## 1 4 1 TRUE ## 2 20 2 TRUE ## 3 10 3 TRUE ## 4 21 4 TRUE ## 5 60 5 TRUE ## 6 3 6 FALSE ## 7 14 7 TRUE ## 8 63 8 TRUE ## 9 9 9 TRUE ## 10 6 10 FALSE   Visualizing the subset Plotting subsetted values If you wanted to plot only specific values, you could use these same booleans inside the functions to plot. This is going to be the basis of how we separate out values in our plots.\nlibrary(ggplot2) # Plot our data frame here qplot(x = NewDataFrame$Random, y = NewDataFrame$Index) qplot(x = Random, y = Index, data = NewDataFrame) # We can change the size of our points by adding in the \u0026#39;size\u0026#39; argument qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, size = 1) # Finally, we can add in coloring by a boolean logical qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$Index \u0026gt; 5, size = 1) qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$NewColumn, size = 1)   Exploring R One of the most important things to do in R is read the documentation for different packages and functions. If we look at the function for qplot, it will give us the options for our plots.\nWe can do this by either running help() or ?, as done below:\nhelp(qplot) ?qplot This has lots of options, but the examples show where they have options for size and color. We’ll get into how to use these (and more!) in ggplot later, but you can explore how to visualize your own data using qplot, as long as you remember to load ggplot2 into your workspace.\nYou’ll notice that there’s an option for geom. This is the type of plot that will be made, and the default is a scatter plot (so geom = “point”). You can find this in the defaults for geom.\n#Make a scatter plot qplot(x = Index, y = Random, data = NewDataFrame, geom = \u0026quot;point\u0026quot;, xlim = c(0,25), ylim = c(0,100), main = \u0026quot;Title of Randomness\u0026quot;, xlab = \u0026quot;Index Expanded\u0026quot;, ylab = \u0026quot;Random Numbers\u0026quot;, color = Random \u0026gt; 5, size = 1) #Make a box plot with scatter (called jitter) qplot(x = Random, y = NewColumn, data = NewDataFrame, geom = c(\u0026quot;boxplot\u0026quot;, \u0026quot;jitter\u0026quot;), main = \u0026quot;Boxplot of Random Numbers\u0026quot;, color = Index) Practice Load in the dataset penguins.csv, and plot the bill length vs body mass of penguins, coloring by species and changing the shape by island.\n#Load in the csv using read.csv() #View the data by using head() and find the names of the columns using str() #Use qplot to plot the columns that you\u0026#39;re interested in  Advanced Practice Using either dplyr or subsetting, plot the Gentoo penguins bill length vs body mass, and color by if their body mass is above 5500.\n# Your code below   ","date":1655942400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656005619,"objectID":"01582d163ee51507a52c9ecdd5afb717","permalink":"https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/","publishdate":"2022-06-23T00:00:00Z","relpermalink":"/2022/06/23/understanding-indexing-and-subsetting/","section":"handout","summary":"Indexing What do we mean by indexing? So far, we’ve worked with data frames in R. Each data frame is really a set of rows and columns with values populated, and these can be broken down into what are called vectors.","tags":[],"title":"Understanding Indexing and Subsetting","type":"handout"},{"authors":["Yen-Chung Chen"],"categories":["Handout"],"content":" Loading data Following what we did last week, we are going to keep working with the penguins today. You can find the dataset after you extracted session3.zip which you can download from here.\nFigure things out on the internet If you don’t remember how to do something with R and happen to be the most R-fluent people in the peer, don’t panic. Most of the time, searching for [what you want to do] in R work out great.\nOnline forums like StackOverflow and Kaggle often give great answers with code examples that you could play with. If you are a genomic person, Biostar and SEQanswers would be your friend.\nlibrary(dplyr) ## ## Attaching package: \u0026#39;dplyr\u0026#39; ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## filter, lag ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## intersect, setdiff, setequal, union # How do you load a csv file with R? penguins \u0026lt;- read.csv(\u0026quot;penguins.csv\u0026quot;)  Figuring things out within R Oftentimes, an answer you found online provides a code that almost works, but you might not yet know enough to make it work. For times like this, R has documentation built in for each function describing the arguments that you can tweak and what it meant.\nYou can trigger the help page with ?[function] in the console. Let’s try it out: We used head() last week to take a glimpse of the first few rows of a table, so how do we print the first 3 instead of 6 rows?\nhead(penguins, n = 3) ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## 1 Adelie Torgersen 39.1 18.7 181 3750 ## 2 Adelie Torgersen 39.5 17.4 186 3800 ## 3 Adelie Torgersen 40.3 18.0 195 3250 ## sex year ## 1 male 2007 ## 2 female 2007 ## 3 female 2007   count() things How many penguins of each species were observed on each island?\npenguins %\u0026gt;% count(island, species) ## island species n ## 1 Biscoe Adelie 44 ## 2 Biscoe Gentoo 124 ## 3 Dream Adelie 56 ## 4 Dream Chinstrap 68 ## 5 Torgersen Adelie 52 Which species is found on all islands? I know it’s obvious, but let’s use a sledgehammer to crack a nut this time.\n# The output in the previous chunk is also a table that could be count()ed. penguins %\u0026gt;% count(island, species) %\u0026gt;% count(species) ## species n ## 1 Adelie 3 ## 2 Chinstrap 1 ## 3 Gentoo 1  filter() out your species Let’s say you are interested in comparing how the islands influences the growth of penguins. Either you’ll need to go to Antarctica to observe more Gentoo or Chinstrap penguins on other islands, or only Adelie penguins make sense for your purpose.\n# Since none of us is going to leave for Antarctica any time soon (right?) # Let\u0026#39;s keep only the Adelie penguins, and **assign it to a new object**. adelie \u0026lt;- penguins %\u0026gt;% filter(species == \u0026quot;Adelie\u0026quot;) Revisiting the criteria for filter() There are 6 basic types of comparison:\n ==: Equal to !=: Not equal to \u0026gt;: Larger than \u0026gt;=: Larger or equal to \u0026lt;: Less than \u0026lt;=: Less than or equal to  # How many male Adelie penguins were observed? adelie %\u0026gt;% filter(sex == \u0026quot;male\u0026quot;) %\u0026gt;% count() ## n ## 1 73 # How many Adelie penguins were found on islands that are not Dream island? adelie %\u0026gt;% filter(island != \u0026quot;Dream\u0026quot;) %\u0026gt;% count() ## n ## 1 96 # How many Adelie penguins were observed during or before 2008? adelie %\u0026gt;% filter(year \u0026lt;= 2008) %\u0026gt;% count() ## n ## 1 100  Combining criteria Sometimes, we’ll need more than one criteria to get the data we want. For example, if you are interested in the female Adelie penguins on the Biscoe island:\nadelie %\u0026gt;% filter(sex == \u0026quot;female\u0026quot;, island == \u0026quot;Biscoe\u0026quot;) ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## 1 Adelie Biscoe 37.8 18.3 174 3400 ## 2 Adelie Biscoe 35.9 19.2 189 3800 ## 3 Adelie Biscoe 35.3 18.9 187 3800 ## 4 Adelie Biscoe 40.5 17.9 187 3200 ## 5 Adelie Biscoe 37.9 18.6 172 3150 ## 6 Adelie Biscoe 39.6 17.7 186 3500 ## 7 Adelie Biscoe 35.0 17.9 190 3450 ## 8 Adelie Biscoe 34.5 18.1 187 2900 ## 9 Adelie Biscoe 39.0 17.5 186 3550 ## 10 Adelie Biscoe 36.5 16.6 181 2850 ## 11 Adelie Biscoe 35.7 16.9 185 3150 ## 12 Adelie Biscoe 37.6 17.0 185 3600 ## 13 Adelie Biscoe 36.4 17.1 184 2850 ## 14 Adelie Biscoe 35.5 16.2 195 3350 ## 15 Adelie Biscoe 35.0 17.9 192 3725 ## 16 Adelie Biscoe 37.7 16.0 183 3075 ## 17 Adelie Biscoe 37.9 18.6 193 2925 ## 18 Adelie Biscoe 38.6 17.2 199 3750 ## 19 Adelie Biscoe 38.1 17.0 181 3175 ## 20 Adelie Biscoe 38.1 16.5 198 3825 ## 21 Adelie Biscoe 39.7 17.7 193 3200 ## 22 Adelie Biscoe 39.6 20.7 191 3900 ## sex year ## 1 female 2007 ## 2 female 2007 ## 3 female 2007 ## 4 female 2007 ## 5 female 2007 ## 6 female 2008 ## 7 female 2008 ## 8 female 2008 ## 9 female 2008 ## 10 female 2008 ## 11 female 2008 ## 12 female 2008 ## 13 female 2008 ## 14 female 2008 ## 15 female 2009 ## 16 female 2009 ## 17 female 2009 ## 18 female 2009 ## 19 female 2009 ## 20 female 2009 ## 21 female 2009 ## 22 female 2009 What if you need penguins with extreme body weight? Say either over 4700g or below 2900g.\nadelie %\u0026gt;% filter(body_mass_g \u0026gt; 4700 | body_mass_g \u0026lt; 2900) ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## 1 Adelie Biscoe 36.5 16.6 181 2850 ## 2 Adelie Biscoe 36.4 17.1 184 2850 ## 3 Adelie Biscoe 41.0 20.0 203 4725 ## 4 Adelie Biscoe 43.2 19.0 197 4775 ## sex year ## 1 female 2008 ## 2 female 2008 ## 3 male 2009 ## 4 male 2009 Logical operations: What’s happening under the dplyr table Essentially, what filter() relies on is to ask a series of yes/no question to each row of a column, and the answers to these yes/no questions are called Boolean or logical values.\nIn R, TRUE means yes, while FALSE means no.\n# Is 3 larger than 5? 3 \u0026gt; 5 ## [1] FALSE # Is 2022 equal to 2020? 2022 == 2020 ## [1] FALSE # Is \u0026quot;apple\u0026quot; not equal to \u0026quot;orange\u0026quot;? \u0026quot;apple\u0026quot; != \u0026quot;orange\u0026quot; ## [1] TRUE These logical values can be further calculated with \u0026amp; (AND), | (OR), and xor().\n   \u0026amp; | xor()    TRUE/TRUE TRUE TRUE FALSE  TRUE/FALSE FALSE TRUE TRUE  FALSE/TRUE FALSE TRUE TRUE  FALSE/FALSE FALSE FALSE FALSE    So, how many Adelie penguins either have a bill length shorter than 35mm or a bill depth below 15mm?\nadelie %\u0026gt;% filter(bill_length_mm \u0026lt; 35 | bill_depth_mm \u0026lt; 15) %\u0026gt;% count() ## n ## 1 9 Now that we know filter() is working with logical values, you won’t be surprised that it can also use other functions that gives a logical value as its output as a criterion.\nFor example, we mentioned that NA is how R labels missing data. Since we are interested in body weight, we might want throw away rows with missing body weight…\n# You might want to try filtering for body_mass_g== NA adelie %\u0026gt;% filter(body_mass_g == NA) ## [1] species island bill_length_mm bill_depth_mm ## [5] flipper_length_mm body_mass_g sex year ## \u0026lt;0 rows\u0026gt; (or 0-length row.names) What is happening? Remember that we said R treats NA very differently. As a matter of fact, almost every operation gives you NA when NA is involved.\n# Try these 5 == NA ## [1] NA 3 \u0026gt; NA ## [1] NA \u0026quot;North America\u0026quot; != NA ## [1] NA 3.1415926 \u0026lt;= NA ## [1] NA Since NA is missing data, this actually makes sense:\n5 == NA is like asking “is 5 equal to something I don’t know?”, and the answer has to be “I don’t know”.\nSo, how do we ask R if it doesn’t know something or has an NA there? We use is.na().\nis.na(NA) ## [1] TRUE is.na(\u0026quot;National Academy\u0026quot;) ## [1] FALSE You can use is.na() with filter() to find the rows where body weight is NA.\n# Use is.na() to get rows with NA in body_mass_g adelie %\u0026gt;% filter(is.na(body_mass_g)) ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## 1 Adelie Torgersen NA NA NA NA ## sex year ## 1 \u0026lt;NA\u0026gt; 2007 How do we select all other rows then? In R, ! flips a logical value, and you can pronounce it as not.\n# Not TRUE !TRUE ## [1] FALSE # Not FALSE !FALSE ## [1] TRUE # Flipping (3 \u0026gt; 5) !(3 \u0026gt; 5) ## [1] TRUE We can use ! to find rows that are not NA.\n# How many Adelie penguins have their body mass recorded? adelie %\u0026gt;% filter(!is.na(body_mass_g)) %\u0026gt;% count() ## n ## 1 151   Extended reading: Dealing with missing values Depends on what you work with, you might not always want to drop missing values.\nIf you are not going to throw those data away, you’ll need to ask yourself questions like “Does missing value appear randomly?”, and decide how to best deal with them.\nIf you are interested, Hadley Wickham has a section in his book R for Data Science discussing this.\n  Group your data for further analysis Let’s say we are interested in how body weight differs between islands. To perform this analysis, we might want to calculate the median and standard deviation of body mass per island.\nTo indicate how dplyr should group your data, we use group_by() to tell it which column contains the group labels.\nLet’s assign the grouped data to another object named adelie_per_island\nadelie_per_island \u0026lt;- adelie %\u0026gt;% filter(!is.na(body_mass_g)) %\u0026gt;% group_by(island)  Get summary statistics with summarize() Now that we grouped the data, we can calculate the summary statistics.\nThe syntax for summarize() is as follows:\n# You tell summarize() which functions to use on which column adelie_per_island %\u0026gt;% summarize(mean(body_mass_g)) ## # A tibble: 3 × 2 ## island `mean(body_mass_g)` ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Biscoe 3710. ## 2 Dream 3688. ## 3 Torgersen 3706. By default, the column names of the summary table is the function call we gives to summarize(), which could be a bit ugly. We can rename the columns by:\nadelie_per_island %\u0026gt;% summarize(mean_bw = mean(body_mass_g)) ## # A tibble: 3 × 2 ## island mean_bw ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Biscoe 3710. ## 2 Dream 3688. ## 3 Torgersen 3706. The summary statistics that we use the most often are:\n Arithmetic mean (mean()) Median (median()) Standard deviation (sd())  Let’s summarize the data with median and standard deviation per island.\n# Summarize the Adelie subset per island with the median and standard deviation # of the body mass adelie_per_island %\u0026gt;% summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g)) ## # A tibble: 3 × 3 ## island bw_median bw_sd ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Biscoe 3750 488. ## 2 Dream 3575 455. ## 3 Torgersen 3700 445. What if you don’t group? adelie %\u0026gt;% filter(!is.na(body_mass_g)) %\u0026gt;% summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g)) ## bw_median bw_sd ## 1 3700 458.5661  What if you want to group with another grouping variable? # Let\u0026#39;s group with sex adelie %\u0026gt;% filter(!is.na(body_mass_g), !is.na(sex)) %\u0026gt;% group_by(sex) %\u0026gt;% summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g)) ## # A tibble: 2 × 3 ## sex bw_median bw_sd ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 female 3400 269. ## 2 male 4000 347.   A picture is worth a thousand words While it’s great to have summary statistics, oftentimes a quick visualization of our data will be very helpful.\nqplot() provided by ggplot2 is designed for this purpose and can be easily incorporated into your pipeline.\nExample: a quick scatter/strip plot per island Let’s plot something with points on a plane where the x-axis is the islands and the y-axis is the body weight.\n# Load ggplot2 library(ggplot2) adelie_per_island %\u0026gt;% qplot(data = ., x = island, y = body_mass_g, geom = \u0026quot;point\u0026quot;) There several required arguments for qplot():\n data: The data you want to plot. x: The column name of the variable you want to use as the x-axis y: The column name of the variable you want to use as the y-axis color: The column name of the variable you want to color your plot by geom: Short for “geometry”, the type of plots you want to do. Popular ones include:  point bar boxplot violin histogram density   # Let\u0026#39;s do a boxplot instead adelie_per_island %\u0026gt;% qplot(data = ., x = island, y = body_mass_g, geom = \u0026quot;boxplot\u0026quot;) ### What is the distribution of bill lengths of the whole dataset?\n# Plot a histogram with bill lengths on the x-axis penguins %\u0026gt;% qplot(data = ., x = bill_length_mm, geom = \u0026quot;histogram\u0026quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 2 rows containing non-finite values (stat_bin).  Is bill length and depth correlated for the Adelie penguins? # Plot a point plot with bill length on the x, bill depth on the y, and # color by sex adelie %\u0026gt;% qplot( data = ., x = bill_length_mm, y = bill_depth_mm, color = sex, geom = \u0026quot;point\u0026quot; ) ## Warning: Removed 1 rows containing missing values (geom_point).   ","date":1655769600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655822237,"objectID":"58ef06c157656a34056cf58caba5bfb4","permalink":"https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/","publishdate":"2022-06-21T00:00:00Z","relpermalink":"/2022/06/21/hands-on-data-wrangling/","section":"handout","summary":"Loading data Following what we did last week, we are going to keep working with the penguins today. You can find the dataset after you extracted session3.zip which you can download from here.","tags":[],"title":"Hands-On Data Wrangling","type":"handout"},{"authors":["Yen-Chung Chen"],"categories":["Jargon"],"content":"There are two different ways to represent where a file is: Absolute and relative.\nAbsolute path for a file is using the root as the starting point (/ for Linux and Mac and C:\\ for Windows). This is usually clear to the computer, but it can be really long and not comprehensible to human and thus impossible to wrap our heads around it and write.\nFor example, I had a note stored in /Users/ycc/Library/Mobile Documents/iCloud~md~obsidian/Documents/YCC/Reading note/@gold.brand_2014.md. There is no way I can remember this and type it when writing a script.\nRelative path is much shorter, but it could be tricky because sometimes where the path is defined relative to is unclear.\nIn R, you can find the working directory with getwd(), which gives you the absolute path of the reference.\nSay your working directory is /Users/me/my_cool_project, and you have a csv file (named myawesome.csv) stored in a subdirectory called \u0026ldquo;data\u0026rdquo;, you can write data/myawesome.csv in R, and R will append /Users/me/my_cool_project before your relative path for you.\nIf you need to ask R to find /Users/me/a_file_outside_wd.txt for you, relative path still has you covered outside your working directory: .. means go up to the parent folder in relative paths, so /Users/me/a_file_outside_wd.txt is ../a_file_outside_wd.txt if your working directory is /Users/me/my_cool_project.\nFor tips to set working directories in RStudio, you might also want to check the official documentation.\n","date":1655164800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655211409,"objectID":"8f828c0d6f0e6031fc4be90266ea4c2b","permalink":"https://nyusurp.github.io/2022/06/14/working-directories/","publishdate":"2022-06-14T00:00:00Z","relpermalink":"/2022/06/14/working-directories/","section":"extra","summary":"There are two different ways to represent where a file is: Absolute and relative.\nAbsolute path for a file is using the root as the starting point (/ for Linux and Mac and C:\\ for Windows).","tags":[],"title":"Working directories","type":"extra"},{"authors":["Cassandra Buzby"],"categories":["Handout"],"content":" AGENDA Introductions Installing R This Worksheet :)   Adpated from material curated by Eugene Plavskin and Grace Avecilla\n  Exploring RStudio  The console: Where you run commands one by one (bottom) The environment: Where you can see what is loaded in R (upper right) The file explorer: An easier way for you to find files (otherwise you’ll need to know the path of a file to use it in R; lower right)   Installing packages  Packages are like kits in experiments: They package the reagents and instructions for otherwise complicated processes for you.\n We’ll be installing 3 packages today\n rmarkdown: A tool that allows you to write your code along with your notes ggplot2: A handy and powerful visualization tool dplyr: A tool that handles and summarizes tables   # This is how we ask R to install packages # R will try to ask several central repositories if they have this package install.packages(\u0026quot;rmarkdown\u0026quot;)  Using Rmarkdown Rmarkdown file allow you to record your thinking process (as text) along with your analyses (as code chunks).\nHaving why you are doing the analysis and the specific code for it will help you catch up faster if you ever need to go back to the same analysis again.\nText and code This is a line of text:\n“I know how to use R!”\n# This is a chunk of code. Do you notice that the background looks different? # Also there is three buttons at the upper right corner # Press the _play_ button, and the output will be shown below the chunk print(\u0026quot;I know how to use R\u0026quot;) ## [1] \u0026quot;I know how to use R\u0026quot; 2+2 ## [1] 4  Running code:\n Click on the run button on the upper-right corner of a chunk\n Ctrl + Enter (Windows) / Cmd + Return (Mac)\n Generating output\n Click the knit button on the upper rim of the editor Knitting will re-run all your code in the file from scratch, which is a good thing because it makes sure:  The code works on its own We haven’t accidentally deleted or added some lines of code that will break the code.      Working directory and Rstudio projects What is a working directory? A working directory is where R will try to find things if you ask it to1.\n Checking and setting your working directory You can check the path of your working directory with getwd() (short for get working directory).\n# Expect to see a path printed below # This is where R find things for you getwd() ## [1] \u0026quot;/Users/ycc/Dropbox/Docs/NYU/Teaching/SURP/NYU_SURP_blogdown/content/handout/2022-06-13-prepare-your-computer-for-r\u0026quot;  Loading files from your working directory Now that you have a directory, files inside that directory can be loaded using functions like read.csv(). This function will take a comma-separated file (which you can make in Excel) and allow you to save it as a variable that R can work with.\nFor the example below, mytestdata.csv can be found in the example data.\n# Open the csv file with Excel or Google Sheet to take a look # mytestdata # And then we load it to see how it looks like in R read.csv(\u0026quot;mytestdata.csv\u0026quot;) ## Day Count Group ## 1 1 12 1 ## 2 1 15 2 ## 3 2 8 1 ## 4 2 3 2 ## 5 3 10 1 ## 6 3 24 2 # You need to ask R to keep the csv files # *Check the environment tab on the upper right corner of your window mytestdata \u0026lt;- read.csv(\u0026quot;mytestdata.csv\u0026quot;) # You can ask R to retrieve what it keeps later by the name you gave to the data mytestdata ## Day Count Group ## 1 1 12 1 ## 2 1 15 2 ## 3 2 8 1 ## 4 2 3 2 ## 5 3 10 1 ## 6 3 24 2   Basic usage of R: Using it as a calculator Enter the following line of command in the console\n17 + 2.3 ## [1] 19.3 In programming, division is often written as slashes (/), while multiplication is written as asterisks (*). Now, let’s try doing these in the console as well:\n# Try multiplying 8 by 7 8*7 ## [1] 56 # Try dividing 48 by 12 48/12 ## [1] 4  An example of our data Cassandra’s data is allele frequencies as read counts from sequencing. To analyze it, she first:\nloads in the data, runs an R function to analyze it, plots using ggplot2.  Here is a quick version of this:\nlibrary(ggplot2) library(dplyr) ## ## Attaching package: \u0026#39;dplyr\u0026#39; ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## filter, lag ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## intersect, setdiff, setequal, union library(tidyr) #Read in the data WeightedMeanZStats.100 \u0026lt;- read.csv(\u0026quot;CBData.csv\u0026quot;) #Look at the data (this only prints the first 6 rows) head(WeightedMeanZStats.100) ## X CHROM POS Bulk Parent Int Stat ## 1 result.1 II 100153 -2.3893709 -1.0534663 1.64175559 Z ## 2 result.2 II 100367 -0.9361101 -0.2837268 0.55031705 Z ## 3 result.3 II 100413 -1.1028976 -0.6802854 0.95854049 Z ## 4 result.4 II 100878 0.7191787 0.9999416 -1.25245792 Z ## 5 result.5 II 101289 -1.2163032 1.4995884 0.07063202 Z ## 6 result.6 II 101340 -1.4019217 1.1382948 -0.29809070 Z #Find the dimensions of the datast dim(WeightedMeanZStats.100) ## [1] 95106 7 unique(WeightedMeanZStats.100$Stat) ## [1] \u0026quot;Z\u0026quot; \u0026quot;ZPrime\u0026quot; #Plot the data using ggplot (which we\u0026#39;ll go into more later!) WeightedMeanZStats.100 %\u0026gt;% filter(Stat == \u0026quot;ZPrime\u0026quot;) %\u0026gt;% pivot_longer(c(\u0026quot;Bulk\u0026quot;, \u0026quot;Parent\u0026quot;, \u0026quot;Int\u0026quot;)) %\u0026gt;% ggplot(., aes(x = POS, y = value, color = name)) + geom_line(size = 1) + #geom_point(alpha = 0.1) + #+ geom_hline(yintercept = 0, color = \u0026quot;gray\u0026quot;) + geom_hline(yintercept = c(1.96, -1.96), color = \u0026quot;black\u0026quot;, linetype = \u0026quot;dashed\u0026quot;) + theme(axis.text.x = element_blank()) + ylab(\u0026quot;Oak \u0026lt;- Effect -\u0026gt; Wine\u0026quot;) + scale_color_manual(values = c(\u0026quot;violet\u0026quot;, \u0026quot;lightblue\u0026quot;, \u0026quot;darkorange\u0026quot;)) + facet_grid(~CHROM, scales = \u0026quot;free\u0026quot;) + ggtitle(\u0026quot;Comparison of Zprime per Factor | Weighted Means W = 100\u0026quot;)   See working directory if you are interested.↩︎\n   ","date":1655078400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655167125,"objectID":"ebda1f992433a7d69beb10ea13a3ed69","permalink":"https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/","publishdate":"2022-06-13T00:00:00Z","relpermalink":"/2022/06/13/prepare-your-computer-for-r/","section":"handout","summary":"AGENDA Introductions Installing R This Worksheet :)   Adpated from material curated by Eugene Plavskin and Grace Avecilla\n  Exploring RStudio  The console: Where you run commands one by one (bottom) The environment: Where you can see what is loaded in R (upper right) The file explorer: An easier way for you to find files (otherwise you’ll need to know the path of a file to use it in R; lower right)   Installing packages  Packages are like kits in experiments: They package the reagents and instructions for otherwise complicated processes for you.","tags":[],"title":"Prepare your computer for R","type":"handout"},{"authors":null,"categories":null,"content":"The contents provided on this website are for information purposes only. We have no intention to provide professional advice via this website, and the information is for discussion and communication only. Please consult a professional person before applying any information posted on this website.\nWe are not responsible for the accuracy, completeness, and timeliness of any information on or linked from this website. We are not liable for any errors or omissions of this information, and the availability of information provided by or linked from the website is not warranted. I am not liable for any damage resulting from or related to the use of this information.\nInformation in this website is licensed under CC BY-NC-ND 4.0 unless otherwise specified in the material. We retain the right to change the terms and conditions at any time and without notice.\n","date":1591225200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591225200,"objectID":"9b10c1f64082d3869fd4cb1f85809430","permalink":"https://nyusurp.github.io/terms/","publishdate":"2020-06-04T00:00:00+01:00","relpermalink":"/terms/","section":"","summary":"The contents provided on this website are for information purposes only. We have no intention to provide professional advice via this website, and the information is for discussion and communication only.","tags":null,"title":"Terms","type":"page"},{"authors":null,"categories":null,"content":"Who we are? This is a course website (https://nyusurp.github.io) for the R workshop at NYU. The site is currently maintained by Yen-Chung Chen, who is not an expert in website technology nor in privacy law, so the following description is to the best of my understanding of how this website is built and my intentions. If you suspect your privacy is compromised while browsing, please don\u0026rsquo;t hesitate to contact me.\nThe website is written with blogdown, the source is hosted on Github and rendered by Hugo.\nCollection of your personal information The website does not identify you nor track the traffic.\nSharing of your personal information This website does not collect personal information.\n","date":1577833200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577833200,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://nyusurp.github.io/privacy/","publishdate":"2020-01-01T00:00:00+01:00","relpermalink":"/privacy/","section":"","summary":"Who we are? This is a course website (https://nyusurp.github.io) for the R workshop at NYU. The site is currently maintained by Yen-Chung Chen, who is not an expert in website technology nor in privacy law, so the following description is to the best of my understanding of how this website is built and my intentions.","tags":null,"title":"Privacy Policy","type":"page"}]