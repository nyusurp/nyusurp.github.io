<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Handouts | R Workshop</title>
    <link>https://nyusurp.github.io/handout/</link>
      <atom:link href="https://nyusurp.github.io/handout/index.xml" rel="self" type="application/rss+xml" />
    <description>Handouts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© NYU 2021 - 2022</copyright><lastBuildDate>Thu, 14 Jul 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://nyusurp.github.io/images/icon_hu437f07d278844891d2e703134e956aad_197157_512x512_fill_lanczos_center_2.png</url>
      <title>Handouts</title>
      <link>https://nyusurp.github.io/handout/</link>
    </image>
    
    <item>
      <title>Reproducing Visualization in Publications</title>
      <link>https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/</link>
      <pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/</guid>
      <description>


&lt;div id=&#34;quick-recappractice&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Quick recap/practice&lt;/h2&gt;
&lt;p&gt;To warm up, we’re going to use one of Cassandra’s data sets, which has chromosome positions and z-scores. We’ll do each of these exercises together.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load in the data
BSAResults = read.csv(&amp;quot;data/BSAResults.csv&amp;quot;)

# Find the unique values of the chromosomes. How do we find the column name?
str(BSAResults)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    49432 obs. of  6 variables:
##  $ X          : chr  &amp;quot;result.1&amp;quot; &amp;quot;result.2&amp;quot; &amp;quot;result.3&amp;quot; &amp;quot;result.4&amp;quot; ...
##  $ CHROM      : chr  &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; ...
##  $ POS        : num  100007 1035 1074 1101 1173 ...
##  $ Bulk       : num  -0.08758 0.1827 -0.00987 0.01895 0.87397 ...
##  $ Parent     : num  3.554 0.537 -0.345 -0.12 -0.393 ...
##  $ Interaction: num  -0.01715 0.13848 0.31904 -0.00762 -0.18258 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(BSAResults$CHROM)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;I&amp;quot;    &amp;quot;II&amp;quot;   &amp;quot;III&amp;quot;  &amp;quot;IV&amp;quot;   &amp;quot;V&amp;quot;    &amp;quot;VI&amp;quot;   &amp;quot;VII&amp;quot;  &amp;quot;VIII&amp;quot; &amp;quot;IX&amp;quot;   &amp;quot;X&amp;quot;   
## [11] &amp;quot;XI&amp;quot;   &amp;quot;XII&amp;quot;  &amp;quot;XIII&amp;quot; &amp;quot;XIV&amp;quot;  &amp;quot;XV&amp;quot;   &amp;quot;XVI&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Filter for Chromosome II using dplyr&amp;#39;s filter() function, and pipe through head() to output only the first 10 lines
BSAResults %&amp;gt;%
  filter(CHROM == &amp;quot;II&amp;quot;) %&amp;gt;%
  head(., n = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               X CHROM    POS        Bulk        Parent Interaction
## 1  result.11000    II 100153 -0.18330726 -0.0646732103  0.19943965
## 2  result.21000    II 100367 -0.18800155 -0.2912844665  0.28590390
## 3  result.31000    II 100413 -0.32764216 -0.3031255854  0.52362311
## 4  result.41000    II 100878  0.02040887  0.1185267276 -0.16398910
## 5  result.51000    II 101103 -0.13385976 -0.0100344121 -0.01602947
## 6   result.6432    II 101289 -0.25282081  0.0817157785  0.21342401
## 7   result.7100    II 101340 -0.19522650  0.1584760726 -0.15293462
## 8   result.8100    II  10136 -0.30926532 -0.0078019497 -0.02303257
## 9   result.9100    II 101507 -0.19850031 -0.0007044734  0.08039453
## 10 result.10100    II 101581  0.07333291  0.0641751118 -0.28421660&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot a scatter plot of the Bulk with x-axis being POS and y-axis being Bulk values
BSAResults %&amp;gt;%
  filter(CHROM == &amp;quot;II&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = POS, y = Bulk)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If we want plot Bulk, Interaction, and Parent for Chr II at once, we need to pivot the data to long format. How do we do so?
BSAResults %&amp;gt;%
  pivot_longer(., cols = c(Bulk, Interaction, Parent)) %&amp;gt;%
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 5
##   X        CHROM    POS name          value
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;
## 1 result.1 I     100007 Bulk        -0.0876
## 2 result.1 I     100007 Interaction -0.0171
## 3 result.1 I     100007 Parent       3.55  
## 4 result.2 I       1035 Bulk         0.183 
## 5 result.2 I       1035 Interaction  0.138 
## 6 result.2 I       1035 Parent       0.537&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Then to plot, we can separate our data by &amp;quot;name&amp;quot; - rename this column &amp;quot;Z_score&amp;quot; using pivot_longer()
BSAResults %&amp;gt;%
  pivot_longer(., cols = c(Bulk, Interaction, Parent), names_to = &amp;quot;Z_score&amp;quot;) %&amp;gt;%
# There&amp;#39;s a more interesting thing happening on Chr VIII. Filter for this instead.
  filter(CHROM == &amp;quot;VIII&amp;quot;) %&amp;gt;%
# Plot the pivoted points with them colored by Z_score. 
  ggplot(., aes(x = POS, y = value, color = Z_score)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-1-2.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# There are a lot of points. Change the opacity of these points.
BSAResults %&amp;gt;%
  pivot_longer(., cols = c(Bulk, Interaction, Parent), names_to = &amp;quot;Z_score&amp;quot;) %&amp;gt;%
  filter(CHROM == &amp;quot;VIII&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = POS, y = value, color = Z_score)) +
  geom_point(alpha = 0.3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-1-3.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We now want to change the names to reflect what the value actually is. Add labels to the plot.
BSAResults %&amp;gt;%
  pivot_longer(., cols = c(Bulk, Interaction, Parent), names_to = &amp;quot;Z_score&amp;quot;) %&amp;gt;%
  filter(CHROM == &amp;quot;VIII&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = POS, y = value, color = Z_score)) +
  geom_point(alpha = 0.3) +
  xlab(&amp;quot;Coordinate on Chromsome (nt)&amp;quot;) +
  ylab(&amp;quot;Z-Score&amp;quot;) +
  ggtitle(&amp;quot;The Light from the Other End of the Tunnel&amp;quot;) +
# A different theme might be better. Let&amp;#39;s use theme_classic()
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-1-4.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# BONUS: it would be great to plot all chromosomes on the plot at once. Add facet_grid(~CHROM) to do this, and once it works, remove the filtering of your CHROM column.
BSAResults %&amp;gt;%
  pivot_longer(., cols = c(Bulk, Interaction, Parent), names_to = &amp;quot;Z_score&amp;quot;) %&amp;gt;%
  # filter(CHROM == &amp;quot;VIII&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = POS, y = value, color = Z_score)) +
  geom_point(alpha = 0.3, size = 0.1) +
  xlab(&amp;quot;Coordinate on Chromsome (nt)&amp;quot;) +
  ylab(&amp;quot;Z-Score&amp;quot;) +
  ggtitle(&amp;quot;The One where Everything is Plotted Together&amp;quot;) +
  theme_classic() +
  facet_grid(~CHROM, space = &amp;quot;free_x&amp;quot;) +
  # NEW: Another way to limit the y
  coord_cartesian(ylim = c(-1.5, 1.5)) +
  guides(color = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-1-5.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Today, we will be looking into the first figure from
&lt;a href=&#34;https://www.nature.com/articles/s41587-020-0456-9&#34;&gt;Massively parallel Cas13 screens reveal principles for guide RNA design&lt;/a&gt; from the Sanjana Lab.&lt;/p&gt;
&lt;p&gt;The main reason we selected this paper is because: First, the visualization they
used are fairly popular and meets what we covered in previous sessions; second,
they did an excellent job in
&lt;a href=&#34;https://gitlab.com/sanjanalab/cas13&#34;&gt;sharing their data and code&lt;/a&gt;, so you will
have this unique chance to work with real data and know exactly how the authors
performed their analyses and visualization if you take the time to read their
code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;figure-1b-boxplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Figure 1b: BoxPlot&lt;/h2&gt;
&lt;p&gt;Figure 1b is a panel of boxplots showing log-transformed enrichment scores of
different types of crRNAs (the equivalent to sgRNAs for Cas13a).&lt;/p&gt;
&lt;p&gt;The processed (normalized and batch-corrected) data for crRNAs in this tiling
screen is provided in &lt;code&gt;data/GFP_screen_crRNA_enrichments.csv&lt;/code&gt;. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;crRNAs are categorized in to several categories based on their targets in
&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Log-transformed enrichment scores are stored in &lt;code&gt;meanCS.BIN1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, let’s load in the data and see what it looks like&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Load in our data
GFP_Results = read.csv(&amp;quot;data/GFP_screen_crRNA_enrichments.csv&amp;quot;)

#See what the data looks like
str(GFP_Results)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    7500 obs. of  17 variables:
##  $ p.BIN1       : num  0.03714 0.00531 0.05278 0.00993 0.81008 ...
##  $ p.BIN2       : num  0.00441 0.06989 1 0.31136 1 ...
##  $ p.BIN3       : num  0.0164 0.038 0.3089 0.2385 0.6272 ...
##  $ p.BIN4       : num  0.1162 0.0542 0.2063 0.012 0.8689 ...
##  $ logBIN1      : num  1.4302 2.2752 1.2776 2.0029 0.0915 ...
##  $ logBIN2      : num  2.355 1.156 0 0.507 0 ...
##  $ logBIN3      : num  1.785 1.42 0.51 0.622 0.203 ...
##  $ logBIN4      : num  0.935 1.266 0.686 1.923 0.061 ...
##  $ meanCS.BIN1  : num  0.698 0.973 1.167 1.055 0.953 ...
##  $ meanCS.BIN2  : num  -0.6699 -0.2926 -0.0292 -0.3766 NA ...
##  $ meanCS.BIN3  : num  -0.923 -0.469 -0.589 -0.499 -0.852 ...
##  $ meanCS.BIN4  : num  -0.658 -0.408 -0.573 -0.689 -0.67 ...
##  $ medianCS.BIN1: num  0.742 0.97 1.167 1.235 0.953 ...
##  $ medianCS.BIN2: num  -0.6353 -0.2197 -0.0292 -0.0923 NA ...
##  $ medianCS.BIN3: num  -1.019 -0.446 -0.589 -0.458 -0.852 ...
##  $ medianCS.BIN4: num  -0.774 -0.398 -0.573 -0.762 -0.67 ...
##  $ type         : chr  &amp;quot;Perfect Match&amp;quot; &amp;quot;Perfect Match&amp;quot; &amp;quot;Perfect Match&amp;quot; &amp;quot;Perfect Match&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we want to change the “type” column into factors. We can do this by using the function factor() which we went over last class, and then add the labels function to change the words into acronyms.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Note that each type is:
# 1. Represented as acronyms in the figure
# 2. Are NOT arranged in alphabetical order
# We can see the need to transform the type column to a factor

GFP_Results$type = factor(
  x = GFP_Results$type,
  levels = c(
    &amp;quot;Perfect Match&amp;quot;,
    &amp;quot;First Order&amp;quot;,
    &amp;quot;Random Double&amp;quot;,
    &amp;quot;Consecutive Double&amp;quot;,
    &amp;quot;Consecutive Triple&amp;quot;,
    &amp;quot;Non-Targeting&amp;quot;
  ),
  labels = c(
    &amp;quot;PM&amp;quot;,
    &amp;quot;SM&amp;quot;,
    &amp;quot;RD&amp;quot;, 
    &amp;quot;CD&amp;quot;,
    &amp;quot;CT&amp;quot;,
    &amp;quot;NT&amp;quot;
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we can make a basic boxplot, using ggplot and filtering for non NA values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;GFP_Results %&amp;gt;%
  # This is to remove the rows where meanCS.BIN is NA
  filter(!is.na(meanCS.BIN1)) %&amp;gt;%
  #basic elements of the plot
  ggplot(., aes(x = type, y = meanCS.BIN1)) +
  geom_boxplot() +
  #labels
  ggtitle(&amp;quot;All crRNAs&amp;quot;) +
  xlab(&amp;quot;&amp;quot;) +
  ylab(&amp;quot;log2(FC)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;First of all, the colors are different. We can change these by setting the hex codes to match the Sanjana lab’s colors, then inputting this vector of hex codes into the scale_fill_manual() function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The color palette used in the paper
#### BONUS: Change the colors and run the chunk to see what happens to the
#### plot!!
sanjana_colors = c(
  &amp;quot;#E69F00&amp;quot;, &amp;quot;#D55E00&amp;quot;, &amp;quot;#009E73&amp;quot;, &amp;quot;#0072B2&amp;quot;, &amp;quot;#56B4E9&amp;quot;, &amp;quot;#999999&amp;quot;
)

GFP_Results %&amp;gt;%
  filter(!is.na(meanCS.BIN1)) %&amp;gt;%
  #basic elements of the plot
  ggplot(aes(fill = type, x = type, y = meanCS.BIN1)) + geom_boxplot() +
  #labels
  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;log2(FC)&amp;quot;) + ggtitle(&amp;quot;All crRNAs&amp;quot;) +
  #colors
  scale_fill_manual(values = sanjana_colors)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also make the outliers smaller, using the outlier.shape and outlier.size functions in geom_boxplot().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;GFP_Results %&amp;gt;%
  filter(!is.na(meanCS.BIN1)) %&amp;gt;%
  #basic elements of the plot
  ggplot(aes(fill = type, x = type, y = meanCS.BIN1)) + geom_boxplot(outlier.shape = 20, outlier.size = 0.05) +
  #labels
  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;log2(FC)&amp;quot;) + ggtitle(&amp;quot;All crRNAs&amp;quot;) +
  #colors
  scale_fill_manual(values = sanjana_colors)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;
Next, let’s reduce the white space by adding a ylim argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;GFP_Results %&amp;gt;%
  filter(!is.na(meanCS.BIN1)) %&amp;gt;%
  #basic elements of the plot
  ggplot(aes(fill = type, x = type, y = meanCS.BIN1)) + geom_boxplot(outlier.shape = 20, outlier.size = 0.05) +
  #labels
  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;log2(FC)&amp;quot;) + ggtitle(&amp;quot;All crRNAs&amp;quot;) +
  #colors
  scale_fill_manual(values = sanjana_colors) +
  #y axis limits
  ylim(c(-1.5,1.5)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 15 rows containing non-finite values (stat_boxplot).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we’re going to use a new function called coord_fixed() to restrict the aspect ratio of the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;GFP_Results %&amp;gt;%
  filter(!is.na(meanCS.BIN1)) %&amp;gt;%
  #basic elements of the plot
  ggplot(aes(fill = type, x = type, y = meanCS.BIN1)) + geom_boxplot(outlier.shape = 20, outlier.size = 0.05) +
  #labels
  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;log2(FC)&amp;quot;) + ggtitle(&amp;quot;All crRNAs&amp;quot;) +
  #colors
  scale_fill_manual(values = sanjana_colors) +
  #y-axis limits and ratio
  ylim(c(-1.5,1.5)) + coord_fixed(ratio = 6/3) +
  # Remove legends
    guides(fill = &amp;quot;none&amp;quot;) +
    # Remove x-axis line and tick
    theme(
      axis.ticks.x = element_blank(), 
      axis.line.x = element_blank()
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 15 rows containing non-finite values (stat_boxplot).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And finally, for a publication-level plot, we’ll remove our legend and x axis ticks using guides() and theme(), and then set our overall theme to theme_classic().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;GFP_Results %&amp;gt;%
  filter(!is.na(meanCS.BIN1)) %&amp;gt;%
  #basic elements of the plot
  ggplot(aes(fill = type, x = type, y = meanCS.BIN1)) + geom_boxplot(outlier.shape = 20, outlier.size = 0.05) +
  #labels
  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;log2(FC)&amp;quot;) + ggtitle(&amp;quot;All crRNAs&amp;quot;) +
  #colors
  scale_fill_manual(values = sanjana_colors) +
  #y axis limits and ratio
  ylim(c(-1.5,1.5)) + coord_fixed(ratio = 6/3) +
  # Remove legends
  guides(fill = &amp;quot;none&amp;quot;) +
  theme_classic() +
  # Remove x-axis line and tick
    theme(
      axis.ticks.x = element_blank(), 
      axis.line.x = element_blank()
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 15 rows containing non-finite values (stat_boxplot).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;section&#34; class=&#34;section level79&#34;&gt;
&lt;p class=&#34;heading&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;figure-1c-scatter-plot-with-jitter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Figure 1c: Scatter plot with jitter&lt;/h2&gt;
&lt;p&gt;Figure 1c is a panel of scatter plots with jitter showing differences in
log-transformed enrichment scores of individual crRNAs of different types.&lt;/p&gt;
&lt;p&gt;The processed data for individual crRNAs is provided in
&lt;code&gt;data/GFPTiling_individual.csv&lt;/code&gt;. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;crRNAs are categorized in to several categories based on their targets in
&lt;code&gt;MatchType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Differences of log-transformed enrichment scores are stored in &lt;code&gt;DeltaCS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load data
tiling_result = read.csv(&amp;quot;data/GFPTiling_individual.csv&amp;quot;)

# Take a look at your data
str(tiling_result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    179 obs. of  10 variables:
##  $ Screen    : chr  &amp;quot;GFP&amp;quot; &amp;quot;GFP&amp;quot; &amp;quot;GFP&amp;quot; &amp;quot;GFP&amp;quot; ...
##  $ GuideName : chr  &amp;quot;crRNA004:7-33&amp;quot; &amp;quot;crRNA004:7-33_consecDouble_01&amp;quot; &amp;quot;crRNA004:7-33_consecDouble_02&amp;quot; &amp;quot;crRNA004:7-33_consecDouble_03&amp;quot; ...
##  $ Guide     : chr  &amp;quot;crRNA004&amp;quot; &amp;quot;crRNA004&amp;quot; &amp;quot;crRNA004&amp;quot; &amp;quot;crRNA004&amp;quot; ...
##  $ MatchType : chr  &amp;quot;Perfect Match&amp;quot; &amp;quot;Consecutive Double&amp;quot; &amp;quot;Consecutive Double&amp;quot; &amp;quot;Consecutive Double&amp;quot; ...
##  $ MatchPos  : int  33 33 33 33 33 33 33 33 33 33 ...
##  $ Annotation: chr  &amp;quot;CDS&amp;quot; &amp;quot;CDS&amp;quot; &amp;quot;CDS&amp;quot; &amp;quot;CDS&amp;quot; ...
##  $ meanCS    : num  1.0546 0.9534 0.839 0.4866 -0.0992 ...
##  $ pVal      : num  0.00993 0.81008 0.02679 0.07028 0.172 ...
##  $ log10pVal : num  2.0029 0.0915 1.572 1.1532 0.7645 ...
##  $ DeltaCS   : num  0 -0.101 -0.216 -0.568 -1.154 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the unique values for your MatchType column
unique(tiling_result$MatchType)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Perfect Match&amp;quot;      &amp;quot;Consecutive Double&amp;quot; &amp;quot;Consecutive Triple&amp;quot;
## [4] &amp;quot;First Order&amp;quot;        &amp;quot;Random Double&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make MatchType a factor
tiling_result$MatchType = factor(
  x = tiling_result$MatchType,
  levels = c(
    &amp;quot;Perfect Match&amp;quot;,
    &amp;quot;First Order&amp;quot;,
    &amp;quot;Random Double&amp;quot;,
    &amp;quot;Consecutive Double&amp;quot;,
    &amp;quot;Consecutive Triple&amp;quot;
  ),
  labels = c(
    &amp;quot;PM&amp;quot;,
    &amp;quot;SM&amp;quot;,
    &amp;quot;RD&amp;quot;, 
    &amp;quot;CD&amp;quot;,
    &amp;quot;CT&amp;quot;
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let’s make the basic ggplot for the tiling result, with MatchType on the x axis, DeltaCS on the y axis, and colored points by MatchType. You’ll want to use geom_jitter() rather than geom_point(), with a width of 0.2, a size of 3, and a shape of 20.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tiling_result %&amp;gt;%
#Filter out the NAs in the DeltaCS column
  filter(!is.na(DeltaCS)) %&amp;gt;%
#Make your ggplot scatter plot here
  ggplot(., aes(x = MatchType, y = DeltaCS, color = MatchType)) +
  geom_jitter()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We’ll add horizontal lines using the new function stat_summary(), which provides plotting of simple summary statistics. First, let’s look up the documentation for stat_summary().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#What is the other way to find the help menu?
?stat_summary&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s go ahead and use stat_summary, finding the median of each group:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tiling_result %&amp;gt;%
  filter(!is.na(DeltaCS)) %&amp;gt;%
  ggplot(aes(x = MatchType, y = DeltaCS, color = MatchType)) +
    geom_jitter(
      # Do you notice several things are different from your plot above
      # and the real one in the paper?
      # The size of the points and how wide they spread/jitter are the most
      # obvious to me, so we are fixing those here.
      width = 0.2,size = 3,shape = 20
    ) +
  
    # Add a horizontal bar at the median of each group
    # NEW FUNCTION!! stat_summary() provides plotting of simple summary
    # statistics (defined by fun (function to summarize each group)) with several
    # types of plots (defined by geom)
    stat_summary(
      fun = median,
      geom = &amp;quot;crossbar&amp;quot;,
      width = 0.5,
      color = &amp;quot;black&amp;quot;
    ) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, we can scale our y axis continuously, as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tiling_result %&amp;gt;%
  filter(!is.na(DeltaCS)) %&amp;gt;%
  ggplot(aes(x = MatchType, y = DeltaCS, color = MatchType)) +
    geom_jitter(width = 0.2,size = 3,shape = 20) +
    stat_summary(fun = median,geom = &amp;quot;crossbar&amp;quot;,width = 0.5, color = &amp;quot;black&amp;quot;) + 
  
  #scaling function
    scale_y_continuous(limits = c(-2, 0.5), breaks = c(seq(-2, 0)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_summary).&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To finish up this plot, we’ll want to set the following arguments. With a partner, add these to your plot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;title your plot “Individual crRNA”&lt;/li&gt;
&lt;li&gt;remove the x axis label&lt;/li&gt;
&lt;li&gt;set the y axis label to “delta log2(FC)”&lt;/li&gt;
&lt;li&gt;set the coordinate ratio to 7/3.5&lt;/li&gt;
&lt;li&gt;set the colors to sanajana colors as we did before (note that this time the function has to be scale_color_manual rather than scale_fill_manual)&lt;/li&gt;
&lt;li&gt;Remove x-axis line and tick as we did before&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Your publication-ready plot here
tiling_result %&amp;gt;%
  filter(!is.na(DeltaCS)) %&amp;gt;%
  ggplot(aes(x = MatchType, y = DeltaCS, color = MatchType)) +
  geom_jitter(width = 0.2,size = 3,shape = 20) +
  stat_summary(fun = median,geom = &amp;quot;crossbar&amp;quot;,width = 0.5, color = &amp;quot;black&amp;quot;) + 
  
  #scaling function
  scale_y_continuous(limits = c(-2, 0.5), breaks = c(seq(-2, 0))) +
  scale_color_manual(values = sanjana_colors) +
  coord_fixed(ratio = 7/3.5) +
  # Set axis labels
  xlab(&amp;quot;&amp;quot;) +
  ylab(&amp;quot;Delta log2(FC)&amp;quot;) +
  ggtitle(&amp;quot;Individual crRNAs&amp;quot;) +
  theme_classic() +
  theme(
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  guides(color = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_summary).&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;section-1&#34; class=&#34;section level79&#34;&gt;
&lt;p class=&#34;heading&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;figure-1d-scatter-plot-with-a-smooth-line&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Figure 1d: Scatter plot with a smooth line&lt;/h2&gt;
&lt;p&gt;Figure 1d is a panel of scatter plots with a smooth line for enrichment scores
of individual crRNAs targeting different regions of the GFP transcript.&lt;/p&gt;
&lt;p&gt;The processed data for individual crRNAs that target GFP is provided in
&lt;code&gt;data/GFPTiling_individual_full.csv&lt;/code&gt;. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log-transformed enrichment scores are stored in &lt;code&gt;meanCS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The points are plotted over the GFP transcripts, and the coordinates of
matching site is in &lt;code&gt;MatchPos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The points were colored by which quantile it falls into.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quantile is just binning values into four bins, and &lt;code&gt;dplyr&lt;/code&gt; has another
function to determine *which quantile a row belongs to by a numeric column
of your choice, and the syntax is &lt;code&gt;ntile(column, number_of_bins)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A minimal example of its usage is:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;exdf = data.frame(
  value = 1:10
)


exdf %&amp;gt;% mutate(
  split_at_median = ntile(value, 2),
  quantile = ntile(value, 4)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    value split_at_median quantile
## 1      1               1        1
## 2      2               1        1
## 3      3               1        1
## 4      4               1        2
## 5      5               1        2
## 6      6               2        2
## 7      7               2        3
## 8      8               2        3
## 9      9               2        4
## 10    10               2        4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please observe the figure and propose your way of reproducing the panel. The
colors they used are provided in the chunk below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gfp_color = c(&amp;#39;#ca0020&amp;#39;,&amp;#39;#f4a582&amp;#39;,&amp;#39;#92c5de&amp;#39;,&amp;#39;#0571b0&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load data
allGFP = read.csv(&amp;quot;data/GFPTiling_individual_full.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use qtile() within mutate to create our data frame
allGFP %&amp;gt;%
  filter(!is.na(meanCS)) %&amp;gt;%
  # Assign quartile (split into 4 proportions) by meanCS
  # Since we are going to color by quartile, it is preferable to use factor
  # than numerics
  mutate(qtile = as.factor(ntile(meanCS, 4))) %&amp;gt;% head(20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Screen      GuideName    Guide     MatchType MatchPos Annotation
## 1     GFP  crRNA001:1-27 crRNA001 Perfect Match       27        CDS
## 2     GFP  crRNA002:2-28 crRNA002 Perfect Match       28        CDS
## 3     GFP  crRNA003:6-32 crRNA003 Perfect Match       32        CDS
## 4     GFP  crRNA004:7-33 crRNA004 Perfect Match       33        CDS
## 5     GFP  crRNA005:9-35 crRNA005 Perfect Match       35        CDS
## 6     GFP crRNA006:10-36 crRNA006 Perfect Match       36        CDS
## 7     GFP crRNA007:11-37 crRNA007 Perfect Match       37        CDS
## 8     GFP crRNA008:12-38 crRNA008 Perfect Match       38        CDS
## 9     GFP crRNA009:14-40 crRNA009 Perfect Match       40        CDS
## 10    GFP crRNA010:15-41 crRNA010 Perfect Match       41        CDS
## 11    GFP crRNA011:16-42 crRNA011 Perfect Match       42        CDS
## 12    GFP crRNA012:20-46 crRNA012 Perfect Match       46        CDS
## 13    GFP crRNA013:21-47 crRNA013 Perfect Match       47        CDS
## 14    GFP crRNA014:22-48 crRNA014 Perfect Match       48        CDS
## 15    GFP crRNA015:26-52 crRNA015 Perfect Match       52        CDS
## 16    GFP crRNA016:27-53 crRNA016 Perfect Match       53        CDS
## 17    GFP crRNA017:30-56 crRNA017 Perfect Match       56        CDS
## 18    GFP crRNA018:31-57 crRNA018 Perfect Match       57        CDS
## 19    GFP crRNA019:33-59 crRNA019 Perfect Match       59        CDS
## 20    GFP crRNA020:37-63 crRNA020 Perfect Match       63        CDS
##          meanCS        pVal log10pVal    ScaledCS qtile
## 1   0.697828662 0.037139487 1.4301641  1.08371271     3
## 2   0.973333658 0.005305903 2.2752407  1.62662808     4
## 3   1.166888147 0.052775054 1.2775713  2.00805023     4
## 4   1.054580427 0.009933042 2.0029177  1.78673451     4
## 5   0.850456714 0.161383678 0.7921404  1.38448445     4
## 6   0.957187296 0.013888889 1.8573325  1.59480976     4
## 7   0.985674966 0.136754065 0.8640598  1.65094810     4
## 8   1.074104147 0.555658488 0.2551920  1.82520832     4
## 9  -0.080430937 0.600709794 0.2213353 -0.44994042     1
## 10  0.786329262 0.015443537 1.8112532  1.25811367     3
## 11 -0.068862813 0.365481687 0.4371344 -0.42714406     1
## 12  0.047882725 0.597939473 0.2233428 -0.19708308     1
## 13  0.725672983 0.168281759 0.7739630  1.13858326     3
## 14  0.108779029 0.434274771 0.3622354 -0.07707967     2
## 15 -0.038672492 0.858834132 0.0660907 -0.36765044     1
## 16 -0.056426383 0.295065651 0.5300813 -0.40263659     1
## 17  0.132830725 0.552465793 0.2576946 -0.02968294     2
## 18  0.009357908 0.763074183 0.1174332 -0.27300082     1
## 19 -0.043976387 0.754415576 0.1223894 -0.37810239     1
## 20  0.519437522 0.137494396 0.8617150  0.73217175     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; allGFP %&amp;gt;%
  filter(!is.na(meanCS)) %&amp;gt;%
  mutate(qtile = as.factor(ntile(meanCS, 4))) %&amp;gt;%
  # Pipe into ggplot and define the columns used for axes and color
  ggplot(aes(x = MatchPos, y = meanCS, color = qtile)) +
  # Plot a smooth line by the scatter points you provided 
  geom_smooth(
    # There are multiple ways to get a line from points
    # Here, we use &amp;quot;locally estimated scatter plot smoothing&amp;quot;
    method = &amp;quot;loess&amp;quot;,
    # which fits a polynomial function (curve line) within a small window
    # whose size is defined by span
    span = 0.05,
    # The color of the smooth line
    color = &amp;quot;black&amp;quot;,
    # The size of the smooth line
    size = 0.5,
    # The color of the shaded area representing the standard error of
    # the smoothing method you picked
    fill = &amp;quot;grey77&amp;quot;
  ) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then of course we can add the points, colored by their qtile scores&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;allGFP %&amp;gt;%
  filter(!is.na(meanCS)) %&amp;gt;%
  mutate(qtile = as.factor(ntile(meanCS, 4))) %&amp;gt;%
  ggplot(aes(x = MatchPos, y = meanCS, color = qtile)) +
  geom_smooth(method = &amp;quot;loess&amp;quot;, span = 0.05, color = &amp;quot;black&amp;quot;, size = 0.5, fill = &amp;quot;grey77&amp;quot;) +
  geom_point(shape = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;allGFP %&amp;gt;%
  filter(!is.na(meanCS)) %&amp;gt;%
  mutate(qtile = as.factor(ntile(meanCS, 4))) %&amp;gt;%
  ggplot(aes(x = MatchPos, y = meanCS, color = qtile)) +
  geom_smooth(method = &amp;quot;loess&amp;quot;, span = 0.05, color = &amp;quot;black&amp;quot;, size = 0.5, fill = &amp;quot;grey77&amp;quot;) +
  geom_point(shape = 20) +
  # Use classic theme
  theme_classic() +
  # Remove color legend
  guides(color = &amp;quot;none&amp;quot;) +
  # Set the ticks and limits of x and y axes
  scale_x_continuous(
    limits = c(-50, 750),
    breaks = seq(0, 750, 100),
  ) +
  scale_y_continuous(
    limits = c(-1, 1.5),
    breaks = seq(-1, 1.5, 1),
  ) +
  # Set axis titles
  xlab(&amp;quot;Position in GFP transcript (nt)&amp;quot;) +
  ylab(&amp;quot;log2(FC)&amp;quot;) +
  # Set aspect ratio
  coord_fixed(ratio = 200/3) +
  # Set a customized color palette
  scale_color_manual(values = gfp_color) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Many, many annotations are added here. This adds each individual box. Run the following code, and then try changing the Q1 box to say 1Q instead.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;allGFP %&amp;gt;%
  filter(!is.na(meanCS)) %&amp;gt;%
  mutate(qtile = as.factor(ntile(meanCS, 4))) %&amp;gt;%
  ggplot(aes(x = MatchPos, y = meanCS, color = qtile)) +
  geom_smooth(method = &amp;quot;loess&amp;quot;, span = 0.05, color = &amp;quot;black&amp;quot;, size = 0.5, fill = &amp;quot;grey77&amp;quot;) +
  geom_point(shape = 20) +
  # Use classic theme
  theme_classic() +
  # Remove color legend
  guides(color = &amp;quot;none&amp;quot;) +
  # Set the ticks and limits of x and y axes
  scale_x_continuous(
    limits = c(-50, 750),
    breaks = seq(0, 750, 100),
  ) +
  scale_y_continuous(
    limits = c(-1, 1.5),
    breaks = seq(-1, 1.5, 1),
  ) +
  # Set axis titles
  xlab(&amp;quot;Position in GFP transcript (nt)&amp;quot;) +
  ylab(&amp;quot;log2(FC)&amp;quot;) +
  # Set aspect ratio
  coord_fixed(ratio = 200/3) +
  # Set a customized color palette
  scale_color_manual(values = gfp_color) +
  
  
  # Extra annotations -- these are done manually here.
  # The authors wrote a function for this, which is the preferred way:
  # https://gitlab.com/sanjanalab/cas13/-/blob/master/scripts/Plot_GuideScoreDistributionPerGene.R#L140
  # If you really want to fully recapitulate the figure, this is what you need.
  # But manually annotating one figure is pretty tedious as you see below.
  annotate(
    geom = &amp;quot;rect&amp;quot;,
    # xmin and xmax (and x for the text geom should be computed as a function)
    # This is basically the length of each exons in the transcript
    xmin = 0,
    xmax = 750,
    # These are fixed for the transcript plot
    ymin = -1,
    ymax = -0.8,
    color = &amp;quot;grey50&amp;quot;,
    fill = &amp;quot;lightblue&amp;quot;,
    alpha = 0.5
  ) +
  annotate(
    # This labels the exon number
    geom = &amp;quot;text&amp;quot;,
    x = 750/2,
    y = -0.9,
    label = &amp;quot;1&amp;quot;,
    size = 2,
    color = &amp;quot;black&amp;quot;
  ) +
  annotate(
    # The following labels the range of each quartile
    geom = &amp;quot;rect&amp;quot;,
    # The x range is fixed
    xmin = -50,
    xmax = -10,
    # ymin, ymax, and y for the text geom should be computed if a function
    # is to be written
    ymin = min(allGFP$meanCS, na.rm = TRUE),
    ymax = quantile(allGFP$meanCS, 0.25, na.rm = TRUE),
    fill = gfp_color[1],
    alpha = 0.3
  ) +
  annotate(
    geom = &amp;quot;text&amp;quot;,
    x = -30,
    y = 
      (min(allGFP$meanCS, na.rm = TRUE) + quantile(allGFP$meanCS, 0.25, na.rm = TRUE))/2,
    label = &amp;quot;Q1&amp;quot;,
    size = 4
  ) +
  annotate(
    geom = &amp;quot;rect&amp;quot;,
    xmin = -50,
    xmax = -10,
    ymin = quantile(allGFP$meanCS, 0.25, na.rm = TRUE),
    ymax = quantile(allGFP$meanCS, 0.5, na.rm = TRUE),
    fill = gfp_color[2],
    alpha = 0.3
  ) +
  annotate(
    geom = &amp;quot;text&amp;quot;,
    x = -30,
    y = 
      (quantile(allGFP$meanCS, 0.25, na.rm = TRUE) + quantile(allGFP$meanCS, 0.5, na.rm = TRUE))/2,
    label = &amp;quot;Q2&amp;quot;,
    size = 4
  ) +
  annotate(
    geom = &amp;quot;rect&amp;quot;,
    xmin = -50,
    xmax = -10,
    ymin = quantile(allGFP$meanCS, 0.5, na.rm = TRUE),
    ymax = quantile(allGFP$meanCS, 0.75, na.rm = TRUE),
    fill = gfp_color[3],
    alpha = 0.3
  ) +
  annotate(
    geom = &amp;quot;text&amp;quot;,
    x = -30,
    y = 
      (quantile(allGFP$meanCS, 0.5, na.rm = TRUE) + quantile(allGFP$meanCS, 0.75, na.rm = TRUE))/2,
    label = &amp;quot;Q3&amp;quot;,
    size = 4
  ) +
  annotate(
    geom = &amp;quot;rect&amp;quot;,
    xmin = -50,
    xmax = -10,
    ymin = quantile(allGFP$meanCS, 0.75, na.rm = TRUE),
    ymax = max(allGFP$meanCS, na.rm = TRUE),
    fill = gfp_color[4],
    alpha = 0.3
  ) +
  annotate(
    geom = &amp;quot;text&amp;quot;,
    x = -30,
    y = 
      (quantile(allGFP$meanCS, 0.75, na.rm = TRUE) + max(allGFP$meanCS, na.rm = TRUE))/2,
    label = &amp;quot;Q4&amp;quot;,
    size = 4
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/14/reproducing-visualization-in-publications/index.en_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Pivoting and ggplot2</title>
      <link>https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/</guid>
      <description>


&lt;div id=&#34;function-cheatsheet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Function cheatsheet&lt;/h2&gt;
&lt;div id=&#34;base-r&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Base R&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean()
sum()
head()
tail()
length()
dim()
as.numeric()
as.character()
typeof()
unique() - NEW - prints each categorical value only once (so the unique of c(1,2,2,4,5,5,5,8) would be 1,2,4,5,8)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dplyr&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Dplyr&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter()
group_by()
summarize()
na.omit()
mutate() - NEW - adds a new column based on the arguments within
transmute() - NEW - adds a new column based on the arguments within and then selects only that column&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ggplot2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Ggplot2&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot()
aes()
geom_point()
geom_density()
geom_count()
geom_bar()
ggtitle()
xlab()
ylab()
geom_hline() - NEW - makes a horizontal line at the y intercept specified
geom_vline()- NEW - makes a vertical line at the x intercept specified
ylim() - NEW - takes in two numbers as the limits for the y axis
xlim() - NEW - takes in two numbers as the limits for the x axis&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;advanced-cheatsheets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Advanced cheatsheets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets&#34;&gt;Master repository by RStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/main/base-r.pdf&#34;&gt;Base R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;(Mostly) dplyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf&#34;&gt;dplyr: Transformation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf&#34;&gt;ggplot2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf&#34;&gt;tidyr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;quick-recap&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Quick recap&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins &amp;lt;- read.csv(&amp;quot;penguins.csv&amp;quot;)

#We can use dplyr&amp;#39;s piping to filter by specific variables
penguins %&amp;gt;% filter(species == &amp;quot;Adelie&amp;quot;) %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1  Adelie Torgersen           39.1          18.7               181        3750
## 2  Adelie Torgersen           39.5          17.4               186        3800
## 3  Adelie Torgersen           40.3          18.0               195        3250
## 4  Adelie Torgersen             NA            NA                NA          NA
## 5  Adelie Torgersen           36.7          19.3               193        3450
## 6  Adelie Torgersen           39.3          20.6               190        3650
##      sex year
## 1   male 2007
## 2 female 2007
## 3 female 2007
## 4   &amp;lt;NA&amp;gt; 2007
## 5 female 2007
## 6   male 2007&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% filter(species == &amp;quot;Adelie&amp;quot;) %&amp;gt;% ggplot(aes(x = sex)) + geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#We can also get summary statistics using summarize
penguins %&amp;gt;% na.omit() %&amp;gt;%
  group_by(species, sex) %&amp;gt;%
  summarize(bill_length_mean = mean(bill_length_mm)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;species&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
## # Groups:   species [3]
##   species   sex    bill_length_mean
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;
## 1 Adelie    female             37.3
## 2 Adelie    male               40.4
## 3 Chinstrap female             46.6
## 4 Chinstrap male               51.1
## 5 Gentoo    female             45.6
## 6 Gentoo    male               49.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#And then pipe this into a plot
penguins %&amp;gt;% na.omit() %&amp;gt;%
  group_by(species, sex) %&amp;gt;%
  summarize(bill_length_mean = mean(bill_length_mm)) %&amp;gt;%
  ggplot(aes(x = sex, y = bill_length_mean, color = species)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;species&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-1-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;review-practice&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Review Practice&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Practice dataset
# Load the Hollywood data
# Data courtesy: InformationIsBeautiful.net
# Data source: https://public.tableau.com/s/resources?qt-overview_resources=1#qt-overview_resources
hollywood = read.csv(&amp;quot;hollywood.csv&amp;quot;)

#### What is in the dataset? Use head() or str()

#### Piping into plots

hollywood %&amp;gt;%
## How do we remove rows with missing profitability or audience score?
  filter(!is.na(Profitability), !is.na(Audience_score)) %&amp;gt;%
## How do we keep only movies that are comedies
  filter(Genre == &amp;quot;Comedy&amp;quot;) %&amp;gt;%
## How do we make a scatter plot that:
# 1. The x-axis is score on Rotten Tomatoes
# 2. The y-axis is how profitable a movie is
  ggplot(., aes(x = Audience_score, y = Profitability, color = Lead_Studio)) +
    geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Finally, how do we color each point by the lead studio that made the movie&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;line-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Line Plots&lt;/h2&gt;
&lt;p&gt;While scatter plot is very useful, line plot is sometimes useful to connect the
dots and represent a trend. In ggplot2, it is usually achieved with
&lt;code&gt;geom_line()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# When you have many data, scatter plots can be difficult for finding trends
hollywood %&amp;gt;%
  na.omit() %&amp;gt;%
  ggplot(., aes(x = Year, y = Profitability, color = Genre)) +
  geom_jitter()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s first get the average profitability per year per genre
hollywood %&amp;gt;%
  group_by(Genre, Year) %&amp;gt;%
# Since we are going to average, missing data will mess up the output.
# We are dropping them for the time being.
  na.omit() %&amp;gt;%
# Use summarize to get the average per group defined above
  summarize(avg_profit = mean(Profitability)) %&amp;gt;%
# Pipe the summary data frame to ggplot
  ggplot(., aes(x = Year, y = avg_profit, color = Genre)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;Genre&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-3-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pivoting-using-pivot_longer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pivoting using pivot_longer()&lt;/h2&gt;
&lt;p&gt;Oftentimes, we want to plot different data together in one plot (if they are on
a same scale). For example, check &lt;code&gt;example_two_color.png&lt;/code&gt; in the folder. How
would you make a plot like this?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example_two_color.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One (hopefully) straightforward way of making this kind of plot is to have
a column that contains the kind of scores, so you can do something like
&lt;code&gt;aes(color = kind_of_score)&lt;/code&gt;, while at the same time have another column that
keeps both the score from audiences and from Rotten Tomatoes to allow
&lt;code&gt;aes(x = review_score)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tidyr&lt;/code&gt; provides a simple way to do this. The function that does this is
&lt;code&gt;pivot_longer()&lt;/code&gt;, and the minimal thing that you need to know before using it
is which columns contain the scores that you want to store into the same column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Examine the original data.frame
head(hollywood)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   Film   Genre Lead_Studio Audience_score Profitability
## 1           27 Dresses  Comedy         Fox             71     5.3436218
## 2 (500) Days of Summer  Comedy         Fox             81     8.0960000
## 3   A Dangerous Method   Drama Independent             89     0.4486447
## 4        A Serious Man   Drama   Universal             64     4.3828571
## 5  Across the Universe Romance Independent             84     0.6526032
## 6            Beginners  Comedy Independent             80     4.4718750
##   Rotten_Tomatoes Worldwide_Gross Year
## 1              40      160.308654 2008
## 2              87       60.720000 2009
## 3              79        8.972895 2011
## 4              89       30.680000 2009
## 5              54       29.367143 2007
## 6              84       14.310000 2011&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Say we want to store audience_score and rotten_tomatoes into the same column
# assign the new data.frame into another object to make comparison easier
long_hollywood = hollywood %&amp;gt;%
  pivot_longer(cols = c(Audience_score, Rotten_Tomatoes))

head(long_hollywood)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 8
##   Film         Genre Lead_Studio Profitability Worldwide_Gross  Year name  value
##   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1 27 Dresses   Come… Fox                 5.34           160.    2008 Audi…    71
## 2 27 Dresses   Come… Fox                 5.34           160.    2008 Rott…    40
## 3 (500) Days … Come… Fox                 8.10            60.7   2009 Audi…    81
## 4 (500) Days … Come… Fox                 8.10            60.7   2009 Rott…    87
## 5 A Dangerous… Drama Independent         0.449            8.97  2011 Audi…    89
## 6 A Dangerous… Drama Independent         0.449            8.97  2011 Rott…    79&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do you still see either &lt;code&gt;Audience_score&lt;/code&gt; or &lt;code&gt;Rotten_Tomatoes&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Sometimes, naming columns &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; could be confusing for the future
you, and you are likely to be able to come up with better names.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pivot_longer()&lt;/code&gt; provides such arguments, so let’s &lt;code&gt;?pivot_longer&lt;/code&gt; or
&lt;code&gt;help(pivot_longer)&lt;/code&gt; and find out which arguments provide this function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s name the score column &amp;quot;score&amp;quot;
# while the source of review column &amp;quot;score_type&amp;quot;
long_hollywood = hollywood %&amp;gt;%
  pivot_longer(
    cols = c(Audience_score, Rotten_Tomatoes), names_to = &amp;quot;score_type&amp;quot;, values_to = &amp;quot;score&amp;quot;
  )

head(long_hollywood)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 8
##   Film    Genre Lead_Studio Profitability Worldwide_Gross  Year score_type score
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
## 1 27 Dre… Come… Fox                 5.34           160.    2008 Audience_…    71
## 2 27 Dre… Come… Fox                 5.34           160.    2008 Rotten_To…    40
## 3 (500) … Come… Fox                 8.10            60.7   2009 Audience_…    81
## 4 (500) … Come… Fox                 8.10            60.7   2009 Rotten_To…    87
## 5 A Dang… Drama Independent         0.449            8.97  2011 Audience_…    89
## 6 A Dang… Drama Independent         0.449            8.97  2011 Rotten_To…    79&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;practice&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Practice&lt;/h2&gt;
&lt;p&gt;You will find in the folder &lt;code&gt;rnaseq_for_heatmap.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With your partner,&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Examine what the data is about: What is each row and column?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;pivot_longer()&lt;/code&gt; to store the z-scores of every gene in a column, and
the gene symbols in another.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let’s name the value column &lt;code&gt;z_score&lt;/code&gt; and the name column &lt;code&gt;gene&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Assign the pivoted data.frame to a new object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rnaseq = read.csv(&amp;quot;rnaseq_for_heatmap.csv&amp;quot;)

# You don&amp;#39;t really want to pivot the sample column, so please set
# cols = -sample. This would pivot all other columns except for sample.
rnaseq_plot = rnaseq %&amp;gt;%
  pivot_longer(
    cols = -sample,
    names_to = &amp;quot;gene&amp;quot;,
    values_to = &amp;quot;z_score&amp;quot;
  )

head(rnaseq_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##   sample     gene    z_score
##   &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 A_Brachial Aldh1a2  0.0398
## 2 A_Brachial Runx1    0.112 
## 3 A_Brachial Tacr3    0.666 
## 4 A_Brachial Etv4     0.222 
## 5 A_Brachial Dio3     0.759 
## 6 A_Brachial Smug1    0.827&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;heatmaps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Heatmaps&lt;/h2&gt;
&lt;p&gt;Another popular visualization to show differences and trend is heatmaps. In a
heatmap, every data point is presented as a block, and the value to be compared
is represented by the color of the block.&lt;/p&gt;
&lt;p&gt;This can be done with &lt;code&gt;geom_tile()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Say we want to see if the average z-score for each chromosome
# for both bulk and parent
# We can first group by chromosomes and sample type
rnaseq_plot %&amp;gt;%
  ggplot(., aes(x = sample, y = gene, fill = z_score)) +
  geom_tile()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You might find the default ggplot2 coloring less than ideal. If that’s the case,
you can turn to &lt;code&gt;scale_*&lt;/code&gt; family of functions.&lt;/p&gt;
&lt;p&gt;In our case, we want to change a gradient that is used to fill, so the function
would be &lt;code&gt;scale_fill_gradient()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function takes two colors, &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt;. You can refer to colors by
their names or by hex codes.&lt;/p&gt;
&lt;p&gt;You can find a list of named colors in R
&lt;a href=&#34;http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rnaseq_plot %&amp;gt;%
  ggplot(., aes(x = sample, y = gene, fill = z_score)) +
  geom_tile() +
  scale_fill_gradient(low = &amp;quot;green&amp;quot;, high = &amp;quot;magenta&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;factors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Factors&lt;/h2&gt;
&lt;p&gt;This RNA-Seq dataset is originally from Figure 5B of
&lt;a href=&#34;https://www.cell.com/neuron/fulltext/S0896-6273(16)30459-7&#34;&gt;this article&lt;/a&gt;, but
it currently looks very messy and different from the figure. What is happening?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;hanley_et_al_fig5B.png&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The row order that is defined in a data.frame
fruits = data.frame(
  type = c(&amp;quot;banana&amp;quot;, &amp;quot;apple&amp;quot;, &amp;quot;citrus&amp;quot;),
  price = c(5, 1, 3)
)

# Will not be respected even in a very simple plot
# Check the x-axis -- it&amp;#39;s alphabetically ordered
fruits %&amp;gt;% qplot(data = ., x = type, y = price)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To tell &lt;code&gt;ggplot2&lt;/code&gt; the order we want, we must let it know its a categorical
variable with an order. This is called a factor in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can make a factor from a character vector using factor().
fruits$factor_type = factor(
  # Give it the vector you want to convert 
  x = fruits$type,
  # A level is a category
  # the order you used for levels will be honored by ggplot2
  levels = c(&amp;quot;banana&amp;quot;, &amp;quot;apple&amp;quot;, &amp;quot;citrus&amp;quot;)
)

# Let&amp;#39;s try the same plot again
fruits %&amp;gt;% qplot(data = ., x = factor_type, y = price)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;practice-ordering-gene-symbols-with-factors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice: Ordering gene symbols with factors&lt;/h3&gt;
&lt;p&gt;We can do the same for the gene column in &lt;code&gt;rnaseq_plot&lt;/code&gt;. You can find a list
of genes in the folder in &lt;code&gt;gene_order.txt&lt;/code&gt;. Let’s load it into R with
&lt;code&gt;readLines()&lt;/code&gt;, which would load every line of the file as an element of a
vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load gene list
gene_order = readLines(&amp;quot;gene_order.txt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we are going to make &lt;code&gt;rnaseq_plot$gene&lt;/code&gt; a factor, and use the order of
genes we just loaded above to define its levels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use factor() to convert rnaseq_plot$gene into a factor
# define the order with gene_order (loaded above)
# and assign it into a new column (gene_ordered)
rnaseq_plot$gene_ordered = factor(
  x = rnaseq_plot$gene,
  levels = gene_order
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the genes are ordered as the article, let’s plot the heatmap again.
This time, use &lt;code&gt;gene_ordered&lt;/code&gt; instead of &lt;code&gt;gene&lt;/code&gt; as the y-axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rnaseq_plot %&amp;gt;%
  ggplot(., aes(x = sample, y = gene_ordered, fill = z_score)) +
  geom_tile() +
  scale_fill_gradient(low = &amp;quot;green&amp;quot;, high = &amp;quot;magenta&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;practice-exercises&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Practice Exercises&lt;/h2&gt;
&lt;p&gt;Today we’re going to use one of Cassandra’s data sets, which has chromosome positions and z-scores.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;BSAResults = read.csv(&amp;quot;BSAResults.csv&amp;quot;)

# Filter for Chromosome II using dplyr&amp;#39;s filter() function

BSAResults %&amp;gt;% filter(CHROM == &amp;quot;II&amp;quot;) %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              X CHROM    POS        Bulk      Parent Interaction
## 1 result.11000    II 100153 -0.18330726 -0.06467321  0.19943965
## 2 result.21000    II 100367 -0.18800155 -0.29128447  0.28590390
## 3 result.31000    II 100413 -0.32764216 -0.30312559  0.52362311
## 4 result.41000    II 100878  0.02040887  0.11852673 -0.16398910
## 5 result.51000    II 101103 -0.13385976 -0.01003441 -0.01602947
## 6  result.6432    II 101289 -0.25282081  0.08171578  0.21342401&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot a scatter plot of the Bulk with x-axis being POS and y-axis being Bulk values

BSAResults %&amp;gt;% filter(CHROM == &amp;quot;II&amp;quot;) %&amp;gt;% ggplot(., aes(x = POS, y = Bulk)) + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If we want plot Bulk, Interaction, and Parent for Chr II at once, we need to pivot the data to long format. How do we do so?

BSAResults %&amp;gt;% filter(CHROM == &amp;quot;II&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Interaction&amp;quot;)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10,710 × 5
##    X            CHROM    POS name          value
##    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;
##  1 result.11000 II    100153 Bulk        -0.183 
##  2 result.11000 II    100153 Parent      -0.0647
##  3 result.11000 II    100153 Interaction  0.199 
##  4 result.21000 II    100367 Bulk        -0.188 
##  5 result.21000 II    100367 Parent      -0.291 
##  6 result.21000 II    100367 Interaction  0.286 
##  7 result.31000 II    100413 Bulk        -0.328 
##  8 result.31000 II    100413 Parent      -0.303 
##  9 result.31000 II    100413 Interaction  0.524 
## 10 result.41000 II    100878 Bulk         0.0204
## # … with 10,700 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Then to plot, we can separate our data by &amp;quot;name&amp;quot;

BSAResults %&amp;gt;% filter(CHROM == &amp;quot;II&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Interaction&amp;quot;)) %&amp;gt;% ggplot(aes(x = POS, y = value, color = name)) + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-14-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# There&amp;#39;s a more interesting thing happening on Chr VIII. Filter for this next

BSAResults %&amp;gt;% filter(CHROM == &amp;quot;VIII&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Interaction&amp;quot;)) %&amp;gt;% ggplot(aes(x = POS, y = value, color = name)) + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-14-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#There are a lot of points. Change the opacity of these points

BSAResults %&amp;gt;% filter(CHROM == &amp;quot;VIII&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Interaction&amp;quot;)) %&amp;gt;% ggplot(aes(x = POS, y = value, color = name)) + geom_point(alpha = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-14-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We now want to change the names to reflect what the value actually is. Add labels to the plot

BSAResults %&amp;gt;% filter(CHROM == &amp;quot;VIII&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Interaction&amp;quot;)) %&amp;gt;% ggplot(aes(x = POS, y = value, color = name)) + geom_point(alpha = 0.5) + ggtitle(&amp;quot;Effects of GLM&amp;quot;) + ylab(&amp;quot;Z score&amp;quot;) + xlab(&amp;quot;Position&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-14-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A different theme might be better. Let&amp;#39;s use theme_classic()

BSAResults %&amp;gt;% filter(CHROM == &amp;quot;VIII&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Interaction&amp;quot;)) %&amp;gt;% ggplot(aes(x = POS, y = value, color = name)) + geom_point(alpha = 0.5) + ggtitle(&amp;quot;Effects of GLM&amp;quot;) + ylab(&amp;quot;Z score&amp;quot;) + xlab(&amp;quot;Position&amp;quot;) + theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-14-6.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Faceting

BSAResults %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Interaction&amp;quot;)) %&amp;gt;% ggplot(aes(x = POS, y = value, color = name)) + geom_point(alpha = 0.5) + ggtitle(&amp;quot;Effects of GLM&amp;quot;) + ylab(&amp;quot;Z score&amp;quot;) + xlab(&amp;quot;Position&amp;quot;) + facet_grid(~CHROM)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-14-7.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#There are some weird values, but because these are z-scores, we know most of the data should be within +/- 2 unless significat. We can change our limits to reflect this and see actual trends

BSAResults %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Interaction&amp;quot;)) %&amp;gt;% ggplot(aes(x = POS, y = value, color = name)) + geom_line(alpha = 0.5) + ggtitle(&amp;quot;Effects of GLM&amp;quot;) + ylab(&amp;quot;Z score&amp;quot;) + xlab(&amp;quot;Position&amp;quot;)+ ylim(-5,5) + facet_grid(~CHROM, scales = &amp;quot;free&amp;quot;, space = &amp;quot;free_x&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/12/pivoting-and-ggplot2/index.en_files/figure-html/unnamed-chunk-14-8.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;coming-up-sanjana-lab-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Coming up: Sanjana Lab Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://gitlab.com/sanjanalab/cas13&#34; class=&#34;uri&#34;&gt;https://gitlab.com/sanjanalab/cas13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Paper: &lt;a href=&#34;https://www.nature.com/articles/s41587-020-0456-9#Sec1&#34; class=&#34;uri&#34;&gt;https://www.nature.com/articles/s41587-020-0456-9#Sec1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Figure 1: &lt;a href=&#34;https://www.nature.com/articles/s41587-020-0456-9/figures/1&#34; class=&#34;uri&#34;&gt;https://www.nature.com/articles/s41587-020-0456-9/figures/1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2 and dplyr</title>
      <link>https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/</guid>
      <description>


&lt;div id=&#34;review&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;A quick review before we get into more complicated exercises:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Load in your data
penguins &amp;lt;- read.csv(&amp;quot;penguins.csv&amp;quot;)

#Look at the column names and types of your data using str()
str(penguins)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    344 obs. of  8 variables:
##  $ species          : chr  &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; ...
##  $ island           : chr  &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; ...
##  $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...
##  $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...
##  $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...
##  $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...
##  $ sex              : chr  &amp;quot;male&amp;quot; &amp;quot;female&amp;quot; &amp;quot;female&amp;quot; NA ...
##  $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a scatter plot of *body mass* and *bill depth*
ggplot(penguins, aes(x = body_mass_g, y = bill_depth_mm)) + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a density plot of body mass with a fill color changing by sex and a transparency of 0.4
ggplot(penguins, aes(x = body_mass_g, fill = sex)) + geom_density(alpha = 0.4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-2-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Name the density plot above using ggtitle()
ggplot(penguins, aes(x = body_mass_g, fill = sex)) + geom_density(alpha = 0.4) + ggtitle(&amp;quot;Body Mass by Sex&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-2-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;practice-exercise&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice Exercise&lt;/h3&gt;
&lt;p&gt;With a partner, let’s make a scatter plot and two density plots of two numeric variables; make one scatter plot looking at the correlation between the two, and then a density plot for each variable that you choose. Color based on a categorical variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use head() or str() to find the variables that are numeric
str(penguins)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    344 obs. of  8 variables:
##  $ species          : chr  &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; ...
##  $ island           : chr  &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; ...
##  $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...
##  $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...
##  $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...
##  $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...
##  $ sex              : chr  &amp;quot;male&amp;quot; &amp;quot;female&amp;quot; &amp;quot;female&amp;quot; NA ...
##  $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of the two variables using geom_point()
# Add a color to separate the categorical variable
penguins %&amp;gt;%
  ggplot(., aes(x = bill_length_mm, y = body_mass_g, color = island)) +
  geom_point() +
# Add axis labels and a title to your plot
  xlab(&amp;quot;Bill Length (mm)&amp;quot;) +
  ylab(&amp;quot;Body Mass (g)&amp;quot;) +
  ggtitle(&amp;quot;Does a heavier penguin have a longer bill?&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a density plot using geom_density()
penguins %&amp;gt;%
  ggplot(., aes(x = bill_length_mm, color = island)) +
  geom_density() +
# Add axis labels and a title to your plot using ggtitle(), xlab(), and ylab()
  xlab(&amp;quot;Bill Legnth (mm)&amp;quot;) +
  ylab(&amp;quot;Density&amp;quot;) +
  ggtitle(&amp;quot;Density distribution&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-3-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Share with the class which variables you chose and what your plots looked like&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;using-dplyr-to-pipe-into-plotting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using Dplyr to pipe into plotting&lt;/h2&gt;
&lt;p&gt;So far we’ve included into ggplot() the arguments for data and columns, but we can also use dplyr to pipe. In dplyr, the argument being used is often referred to as ‘.’, so using this can allow you to substitute based on your other pipeline arguments.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  ggplot(data = .,aes(x = body_mass_g, color = species)) +
  geom_density(size = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  filter(species == &amp;quot;Adelie&amp;quot;) %&amp;gt;%
  ggplot(data = .,aes(x = body_mass_g, color = species)) +
  geom_density(size = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 1 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;omitting-nas&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Omitting NAs&lt;/h3&gt;
&lt;p&gt;We can also use the dplyr function na.omit() to remove the NAs in our dataset before plotting.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Original graph
penguins %&amp;gt;% 
  ggplot(., aes(x = body_mass_g, fill = sex)) + 
  geom_density(alpha = 0.4) + 
  ggtitle(&amp;quot;Body Mass by Sex&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#New graph
penguins %&amp;gt;% 
  na.omit() %&amp;gt;% 
  ggplot(., aes(body_mass_g, fill = sex)) + 
  geom_density(alpha = 0.4) + 
  ggtitle(&amp;quot;Body Mass by Sex&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;practice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using piping, filter to only the female Adelie penguins and plot their bill length vs bill depth
#Color this plot by island
penguins %&amp;gt;%
  filter(species == &amp;quot;Adelie&amp;quot;, sex == &amp;quot;female&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = bill_length_mm, y = bill_depth_mm, color = island)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Change the size to be 3 and the transparency of your points to 0.5
penguins %&amp;gt;%
  filter(species == &amp;quot;Adelie&amp;quot;, sex == &amp;quot;female&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = bill_length_mm, y = bill_depth_mm, color = island)) +
  geom_point(size = 3, alpha = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-6-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Label your plot and include a title
penguins %&amp;gt;%
  filter(species == &amp;quot;Adelie&amp;quot;, sex == &amp;quot;female&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = bill_length_mm, y = bill_depth_mm, color = island)) +
  geom_point(size = 3, alpha = 0.5) +
  xlab(&amp;quot;Bill Length (mm)&amp;quot;) +
  ylab(&amp;quot;Bill Depth (mm)&amp;quot;) +
  ggtitle(&amp;quot;I ♥ Adelie Penguins&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-6-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar Plots&lt;/h2&gt;
&lt;p&gt;We’ve mostly looked at numeric data; but what about using categorical data on our x or y axis? Bar plots are one way to look at this, and they have multiple functions for a bar-like graph. Here we’ll go through a few&lt;/p&gt;
&lt;div id=&#34;counts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Counts&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#To count the number of individuals
penguins %&amp;gt;% ggplot(., aes(x = species)) + geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Adding in color to separate by sex
penguins %&amp;gt;% ggplot(., aes(x = species, fill = sex)) + geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-7-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Changing the position to 
penguins %&amp;gt;% na.omit() %&amp;gt;% ggplot(., aes(x = species, fill = sex)) + geom_bar(position = &amp;quot;dodge&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-7-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Values&lt;/h3&gt;
&lt;p&gt;Instead of the automatic counts that we get in geom_bar(), we can use geom_col() to produce &lt;em&gt;columns&lt;/em&gt; that represent the measure of choice. Keep in mind that bar graphs of either type will start at 0, and so the scale might not be a good representation of differences. Since it is possible to change the y axis, keep in mind that you should almost NEVER do this on a bar plot because it looks misleading and enhances the differences in disproportionate ways. Other plots are better suited.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% na.omit() %&amp;gt;% group_by(species) %&amp;gt;% summarize(mean_bill = mean(bill_length_mm)) %&amp;gt;% ggplot(., aes(x = species, y = mean_bill)) + geom_col()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% na.omit() %&amp;gt;% group_by(year, species) %&amp;gt;% summarize(mean = mean(bill_length_mm)) %&amp;gt;% ggplot(., aes(x = year, fill = species, y = mean)) + geom_col(position = &amp;quot;dodge&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;year&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-8-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;practice-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice&lt;/h3&gt;
&lt;p&gt;Try plotting the number of penguins on each island with a fill color by sex.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Use geom_bar() to plot the counts
penguins %&amp;gt;%
  na.omit() %&amp;gt;%
  ggplot(., aes(x = island, fill = sex)) +
  geom_bar(position = &amp;quot;dodge&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, plot the mean flipper length of each species, colored by sex&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the average flipper length by grouping by species and sex, then summarizing
penguins %&amp;gt;%
  group_by(species, sex) %&amp;gt;%
  na.omit() %&amp;gt;%
  summarize(mean_flipper_length = mean(flipper_length_mm)) %&amp;gt;%
#Use geom_col() to plot the average flipper length
  ggplot(., aes( x = species, y = mean_flipper_length, fill = sex)) +
  geom_col(position = &amp;quot;dodge&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;species&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;boxplots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Boxplots&lt;/h2&gt;
&lt;p&gt;We often want to plot the statistics of our graphs, and box plots are one easy way to show the quantiles without doing a ton of work on adding error bars (which have more settings to include). The function is geom_boxplot().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#The basic plot structure
penguins %&amp;gt;% ggplot(., aes(x = species, y = flipper_length_mm)) + geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_boxplot).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Can you add in color by species? What happens if you color by sex?
penguins %&amp;gt;% ggplot(., aes(x = species, y = flipper_length_mm, color = species)) + geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_boxplot).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-11-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% ggplot(., aes(x = species, y = flipper_length_mm, color = sex)) + geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_boxplot).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-11-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;practice-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice&lt;/h3&gt;
&lt;p&gt;Change the above graph to remove NAs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  na.omit() %&amp;gt;%
  ggplot(., aes(x = species, y = flipper_length_mm, color = sex)) + geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Plot the bill length instead of the flipper length.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  na.omit() %&amp;gt;%
  ggplot(., aes(x = species, y = bill_length_mm, color = sex)) + geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercises-with-new-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercises with new data&lt;/h2&gt;
&lt;p&gt;Let’s load a new csv to practice our plotting. This is from Cassandra’s data, and includes chromosomes, positions, and reads.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;BSA_Reads &amp;lt;- read.csv(&amp;quot;BSA_Reads.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Look at the structure of iris to find what the options are for column names
str(BSA_Reads)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    398312 obs. of  11 variables:
##  $ X     : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ CHROM : chr  &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; ...
##  $ POS   : int  100007 100007 100007 100007 100007 100007 100007 100007 1035 1035 ...
##  $ value : int  867 590 815 160 86 189 322 43 137 99 ...
##  $ allele: chr  &amp;quot;ALT&amp;quot; &amp;quot;REF&amp;quot; &amp;quot;ALT&amp;quot; &amp;quot;REF&amp;quot; ...
##  $ bulk  : chr  &amp;quot;HIGH&amp;quot; &amp;quot;LOW&amp;quot; &amp;quot;LOW&amp;quot; &amp;quot;LOW&amp;quot; ...
##  $ parent: chr  &amp;quot;Wine&amp;quot; &amp;quot;Oak&amp;quot; &amp;quot;Wine&amp;quot; &amp;quot;Wine&amp;quot; ...
##  $ REF   : chr  &amp;quot;AT&amp;quot; &amp;quot;AT&amp;quot; &amp;quot;AT&amp;quot; &amp;quot;AT&amp;quot; ...
##  $ Wine  : chr  &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; ...
##  $ Oak   : chr  NA NA NA NA ...
##  $ Type  : chr  &amp;quot;Wine&amp;quot; &amp;quot;Wine&amp;quot; &amp;quot;Wine&amp;quot; &amp;quot;Wine&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#What is the distribution of values? Use geom_density()
BSA_Reads %&amp;gt;%
  ggplot(., aes(x = value)) +
  geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How does the distribution differ with respect to parent? Use geom_density() but color by parent.
BSA_Reads %&amp;gt;%
  ggplot(., aes(x = value, color = parent)) +
  geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-15-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s look at the average number of reads (value) for each bulk, colored by parent&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First, group by your bulk and parent
BSA_Reads %&amp;gt;%
  group_by(bulk, parent) %&amp;gt;%
#Next, use summarize to find the mean of the value
  summarize(avg_value = mean(value)) %&amp;gt;%
#Finally, plot using geom_col() with bulk as your x axis label, y as the mean of your reads, and a fill color of the parent
  ggplot(., aes(x = bulk, y = avg_value, fill = parent)) +
  geom_col() +
  xlab(&amp;quot;Bulk&amp;quot;) +
  ylab(&amp;quot;Mean of Reads&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;bulk&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Separate your plot so that the position is dodge (so that the bars are next to each other)
BSA_Reads %&amp;gt;%
  group_by(bulk, parent) %&amp;gt;%
#Next, use summarize to find the mean of the value
  summarize(avg_value = mean(value)) %&amp;gt;%
#Finally, plot using geom_col() with bulk as your x axis label, y as the mean of your reads, and a fill color of the parent
  ggplot(., aes(x = bulk, y = avg_value, fill = parent)) +
  geom_col(position = &amp;quot;dodge&amp;quot;) +
  xlab(&amp;quot;Bulk&amp;quot;) +
  ylab(&amp;quot;Mean of Reads&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;bulk&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-16-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, let’s look at the average value per chromosome, and the number of reads per chromosome.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Use a boxplot to look at the values for each chromosome. Your x should be CHROM and y should be value.
BSA_Reads %&amp;gt;%
  ggplot(., aes(x = CHROM, y = value)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Use geom_bar() for the number of entries for each chromosome. In this case you only need x to be CHROM since geom_bar() will count for you.
BSA_Reads %&amp;gt;%
  ggplot(., aes(x = CHROM)) +
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-17-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bonus-factors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bonus: Factors&lt;/h2&gt;
&lt;p&gt;The graphs of chromosomes are out of order, partially because they’re characters which are ordered alphabetically. However, Roman numerals don’t follow alphabetical order, so we can instead turn this column into a &lt;em&gt;factor&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Factors have “levels” which determine their order. We can define this using factor(), just as we switched between numbers and characters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;BSA_Reads$CHROMf &amp;lt;- factor(BSA_Reads$CHROM, 
                             levels = c(&amp;quot;I&amp;quot;, &amp;quot;II&amp;quot;, &amp;quot;III&amp;quot;, &amp;quot;IV&amp;quot;, &amp;quot;V&amp;quot;, &amp;quot;VI&amp;quot;, &amp;quot;VII&amp;quot;, &amp;quot;VIII&amp;quot;, 
                                        &amp;quot;IX&amp;quot;, &amp;quot;X&amp;quot;, &amp;quot;XI&amp;quot;, &amp;quot;XII&amp;quot;, &amp;quot;XIII&amp;quot;, &amp;quot;XIV&amp;quot;, &amp;quot;XV&amp;quot;, &amp;quot;XVI&amp;quot;))

str(BSA_Reads)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    398312 obs. of  12 variables:
##  $ X     : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ CHROM : chr  &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; ...
##  $ POS   : int  100007 100007 100007 100007 100007 100007 100007 100007 1035 1035 ...
##  $ value : int  867 590 815 160 86 189 322 43 137 99 ...
##  $ allele: chr  &amp;quot;ALT&amp;quot; &amp;quot;REF&amp;quot; &amp;quot;ALT&amp;quot; &amp;quot;REF&amp;quot; ...
##  $ bulk  : chr  &amp;quot;HIGH&amp;quot; &amp;quot;LOW&amp;quot; &amp;quot;LOW&amp;quot; &amp;quot;LOW&amp;quot; ...
##  $ parent: chr  &amp;quot;Wine&amp;quot; &amp;quot;Oak&amp;quot; &amp;quot;Wine&amp;quot; &amp;quot;Wine&amp;quot; ...
##  $ REF   : chr  &amp;quot;AT&amp;quot; &amp;quot;AT&amp;quot; &amp;quot;AT&amp;quot; &amp;quot;AT&amp;quot; ...
##  $ Wine  : chr  &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; ...
##  $ Oak   : chr  NA NA NA NA ...
##  $ Type  : chr  &amp;quot;Wine&amp;quot; &amp;quot;Wine&amp;quot; &amp;quot;Wine&amp;quot; &amp;quot;Wine&amp;quot; ...
##  $ CHROMf: Factor w/ 16 levels &amp;quot;I&amp;quot;,&amp;quot;II&amp;quot;,&amp;quot;III&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s plot this new variable as our x-axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;BSA_Reads %&amp;gt;% ggplot(., aes(x = CHROMf)) + geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/07/ggplot2-and-dplyr/index.en_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to ggplot2</title>
      <link>https://nyusurp.github.io/2022/07/05/intro-ggplot/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/07/05/intro-ggplot/</guid>
      <description>


&lt;div id=&#34;review&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;A quick review before we get into more complicated exercises:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#We can create a data frame using the c() function

myplants &amp;lt;- data.frame(Plants = c(&amp;quot;Aloe&amp;quot;, &amp;quot;Pothos&amp;quot;, &amp;quot;Spider&amp;quot;, &amp;quot;ZZ&amp;quot;, &amp;quot;Snake&amp;quot;, 
                                &amp;quot;Aloe&amp;quot;, &amp;quot;Pothos&amp;quot;, &amp;quot;Spider&amp;quot;, &amp;quot;ZZ&amp;quot;, &amp;quot;Snake&amp;quot;),
                     Growth = c(1.2, 2.2, 3.1, 1.4, 5.7, 3.4, 1.9, 2.5, 1.2, 5.3),
                     Water = c(1,1,1,1,1,2,2,2,2,2))

#View Data using head() or str()
head(myplants)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Plants Growth Water
## 1   Aloe    1.2     1
## 2 Pothos    2.2     1
## 3 Spider    3.1     1
## 4     ZZ    1.4     1
## 5  Snake    5.7     1
## 6   Aloe    3.4     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#We can use square brackets and $ to select columns and rows of a data frame
myplants[myplants$Growth &amp;gt; 2,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Plants Growth Water
## 2  Pothos    2.2     1
## 3  Spider    3.1     1
## 5   Snake    5.7     1
## 6    Aloe    3.4     2
## 8  Spider    2.5     2
## 10  Snake    5.3     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#We can use dplyr to filter for this same Growth
myplants %&amp;gt;% filter(Growth &amp;gt; 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Plants Growth Water
## 1 Pothos    2.2     1
## 2 Spider    3.1     1
## 3  Snake    5.7     1
## 4   Aloe    3.4     2
## 5 Spider    2.5     2
## 6  Snake    5.3     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#If we wanted to count how many elements in a vector satisfy this, 
#we could sum a logical. First print the logical, then find the sum
# myplants$Growth &amp;gt; 2
sum(myplants$Growth &amp;gt; 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Using dplyr, we could use the count() function to find this same thing
myplants %&amp;gt;% count(Growth &amp;gt; 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Growth &amp;gt; 2 n
## 1      FALSE 4
## 2       TRUE 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myplants %&amp;gt;% filter(Growth &amp;gt; 2) %&amp;gt;% count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   n
## 1 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#If we wanted to make a new data frame for just the Pothos plants, 
# we could assign using the &amp;#39;&amp;lt;-&amp;#39; sign
pothos_plants &amp;lt;- myplants[myplants$Plants == &amp;quot;Pothos&amp;quot;,]

# Finally, if we wanted to use the qplot function to plot the data, we could do 
# so as follows:
qplot(Plants, Growth, data = myplants, color = Water, size = I(5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Work in pairs. Let’s answer a few questions to remind ourselves how functions, indexing, and dplyr all work:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Load in the dplyr library if you haven&amp;#39;t already
library(dplyr)

#Read in your penguins dataset
penguins = read.csv(&amp;quot;penguins.csv&amp;quot;)

#Using square brackets, make a new data frame for female Adelie penguins
adelie_f = filter(penguins, sex == &amp;quot;Female&amp;quot;, species == &amp;quot;Adelie&amp;quot;)

#Using dplyr, count how many Adelie female penguins are in each island
adelie_f %&amp;gt;% count(island)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] island n     
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Using dplyr, make another data frame for male Gentoo penguins
gentoo_m = filter(penguins, sex == &amp;quot;Male&amp;quot;, species == &amp;quot;Gentoo&amp;quot;)

#Without using dplyr, count how many Gentoo male penguins are on 
#the island Biscoe
sum(gentoo_m$island == &amp;quot;Biscoe&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ggplot2-grammar-of-graphics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ggplot2: Grammar of Graphics&lt;/h2&gt;
&lt;p&gt;This package ggplot2 provides a base plotting function (qplot) as well as the function ggplot() to take in data and many (many) geoms to specify the plot. We’ve only used qplot, or quickplot, up until this point, but as your analysis becomes more specific and you start to tell the story of your data, you’ll want to customize.&lt;/p&gt;
&lt;div id=&#34;scatter-plots-using-geom_point&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scatter Plots using geom_point()&lt;/h3&gt;
&lt;p&gt;Let’s start with a scatter plot, since this is the default for qplot() with two axes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm)) + 
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(
  data = penguins,
  aes(x = bill_length_mm, y = flipper_length_mm, color = species)
) + 
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;practice&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Practice&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Try plotting the flipper length and body mass using geom_point(), 
# and then coloring points by sex
penguins %&amp;gt;%
  ggplot(data = ., aes(x = flipper_length_mm, y = body_mass_g, color = sex)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are several other options for a ggplot that can be added in using ‘+’. These include ggtitle, xlim and ylim, labels, and themes. Below we’ll add a title and change the x and y axis labels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#First, we can look up one of the functions within ggplot2 called ggtitle, 
#which will have our labeling functions. Because these are each their own 
#function, we won&amp;#39;t get the information from the help menu of ggplot() on its 
#own, but this is where Googling the usage would be beneficial.

?ggtitle&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Next let&amp;#39;s add these labels to our plot. Notice that each line ends in a &amp;#39;+&amp;#39;

ggplot(
  data = penguins,
  aes(x = bill_length_mm, y = flipper_length_mm, color = species)
) + 
  geom_point() +
  ggtitle(&amp;quot;Penguin Bill vs Flipper Length&amp;quot;) +
  xlab(&amp;quot;Bill Length (mm)&amp;quot;) +
  ylab(&amp;quot;Flipper Length (mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;changing-alpha-and-size&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Changing alpha and size&lt;/h3&gt;
&lt;p&gt;Notice that the aes() argument gives us the columns that we’re using in our plot, and that we don’t have anything yet inside the function of geom_point(). Let’s look at the documentation for geom_point() to see our options.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#How do we find the help menu?
help(geom_point)
#Scroll down to the &amp;quot;Aesthetics&amp;quot; section; what do you find?

#Scroll down to the &amp;quot;Examples&amp;quot; section - how would you set your aesthetics to a fixed value?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we don’t specify a column for the aesthetics within geom_point(), we can set them to a fixed value. This will help us change the shape, size, color, and alpha of our plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Changing the size to larger
ggplot(
  data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species)
) + 
  geom_point(size = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Changing the transparency (alpha) to lighter
ggplot(
  data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species)
) + 
  geom_point(alpha = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-9-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can combine both of these values to make larger more transparent points on our plot by separating arguments with a comma. We can also change the shape.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(
  data = penguins,
  aes(x = bill_length_mm, y = flipper_length_mm, color = species)
) + 
  geom_point(size = 4, alpha = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we wanted all of the points to be the same color, not based on a variable, we would put this argument in the geom_point() function rather than inside aes().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(
  data = penguins,
  aes(x = bill_length_mm, y = flipper_length_mm)
) + 
  geom_point(size = 4, alpha = 0.5, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we wanted to change the shape of our points by our species column, how would we do this?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# CHANGE THE FOLLOWING CODE to make **shape** rather than **color** vary by species.

ggplot(
  data = penguins,
  aes(x = bill_length_mm, y = flipper_length_mm, color = species)
) + 
  geom_point(size = 4,alpha = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;density-plots-using-geom_density&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Density Plots using geom_density()&lt;/h3&gt;
&lt;p&gt;Let’s say that instead of a scatter plot, you wanted to know the distributions of your numeric data. In this case, you could use the geom_density() function to plot this, but your arguments would be different since the default for your y axis will be density.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#First define your data, then aesthetics (aes), 
# and finally add on your geom at the end
ggplot(data = penguins, aes(x = flipper_length_mm, color = species)) + geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;practice-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Practice&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#On your own, add the title and x and y labels to your density plot.
ggplot(data = penguins, aes(x = flipper_length_mm, color = species)) + 
  geom_density() +
  labs(title = &amp;quot;Numeric data&amp;quot;, x = &amp;quot;Flipper Length (mm)&amp;quot;, y = &amp;quot;Density&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Next, see what the &amp;quot;size&amp;quot; function does if you add that to geom_density().
# Set the size to 2.
ggplot(data = penguins, aes(x = flipper_length_mm, color = species)) + 
  geom_density(size = 2) +
  labs(title = &amp;quot;Numeric data&amp;quot;, x = &amp;quot;Flipper Length (mm)&amp;quot;, y = &amp;quot;Density&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-14-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s instead use “fill” instead of “color” for our density plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Notice that the argument after x is fill, rather than color
# (which we&amp;#39;ve used before)

ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, let’s add transparency. What would we change about the following code to do this?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Once again, we can change the transparency of our plot

ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;practice-exercise&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice Exercise&lt;/h3&gt;
&lt;p&gt;With a partner, let’s make a scatter plot and two density plots of two numeric variables; make one scatter plot looking at the correlation between the two, and then a density plot for each variable that you choose. Color based on a categorical variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Use head() or str() to find the variables that are numeric
str(penguins)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    344 obs. of  8 variables:
##  $ species          : chr  &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; ...
##  $ island           : chr  &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; ...
##  $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...
##  $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...
##  $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...
##  $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...
##  $ sex              : chr  &amp;quot;male&amp;quot; &amp;quot;female&amp;quot; &amp;quot;female&amp;quot; NA ...
##  $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a scatter plot of the two variables using geom_point()
penguins %&amp;gt;%
  ggplot(data = ., aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Add a color to separate the categorical variable
penguins %&amp;gt;%
  ggplot(data = ., aes(
    x = bill_length_mm, y = bill_depth_mm, color = island
  )) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-17-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Add axis labels and a title to your plot
penguins %&amp;gt;%
  ggplot(data = ., aes(
    x = bill_length_mm, y = bill_depth_mm, color = island
  )) +
  geom_point() +
  labs(
    title = &amp;quot;Bill metric correlation&amp;quot;,
    x = &amp;quot;Bill Length (mm)&amp;quot;,
    y = &amp;quot;Bill depth (mm)&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-17-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a density plot using geom_density()
penguins %&amp;gt;%
  ggplot(data = ., aes(
    x = bill_length_mm,
  )) +
  geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-17-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  ggplot(data = ., aes(
    x = bill_depth_mm
  )) +
  geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-17-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Add axis labels and a title to your plot
penguins %&amp;gt;%
  ggplot(data = ., aes(
    x = bill_length_mm,
  )) +
  geom_density() + 
  labs(main = &amp;quot;My ggplot (don&amp;#39;t name it like this)&amp;quot;, x = &amp;quot;Bill Lenth (mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_density).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/07/05/intro-ggplot/index.en_files/figure-html/unnamed-chunk-17-6.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Share with the class which variables you chose and what your plots looked like&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Functions and Data Types</title>
      <link>https://nyusurp.github.io/2022/06/30/functions-and-data-types/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/30/functions-and-data-types/</guid>
      <description>


&lt;div id=&#34;outline&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Outline&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Review: Write yourself some functions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Types: How they matter and how to avoid being bitten by them&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;function-practice-normalizing-rna-sequencing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Function practice: Normalizing RNA-Sequencing&lt;/h2&gt;
&lt;p&gt;We will be using part of the data from &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/27568519/&#34;&gt;a study on spinal motor neurons&lt;/a&gt;. You can find their full
analysis scripts &lt;a href=&#34;https://github.com/dasenlab/Pbx-Neuron-Paper&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use read.delim instead of read.csv for **tab**-delimited files
rawcount = read.delim(&amp;quot;BR-A-Control_counts.txt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is in the raw data?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Inspect the data you load!&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;normalize_by_depth&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;normalize_by_depth()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;How do we define a function that normalize a vector of counts by total counts?&lt;/p&gt;
&lt;p&gt;Before you start writing. Let’s start humble and get a small proportion of the
data so you can capture errors right away when you test your function.&lt;/p&gt;
&lt;p&gt;The key of doing this is to have something that you can tell whether your code
is doing something you want right away with test data structurally similar to the
real data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Take a small fraction of the data so we can test our function
test_count = head(rawcount)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we are good to go. Let’s get the total count first!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# What is our input?
normalize_by_depth = function(input) {
  # How do we compute total count?
  
  # Let&amp;#39;s divide everything by the total count calculated above
  
  # Provide an output
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s test the function with our naked eyes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Is the function doing what we expect it to do?
normalize_by_depth(test_count) == 1472 + 6 + 109 + 43&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## logical(0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything goes as expected, let’s divide everything by total count in the
function, too.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# What is our input?
normalize_by_depth = function(input) {
  # How do we compute total count?
  depth = sum(input$count)
  # Let&amp;#39;s divide everything by the total count calculated above
  
  # Provide an output
  # **Note that you would want to change your output!**
  return(depth)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s test the revised function. What are we expecting here?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We are expecting the first gene to be ~0.903 after normalization
# while the second gene is 0.
# Let&amp;#39;s run the function on the test set and let the results print out.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s multiply the result by &lt;span class=&#34;math inline&#34;&gt;\(10^{6}\)&lt;/span&gt; (10^6) before returning it in our
function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# What is our input?
normalize_by_depth = function(input) {
  # How do we compute total count?
  depth = sum(input$count)
  
  # Let&amp;#39;s divide everything by the total count calculated above
  normalized_count = input$count/depth
  input$normalized_count = normalized_count
  
  # Provide an output
  return(input)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And test it again.&lt;/p&gt;
&lt;p&gt;Note that for the first gene, we used to getting 0.9030675 before multiplying with
&lt;span class=&#34;math inline&#34;&gt;\(10^{6}\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;normalize_by_depth(test_count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   id count normalized_count
## 1 ENSMUSG00000000001  1472      0.903067485
## 2 ENSMUSG00000000003     0      0.000000000
## 3 ENSMUSG00000000028     6      0.003680982
## 4 ENSMUSG00000000031   109      0.066871166
## 5 ENSMUSG00000000037    43      0.026380368
## 6 ENSMUSG00000000049     0      0.000000000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get_tx_length&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;get_tx_length()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A gene model file contains the starting and ending coordinates of genes,
transcripts, and exons.&lt;/p&gt;
&lt;p&gt;You can get a gene model file from &lt;a href=&#34;http://useast.ensembl.org/info/data/ftp/index.html/&#34;&gt;Ensembl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They are often stored as GTF/GFF3 files, but the format is beyond the scope
of what we are going to do today. If you are interested, you can find
&lt;a href=&#34;https://useast.ensembl.org/info/website/upload/gff.html&#34;&gt;more information about GTF/GFF format here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load gene model file (pre-processed)
gene_model = read.csv(&amp;quot;mouse_gene_model.csv&amp;quot;)
head(gene_model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   id     start       end
## 1 ENSMUSG00000102628 150956201 150958296
## 2 ENSMUSG00000100595 150983666 150984611
## 3 ENSMUSG00000097426 151012258 151012971
## 4 ENSMUSG00000097426 151013347 151013531
## 5 ENSMUSG00000104478 108344807 108347562
## 6 ENSMUSG00000104385   6980784   6981446&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How do we define a function that get us lengths for each gene?&lt;/p&gt;
&lt;p&gt;–&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How do we compute the length of each exons?
gene_model %&amp;gt;%
  head() %&amp;gt;%
  mutate(length = (end - start + 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   id     start       end length
## 1 ENSMUSG00000102628 150956201 150958296   2096
## 2 ENSMUSG00000100595 150983666 150984611    946
## 3 ENSMUSG00000097426 151012258 151012971    714
## 4 ENSMUSG00000097426 151013347 151013531    185
## 5 ENSMUSG00000104478 108344807 108347562   2756
## 6 ENSMUSG00000104385   6980784   6981446    663&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s test if the length column is correctly calculated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# For the first gene
150958296 - 150956201   + 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2096&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it seems right, let’s get the sum of lengths per id now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_tx_length = function(input) {
  # How do we compute the sum of all exons of a gene?
  tx_length = input %&amp;gt;%
    mutate(length = (end - start + 1))
  # Group
  
  # Summarize by summation
  
  # Provide an output
  return(tx_length)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What does the output look like?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gene_model %&amp;gt;%
  head() %&amp;gt;%
  get_tx_length()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   id     start       end length
## 1 ENSMUSG00000102628 150956201 150958296   2096
## 2 ENSMUSG00000100595 150983666 150984611    946
## 3 ENSMUSG00000097426 151012258 151012971    714
## 4 ENSMUSG00000097426 151013347 151013531    185
## 5 ENSMUSG00000104478 108344807 108347562   2756
## 6 ENSMUSG00000104385   6980784   6981446    663&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How do you independently test if the answer is correct for ENSMUSG00000097426?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Doing it differently with base R
gene_of_interest = gene_model[gene_model$id == &amp;quot;ENSMUSG00000097426&amp;quot;, ]
print(gene_of_interest)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   id     start       end
## 3 ENSMUSG00000097426 151012258 151012971
## 4 ENSMUSG00000097426 151013347 151013531&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gene_of_interest$length = gene_of_interest$end - gene_of_interest$start + 1
print(gene_of_interest)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   id     start       end length
## 3 ENSMUSG00000097426 151012258 151012971    714
## 4 ENSMUSG00000097426 151013347 151013531    185&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(gene_of_interest$length)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 899&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-merge-data-with-a-shared-column&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;How to merge data with a shared column?&lt;/h3&gt;
&lt;p&gt;If we check our small count table:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(rawcount)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   id count
## 1 ENSMUSG00000000001  1472
## 2 ENSMUSG00000000003     0
## 3 ENSMUSG00000000028     6
## 4 ENSMUSG00000000031   109
## 5 ENSMUSG00000000037    43
## 6 ENSMUSG00000000049     0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the first few rows of our gene length table:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gene_model %&amp;gt;%
  head() %&amp;gt;%
  get_tx_length()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   id     start       end length
## 1 ENSMUSG00000102628 150956201 150958296   2096
## 2 ENSMUSG00000100595 150983666 150984611    946
## 3 ENSMUSG00000097426 151012258 151012971    714
## 4 ENSMUSG00000097426 151013347 151013531    185
## 5 ENSMUSG00000104478 108344807 108347562   2756
## 6 ENSMUSG00000104385   6980784   6981446    663&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll see that we are almost done except that the row order are not exactly
the same.&lt;/p&gt;
&lt;p&gt;This can be taken care of by &lt;code&gt;left_join(x, y, by = column)&lt;/code&gt;, which is a &lt;code&gt;dplyr&lt;/code&gt;
function that **merge two data.frames (&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;) by a shared column.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;left_&lt;/code&gt; means that it keeps all the rows in &lt;code&gt;x&lt;/code&gt; even if &lt;code&gt;y&lt;/code&gt; does not have it.)&lt;/p&gt;
&lt;p&gt;Let’s see how it works. First, I’ll make a small table of gene length for
testing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_gene_model = gene_model %&amp;gt;%
  # Only keep rows that are present in test_count
  filter(id %in% test_count$id)

# Compute gene length with our custom function
test_gene_length = test_gene_model %&amp;gt;% 
    get_tx_length()

print(test_gene_length)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    id     start       end length
## 1  ENSMUSG00000000037 159945768 159946244    477
## 2  ENSMUSG00000000037 159954486 159954531     46
## 3  ENSMUSG00000000037 159960243 159960313     71
## 4  ENSMUSG00000000037 159961033 159961267    235
## 5  ENSMUSG00000000037 159970260 159970348     89
## 6  ENSMUSG00000000037 159975200 159975443    244
## 7  ENSMUSG00000000037 159985010 159985093     84
## 8  ENSMUSG00000000037 159992191 159992265     75
## 9  ENSMUSG00000000037 159992605 159992679     75
## 10 ENSMUSG00000000037 159996237 159996320     84
## 11 ENSMUSG00000000037 159998176 159998259     84
## 12 ENSMUSG00000000037 160004662 160004745     84
## 13 ENSMUSG00000000037 160006153 160006236     84
## 14 ENSMUSG00000000037 160007457 160007540     84
## 15 ENSMUSG00000000037 160008873 160008956     84
## 16 ENSMUSG00000000037 160010369 160010452     84
## 17 ENSMUSG00000000037 160011673 160011756     84
## 18 ENSMUSG00000000037 160013087 160013170     84
## 19 ENSMUSG00000000037 160014396 160014479     84
## 20 ENSMUSG00000000037 160017609 160017692     84
## 21 ENSMUSG00000000037 160020476 160020753    278
## 22 ENSMUSG00000000037 160022746 160022860    115
## 23 ENSMUSG00000000037 160024984 160025187    204
## 24 ENSMUSG00000000037 160026362 160026544    183
## 25 ENSMUSG00000000037 160029253 160029363    111
## 26 ENSMUSG00000000037 160039562 160041192   1631
## 27 ENSMUSG00000000003  76897015  76897229    215
## 28 ENSMUSG00000000003  76891581  76891720    140
## 29 ENSMUSG00000000003  76888625  76888692     68
## 30 ENSMUSG00000000003  76886503  76886613    111
## 31 ENSMUSG00000000003  76886121  76886222    102
## 32 ENSMUSG00000000003  76885466  76885517     52
## 33 ENSMUSG00000000003  76881507  76881720    214
## 34 ENSMUSG00000000001 108053204 108053462    259
## 35 ENSMUSG00000000001 108031111 108031153     43
## 36 ENSMUSG00000000001 108030858 108030999    142
## 37 ENSMUSG00000000001 108025617 108025774    158
## 38 ENSMUSG00000000001 108023079 108023207    129
## 39 ENSMUSG00000000001 108019789 108019918    130
## 40 ENSMUSG00000000001 108019251 108019404    154
## 41 ENSMUSG00000000001 108016719 108016928    210
## 42 ENSMUSG00000000001 108014596 108016632   2037
## 43 ENSMUSG00000000031 142130566 142130647     82
## 44 ENSMUSG00000000031 142130350 142130484    135
## 45 ENSMUSG00000000031 142129268 142130267   1000
## 46 ENSMUSG00000000049 108286119 108286233    115
## 47 ENSMUSG00000000049 108286642 108286818    177
## 48 ENSMUSG00000000049 108288125 108288221     97
## 49 ENSMUSG00000000049 108295637 108295713     77
## 50 ENSMUSG00000000049 108298117 108298305    189
## 51 ENSMUSG00000000049 108299957 108300136    180
## 52 ENSMUSG00000000049 108302821 108303018    198
## 53 ENSMUSG00000000049 108305066 108305222    157
## 54 ENSMUSG00000000028  18630554  18630722    169
## 55 ENSMUSG00000000028  18630265  18630459    195
## 56 ENSMUSG00000000028  18630055  18630114     60
## 57 ENSMUSG00000000028  18629139  18629231     93
## 58 ENSMUSG00000000028  18627482  18627619    138
## 59 ENSMUSG00000000028  18626030  18626173    144
## 60 ENSMUSG00000000028  18624132  18624187     56
## 61 ENSMUSG00000000028  18620551  18620599     49
## 62 ENSMUSG00000000028  18617426  18617487     62
## 63 ENSMUSG00000000028  18616099  18616149     51
## 64 ENSMUSG00000000028  18614575  18614694    120
## 65 ENSMUSG00000000028  18613845  18613976    132
## 66 ENSMUSG00000000028  18613512  18613610     99
## 67 ENSMUSG00000000028  18611928  18612089    162
## 68 ENSMUSG00000000028  18605680  18605818    139
## 69 ENSMUSG00000000028  18605519  18605602     84
## 70 ENSMUSG00000000028  18603823  18603941    119
## 71 ENSMUSG00000000028  18603556  18603632     77
## 72 ENSMUSG00000000028  18600646  18600712     67
## 73 ENSMUSG00000000028  18599197  18599323    127&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And… boom!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;left_join(x = test_count, y = test_gene_length, by = &amp;quot;id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    id count     start       end length
## 1  ENSMUSG00000000001  1472 108053204 108053462    259
## 2  ENSMUSG00000000001  1472 108031111 108031153     43
## 3  ENSMUSG00000000001  1472 108030858 108030999    142
## 4  ENSMUSG00000000001  1472 108025617 108025774    158
## 5  ENSMUSG00000000001  1472 108023079 108023207    129
## 6  ENSMUSG00000000001  1472 108019789 108019918    130
## 7  ENSMUSG00000000001  1472 108019251 108019404    154
## 8  ENSMUSG00000000001  1472 108016719 108016928    210
## 9  ENSMUSG00000000001  1472 108014596 108016632   2037
## 10 ENSMUSG00000000003     0  76897015  76897229    215
## 11 ENSMUSG00000000003     0  76891581  76891720    140
## 12 ENSMUSG00000000003     0  76888625  76888692     68
## 13 ENSMUSG00000000003     0  76886503  76886613    111
## 14 ENSMUSG00000000003     0  76886121  76886222    102
## 15 ENSMUSG00000000003     0  76885466  76885517     52
## 16 ENSMUSG00000000003     0  76881507  76881720    214
## 17 ENSMUSG00000000028     6  18630554  18630722    169
## 18 ENSMUSG00000000028     6  18630265  18630459    195
## 19 ENSMUSG00000000028     6  18630055  18630114     60
## 20 ENSMUSG00000000028     6  18629139  18629231     93
## 21 ENSMUSG00000000028     6  18627482  18627619    138
## 22 ENSMUSG00000000028     6  18626030  18626173    144
## 23 ENSMUSG00000000028     6  18624132  18624187     56
## 24 ENSMUSG00000000028     6  18620551  18620599     49
## 25 ENSMUSG00000000028     6  18617426  18617487     62
## 26 ENSMUSG00000000028     6  18616099  18616149     51
## 27 ENSMUSG00000000028     6  18614575  18614694    120
## 28 ENSMUSG00000000028     6  18613845  18613976    132
## 29 ENSMUSG00000000028     6  18613512  18613610     99
## 30 ENSMUSG00000000028     6  18611928  18612089    162
## 31 ENSMUSG00000000028     6  18605680  18605818    139
## 32 ENSMUSG00000000028     6  18605519  18605602     84
## 33 ENSMUSG00000000028     6  18603823  18603941    119
## 34 ENSMUSG00000000028     6  18603556  18603632     77
## 35 ENSMUSG00000000028     6  18600646  18600712     67
## 36 ENSMUSG00000000028     6  18599197  18599323    127
## 37 ENSMUSG00000000031   109 142130566 142130647     82
## 38 ENSMUSG00000000031   109 142130350 142130484    135
## 39 ENSMUSG00000000031   109 142129268 142130267   1000
## 40 ENSMUSG00000000037    43 159945768 159946244    477
## 41 ENSMUSG00000000037    43 159954486 159954531     46
## 42 ENSMUSG00000000037    43 159960243 159960313     71
## 43 ENSMUSG00000000037    43 159961033 159961267    235
## 44 ENSMUSG00000000037    43 159970260 159970348     89
## 45 ENSMUSG00000000037    43 159975200 159975443    244
## 46 ENSMUSG00000000037    43 159985010 159985093     84
## 47 ENSMUSG00000000037    43 159992191 159992265     75
## 48 ENSMUSG00000000037    43 159992605 159992679     75
## 49 ENSMUSG00000000037    43 159996237 159996320     84
## 50 ENSMUSG00000000037    43 159998176 159998259     84
## 51 ENSMUSG00000000037    43 160004662 160004745     84
## 52 ENSMUSG00000000037    43 160006153 160006236     84
## 53 ENSMUSG00000000037    43 160007457 160007540     84
## 54 ENSMUSG00000000037    43 160008873 160008956     84
## 55 ENSMUSG00000000037    43 160010369 160010452     84
## 56 ENSMUSG00000000037    43 160011673 160011756     84
## 57 ENSMUSG00000000037    43 160013087 160013170     84
## 58 ENSMUSG00000000037    43 160014396 160014479     84
## 59 ENSMUSG00000000037    43 160017609 160017692     84
## 60 ENSMUSG00000000037    43 160020476 160020753    278
## 61 ENSMUSG00000000037    43 160022746 160022860    115
## 62 ENSMUSG00000000037    43 160024984 160025187    204
## 63 ENSMUSG00000000037    43 160026362 160026544    183
## 64 ENSMUSG00000000037    43 160029253 160029363    111
## 65 ENSMUSG00000000037    43 160039562 160041192   1631
## 66 ENSMUSG00000000049     0 108286119 108286233    115
## 67 ENSMUSG00000000049     0 108286642 108286818    177
## 68 ENSMUSG00000000049     0 108288125 108288221     97
## 69 ENSMUSG00000000049     0 108295637 108295713     77
## 70 ENSMUSG00000000049     0 108298117 108298305    189
## 71 ENSMUSG00000000049     0 108299957 108300136    180
## 72 ENSMUSG00000000049     0 108302821 108303018    198
## 73 ENSMUSG00000000049     0 108305066 108305222    157&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works regardless of how the rows are ordered. You can try messing up
the rows and see how if it makes a difference.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Mess up the rows and do left_join() again.
# Say we have test_count[c(1, 3, 5, 2, 4, 6), ] and
# test_gene_model[c(6, 5, 4, 3, 2, 1), ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;one-function-to-do-it-all&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;One function to do it all&lt;/h3&gt;
&lt;p&gt;You must have noticed that functions are like Russian dolls: There are always
functions inside a function.&lt;/p&gt;
&lt;p&gt;Now that we have &lt;code&gt;normalize_by_depth&lt;/code&gt; to generate CPM, &lt;code&gt;get_tx_length&lt;/code&gt; to
calculate gene length, and we know that &lt;code&gt;left_join&lt;/code&gt; can merge them by ID, we
can write a master function to streamline everything.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;normalize_rnaseq = function(count, gene_model){
  # 1. Normalize read counts by sequencing depth = total reads we got from a sample.
  # (This gives CPM)

  # 2. Normalize again with transcript length.
  # (CPM/Gene length = Transcript per million (TPM))
  
  # 3. Make a master table containing both CPM and length per gene

  return(normalized_count)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s test it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;normalize_rnaseq(test_count, test_gene_model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in normalize_rnaseq(test_count, test_gene_model): could not find function &amp;quot;normalize_rnaseq&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All your hard work pays now – you can normalize the whole thing with ease!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Normalize the full table with full gene model&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;common-pitfalls-on-data-types&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Common pitfalls on data types&lt;/h2&gt;
&lt;div id=&#34;characters-are-friendly-most-of-the-time-but&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;character&lt;/code&gt;s are friendly most of the time, but…&lt;/h3&gt;
&lt;div id=&#34;hidden-character&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Hidden character&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# There&amp;#39;s a L0 masquerading as 10 in your csv!
fake_num = c(&amp;quot;1&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;l0&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(fake_num)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.numeric(fake_num)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: NAs introduced by coercion&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  3  5  7  9 NA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;alphabetical-and-numerical-sorting&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Alphabetical and numerical sorting&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;chr_vec = c(&amp;quot;5&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;10&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;9&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You might not expect it to sort like this
sort(chr_vec)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;10&amp;quot; &amp;quot;5&amp;quot;  &amp;quot;6&amp;quot;  &amp;quot;7&amp;quot;  &amp;quot;8&amp;quot;  &amp;quot;9&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If they are numbers, they sort differently
sort(as.numeric(chr_vec))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;numeric-type-precision-can-be-dangerous&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Numeric type: Precision can be dangerous…&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;0.1 + 0.2 == 0.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s a website called &lt;a href=&#34;https://0.30000000000000004.com/&#34;&gt;https://0.30000000000000004.com/&lt;/a&gt;
that explains this in detail.&lt;/p&gt;
&lt;p&gt;But briefly, any number that is not an integer has limited precision, and
&lt;a href=&#34;https://en.wikipedia.org/wiki/Propagation_of_uncertainty&#34;&gt;propagation of error&lt;/a&gt; is a thing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A more robust way to compare non-integers
# Define an error margin that you want to tolerate
error_margin = 10^-8

# and then decide if the difference is within the margin
(0.1 + 0.2) - 0.3 &amp;lt; error_margin&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;factor-ordered-categories&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Factor: Ordered categories&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Categories as characters works most of the time, but...
month_tbl = data.frame(
  month = c(
    &amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;,
    &amp;quot;July&amp;quot;, &amp;quot;August&amp;quot;, &amp;quot;September&amp;quot;, &amp;quot;October&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;December&amp;quot;
  ),
  length = c(
    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  )
)
str(month_tbl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    12 obs. of  2 variables:
##  $ month : chr  &amp;quot;January&amp;quot; &amp;quot;February&amp;quot; &amp;quot;March&amp;quot; &amp;quot;April&amp;quot; ...
##  $ length: num  31 28 31 30 31 30 31 31 30 31 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most functions that you encounter in R will sort alphabetically for characters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
month_tbl %&amp;gt;%
  qplot(data = ., x = month, y = length, geom = &amp;quot;point&amp;quot;) +
  # This adjust the axis text to make the text more visible
  theme(axis.text.x = element_text(size = 20, angle = 60, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/30/functions-and-data-types/index.en_files/figure-html/unnamed-chunk-34-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You won’t be able to decide the order unless you convert it to a factor.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;month_tbl$month = factor(
  month_tbl$month,
  # R will respect the levels you set here
  levels = c(
    &amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;,
    &amp;quot;July&amp;quot;, &amp;quot;August&amp;quot;, &amp;quot;September&amp;quot;, &amp;quot;October&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;December&amp;quot;
  )
)

month_tbl %&amp;gt;%
  qplot(data = ., x = month, y = length, geom = &amp;quot;point&amp;quot;) +
  # This adjust the axis text to make the text more visible
  theme(axis.text.x = element_text(size = 20, angle = 60, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/30/functions-and-data-types/index.en_files/figure-html/unnamed-chunk-35-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Factors are more complicated than characters and numbers, so they could be
harder to troubleshoot, but at the same time, they are very powerful especially
in statistics.&lt;/p&gt;
&lt;p&gt;As a rule of thumb, when you inspect your data (e.g., with &lt;code&gt;str()&lt;/code&gt;), always ask
yourself if you are having categorical variables.&lt;/p&gt;
&lt;p&gt;If you do, consider converting them to factors if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You know they are ordinal&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you are building statistical models with categorical variables
(ANOVA et al.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;date-and-time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Date and time&lt;/h3&gt;
&lt;p&gt;They have a similar issue as ordinal categories: If considered as characters,
they won’t be ordered chronologically.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This shouldn&amp;#39;t be surprising by now
random_dates = c(&amp;quot;12-25-2022&amp;quot;, &amp;quot;07-04-1989&amp;quot;, &amp;quot;01-01-2077&amp;quot;)
sort(random_dates)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;01-01-2077&amp;quot; &amp;quot;07-04-1989&amp;quot; &amp;quot;12-25-2022&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unlike most categorical variables, there are usually so many dates, so it is
not practical for you to assign orders manually.&lt;/p&gt;
&lt;p&gt;Luckily, there is a package that will take care of this for you if you tell it
the format of your dates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You can tell R how the date is represented to chronologically sort
library(lubridate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;lubridate&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     date, intersect, setdiff, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# mdy() stands for month, day, year
good_dates = mdy(random_dates)
sort(good_dates)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1989-07-04&amp;quot; &amp;quot;2022-12-25&amp;quot; &amp;quot;2077-01-01&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Functions</title>
      <link>https://nyusurp.github.io/2022/06/28/understanding-functions/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/28/understanding-functions/</guid>
      <description>


&lt;div id=&#34;review&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;Let’s create our data frames again by running the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame &amp;lt;- data.frame(Random = c(4, 20, 10, 21, 63, 3, 14, 60, 9, 6),
                           Index = 1:10,
                           Categories = c(&amp;quot;Month&amp;quot;, &amp;quot;Day&amp;quot;, &amp;quot;Month&amp;quot;, &amp;quot;Day&amp;quot;, &amp;quot;Year&amp;quot;, 
                                          &amp;quot;Month&amp;quot;, &amp;quot;Day&amp;quot;, &amp;quot;Year&amp;quot;, &amp;quot;Month&amp;quot;, &amp;quot;Day&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;examples-for-plotting-subsetted-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples for plotting subsetted values&lt;/h3&gt;
&lt;p&gt;If you wanted to plot only specific values, you could use these same booleans inside the functions to plot. This is going to be the basis of how we separate out values in our plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot our data frame here
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = Random, y = Index, data = NewDataFrame)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-2-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can change the size of our points by adding in the &amp;#39;size&amp;#39; argument
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-2-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Finally, we can add in coloring by a boolean logical
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$Index &amp;gt; 5, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-2-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$Categories, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-2-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Exploring R&lt;/h3&gt;
&lt;p&gt;As a reminder, we can find out more about the functions we use with the help menu, found using help() or just simply a ‘?’ in front of the function (without spaces).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;help(qplot)
?qplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a reminder, there’s an option for &lt;em&gt;geom&lt;/em&gt;. This is the type of plot that will be made, and the default is a scatter plot (so geom = “point”). You can find this in the defaults for geom.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a scatter plot
qplot(x = Index, y = Random, data = NewDataFrame,
      geom = &amp;quot;point&amp;quot;,
      xlim = c(0,25), ylim = c(0,100),
      main = &amp;quot;Rainfall Distribution&amp;quot;,
      xlab = &amp;quot;Month&amp;quot;,
      ylab = &amp;quot;Rainfall (in)&amp;quot;,
      color = Random &amp;gt; 5, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a box plot with scatter (called jitter)
qplot(x = Random, y = Categories, data = NewDataFrame,
      geom = c(&amp;quot;boxplot&amp;quot;, &amp;quot;jitter&amp;quot;),
      main = &amp;quot;Boxplot of Random Numbers&amp;quot;,
      color = Index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;practice-from-last-time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice from last time:&lt;/h3&gt;
&lt;p&gt;Load in the dataset penguins.csv, and plot the &lt;em&gt;bill length&lt;/em&gt; vs &lt;em&gt;body mass&lt;/em&gt; of penguins, coloring by &lt;em&gt;species&lt;/em&gt; and changing the shape by &lt;em&gt;island&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Load in the csv using read.csv()

#View the data by using head() and find the names of the columns using str()

#Use qplot to plot the columns that you&amp;#39;re interested in&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;advanced-practice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Advanced Practice&lt;/h3&gt;
&lt;p&gt;Using either dplyr or subsetting, plot the Gentoo penguins bill length vs body mass, and color by if their body mass is above 5500.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Your code below&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;We’ve been using functions throughout this course; a function is anything that has an input and an output, often changing that input to create a different output. The functions that we’ve used so far have either been built into R such as mean(), dim(), sum(), and length(), or they have been loaded in as a package, such as dplyr::filter(), dplyr::summarize(), and ggplot::qplot().&lt;/p&gt;
&lt;p&gt;Let’s now look up the help menu for the function seq(). What does it do?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;help(seq)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s run this function with default values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Uncomment this line to see what happens if you don&amp;#39;t include any values:
#seq()

#Let&amp;#39;s run this line to see what happens when you include only a single value:
seq(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s include three numbers without explicitly calling each argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(5,10,2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5 7 9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#This is the same as running:
seq(from = 5, to = 10,  by = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5 7 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s change up the order now:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#This will also produce values that are equivalent:
seq(to = 10, by = 2, from = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5 7 9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#But this will not:
#seq(10, 2, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;practice&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Save a vector of values from 12 to 200, increasing by 4. Then print the last 10 values of this vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#define your variable as the output of seq()

#look at the documentation for tail()

#print the last 10 values using tail()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-your-own-function&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Writing your own function&lt;/h3&gt;
&lt;p&gt;We can write functions as well as using them. Today we’ll start off with a simple code to convert Celsius to Fahrenheit.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#define your variable
celcius &amp;lt;- 20

#calculate your new value
farenheit &amp;lt;- 9/5 * celcius + 32

#print the new value
farenheit&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 68&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s turn this into a function, using the function() function. Keep in mind that functions follow essentially the format of&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[y=f(x)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;which can also be read as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[output = myfunction(input)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;When we write this in code, we define the &lt;em&gt;name&lt;/em&gt; of the function (below it’s c2f) as function(input){}, where inside the curly brackets {} there is the actual calculation. We then use the function return() to designate to the function what to output, which is our “y” in the above formula.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c2f &amp;lt;- function(celcius) {
  farenheit = 9/5 * celcius + 32
  return(farenheit)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens if we run this without an argument?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Run the following code:
c2f()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to include arguments for celcius:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Try explicitly stating the value
c2f(celcius = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 50&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#What happens if we don&amp;#39;t define celcius?
c2f(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 50&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can actually include a default when we create this function. Let’s add in something to c2f().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c2f_adv &amp;lt;- function(celcius = 0) {
  farenheit &amp;lt;- 9/5 * celcius + 32
  return(farenheit)
}

#now run the code without an argument to see what happens
c2f_adv()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 32&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;functions-with-two-arguments&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Functions with two arguments:&lt;/h3&gt;
&lt;p&gt;If we include x and y into the equation, we can set two variables values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multiply &amp;lt;- function(x, y){x*y}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can run this, but it won’t work if we don’t give two arguments:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#This does not work without defaults
#multiply()

#This will multiply 2 and 3:
multiply(2,3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we rewrite this function, then it will work if defaults are set:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multiply2 &amp;lt;- function(x = 2, y = 4){x*y}

#This will multiply the default arguments
multiply2()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#This will multiply the inputs
multiply2(3,10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 30&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#What happens if you only include one number?
multiply2(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 40&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multiply2(y = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-types&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Types&lt;/h2&gt;
&lt;p&gt;So far we’ve been able to run calculations using variables, and used read.csv() to take in a character (the name of your file) that is converted into a data frame. We’ve also mentioned that data frame columns must be vectors of the same “type”. But what are the other data types that R can use?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some basic data types:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Characters (char): “string” of text, which has the value of the text&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Numbers (num): overall class of numbers, which includes integers and doubles&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integers (int): numbers without decimal points (takes less space)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Doubles (dbl): floating point numbers, or those with precision (takes more space)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Factors (fact): categorical elements which can be ordered (this sounds weird, but we’ll explain more later)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;examplestring &amp;lt;- &amp;quot;This is a string of text&amp;quot;
exampledouble &amp;lt;- 26.2
exampleinteger &amp;lt;- 5

#We can find out the data types by running typeof()

typeof(examplestring)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#What data types are exampledouble and exampleinteger?

typeof(exampledouble)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(exampleinteger)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Notice that exampleinteger is also listed as a double; this is because R will automatically store numbers as doubles, and converts between numeric classes automatically

realinteger &amp;lt;- as.integer(exampleinteger)
typeof(realinteger)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When plotting, data types will change how plots view your data. For example, characters will often be unique values without order, numbers will often be continuous rather than discrete, and ordered alphabetically, and factors will be discrete and maintain an order. We will learn more about this soon, but we can use an example with qplot (which we’ve reviewed).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins &amp;lt;- read.csv(&amp;quot;penguins.csv&amp;quot;)
# How many colors are there when we color by island?
qplot(x = bill_length_mm, y = bill_depth_mm, data = penguins, color = island)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many colors are there when we color by bill depth?
qplot(x = bill_length_mm, y = bill_depth_mm, data = penguins, color = bill_depth_mm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-22-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;answers-to-practice-problems&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Answers to practice problems&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    344 obs. of  8 variables:
##  $ species          : chr  &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; &amp;quot;Adelie&amp;quot; ...
##  $ island           : chr  &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; &amp;quot;Torgersen&amp;quot; ...
##  $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...
##  $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...
##  $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...
##  $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...
##  $ sex              : chr  &amp;quot;male&amp;quot; &amp;quot;female&amp;quot; &amp;quot;female&amp;quot; NA ...
##  $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 1 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 1 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/28/understanding-functions/index.en_files/figure-html/unnamed-chunk-24-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Indexing and Subsetting</title>
      <link>https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/</guid>
      <description>


&lt;div id=&#34;indexing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Indexing&lt;/h1&gt;
&lt;div id=&#34;what-do-we-mean-by-indexing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What do we mean by indexing?&lt;/h3&gt;
&lt;p&gt;So far, we’ve worked with data frames in R. Each data frame is really a set of rows and columns with values populated, and these can be broken down into what are called vectors. A vector is simply a one-dimensional set of &lt;em&gt;something&lt;/em&gt; that can have at minimum length 1.&lt;/p&gt;
&lt;p&gt;We can create vectors using the function c(), for concatenate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector &amp;lt;- c(4,20,10,21,60,3,14,63,9,6)

FirstVector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  4 20 10 21 60  3 14 63  9  6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This vector has a length, and each number has an index within that vector. In the upper right, you can see that your FirstVector values are 1:10 and numeric. We can also use the length() function to find out how many elements we have in our vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(FirstVector)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to identify the first value, we could use square brackets, ‘[]’, to identify that value. R will print the value that corresponds with that number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to find the fifth value, we would use the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 60&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#What is the 9th element in the vector? Write your code below:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make a set of numbers that is in a sequence by one, we can just use a ‘:’ to tell R to print that sequence. We can make a new vector using this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SecondVector &amp;lt;- 1:10
SecondVector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we can subset using the ‘:’ to ask R to give us a set of numbers to index by, such as the first three elements in the FirstVector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  4 20 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the last 4 elements of SecondVector. Print your code below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;indexing-data-frames&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Indexing Data Frames&lt;/h3&gt;
&lt;p&gt;If we wanted to make a data frame from vectors that we already have, we can use the data.frame() function to combine vectors &lt;em&gt;of the same size&lt;/em&gt;. If the vectors are different sizes, R won’t know what to do with the extra slots and will give you an error.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Making a data frame from vectors

NewDataFrame &amp;lt;- data.frame(Random = FirstVector, Index = SecondVector)

NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Random Index
## 1       4     1
## 2      20     2
## 3      10     3
## 4      21     4
## 5      60     5
## 6       3     6
## 7      14     7
## 8      63     8
## 9       9     9
## 10      6    10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of using length() to find out the size of a data frame, we would need to find the &lt;em&gt;dimensions&lt;/em&gt; of that data frame. We briefly covered this function in earlier sessions: you can use dim().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(NewDataFrame)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10  2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of dim() is a vector, which gives the number of rows (first number) and the number of columns (second number). An easy way to remember this is “railroad car”, which always has R before C, or rows before columns.&lt;/p&gt;
&lt;p&gt;What if we wanted to find the first row of our data frame? We could use square brackets again, but this time we would need to add a column in between our row argument and our column argument. To select &lt;em&gt;all&lt;/em&gt; of the values of one row or column, leave the element (before or after the comma) blank.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#The following code will give the first row:
NewDataFrame[1,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#This next code will give the second column:
NewDataFrame[,2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we wanted to find the first column and fourth row element? We would indicate both of these numbers in square brackets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame[4,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 21&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the third element of the second column below:

#Find the last 3 elements of the first column below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-column-names-with&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using column names with $&lt;/h3&gt;
&lt;p&gt;If you wanted to refer to a column by name, you can do so with the $ operator. We can print the second column as such:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to select the second element of the Index column, we could do so using the square brackets as we did before; in this case, though, we now have a vector (the column) rather than a data frame, so we only need one dimension in our square brackets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Index[2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the fourth element of the Random column below:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;logicals&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Logicals&lt;/h1&gt;
&lt;div id=&#34;a-review-of-booleans&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A review of Booleans&lt;/h3&gt;
&lt;p&gt;Booleans are true/false statements that are evaluated by R. TRUE is encoded by a 1, and FALSE is encoded by a 0. R recognizes the words “TRUE” and “FALSE” when they are capitalized.&lt;/p&gt;
&lt;p&gt;We can evaluate two numbers by using the ‘==’ sign between them:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 == 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 == 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also find the numbers in a vector that are equal to a certain number:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector == 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that only the first element of FirstVector is 4; the rest are not, and so this evaluates to FALSE.&lt;/p&gt;
&lt;p&gt;We can also use the &amp;lt; and &amp;gt; to evaluate, and &amp;lt;= and &amp;gt;=:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector &amp;lt; 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Find all of the values of SecondVector that are greater than or equal to 4

# Find all of the values of FirstVector that are less than 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also evaluate two vectors to see if they have the same values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FirstVector == NewDataFrame[,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Below, use &amp;#39;!=&amp;#39; to ask if FirstVector is NOT equal to the first column of NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can compare if two columns are equal in our data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$Random == NewDataFrame$Index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Subsetting&lt;/h1&gt;
&lt;div id=&#34;subsetting-by-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Subsetting by values&lt;/h3&gt;
&lt;p&gt;We’ve done this using dplyr in the past; we can take a data frame and filter it by a certain value. Without using the dplyr package, we can also do this based on the rows and column indices. Keep in mind that if you’re using the full name of the column,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#First we can print the indices where the Random column equals 4
NewDataFrame$Random == 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#By placing the true values in the square brackets, this code prints the rows where Rnadom is equal to 4
NewDataFrame[NewDataFrame$Random == 4,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Below, find the rows where the Random column is greater than 50

#Next, find the rows in which the Random column value is less than OR equal to the Index column value&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this can also be done using dplyr, but with naming columns and not the data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame %&amp;gt;% filter(Random == 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Random Index
## 1      4     1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-it-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Putting it together&lt;/h3&gt;
&lt;p&gt;Before we move on to visualizing, we can also create a new column in our data frame using $, and we can populate that by using booleans:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NewDataFrame$NewColumn &amp;lt;- NewDataFrame$Random &amp;gt;= NewDataFrame$Index

NewDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Random Index NewColumn
## 1       4     1      TRUE
## 2      20     2      TRUE
## 3      10     3      TRUE
## 4      21     4      TRUE
## 5      60     5      TRUE
## 6       3     6     FALSE
## 7      14     7      TRUE
## 8      63     8      TRUE
## 9       9     9      TRUE
## 10      6    10     FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-the-subset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualizing the subset&lt;/h1&gt;
&lt;div id=&#34;plotting-subsetted-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting subsetted values&lt;/h3&gt;
&lt;p&gt;If you wanted to plot only specific values, you could use these same booleans inside the functions to plot. This is going to be the basis of how we separate out values in our plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

# Plot our data frame here
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = Random, y = Index, data = NewDataFrame)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can change the size of our points by adding in the &amp;#39;size&amp;#39; argument
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Finally, we can add in coloring by a boolean logical
qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$Index &amp;gt; 5, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = NewDataFrame$Random, y = NewDataFrame$Index, color = NewDataFrame$NewColumn, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-21-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exploring R&lt;/h1&gt;
&lt;p&gt;One of the most important things to do in R is read the documentation for different packages and functions. If we look at the function for qplot, it will give us the options for our plots.&lt;/p&gt;
&lt;p&gt;We can do this by either running help(&lt;function&gt;) or ?&lt;function&gt;, as done below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;help(qplot)
?qplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has lots of options, but the examples show where they have options for size and color. We’ll get into how to use these (and more!) in ggplot later, but you can explore how to visualize your own data using qplot, as long as you remember to load ggplot2 into your workspace.&lt;/p&gt;
&lt;p&gt;You’ll notice that there’s an option for &lt;em&gt;geom&lt;/em&gt;. This is the type of plot that will be made, and the default is a scatter plot (so geom = “point”). You can find this in the defaults for geom.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a scatter plot
qplot(x = Index, y = Random, data = NewDataFrame,
      geom = &amp;quot;point&amp;quot;,
      xlim = c(0,25), ylim = c(0,100),
      main = &amp;quot;Title of Randomness&amp;quot;,
      xlab = &amp;quot;Index Expanded&amp;quot;,
      ylab = &amp;quot;Random Numbers&amp;quot;,
      color = Random &amp;gt; 5, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Make a box plot with scatter (called jitter)
qplot(x = Random, y = NewColumn, data = NewDataFrame,
      geom = c(&amp;quot;boxplot&amp;quot;, &amp;quot;jitter&amp;quot;),
      main = &amp;quot;Boxplot of Random Numbers&amp;quot;,
      color = Index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/23/understanding-indexing-and-subsetting/index.en_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;practice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice&lt;/h3&gt;
&lt;p&gt;Load in the dataset penguins.csv, and plot the bill length vs body mass of penguins, coloring by species and changing the shape by island.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Load in the csv using read.csv()

#View the data by using head() and find the names of the columns using str()

#Use qplot to plot the columns that you&amp;#39;re interested in&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;advanced-practice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Advanced Practice&lt;/h3&gt;
&lt;p&gt;Using either dplyr or subsetting, plot the Gentoo penguins bill length vs body mass, and color by if their body mass is above 5500.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Your code below&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hands-On Data Wrangling</title>
      <link>https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/</guid>
      <description>


&lt;div id=&#34;loading-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading data&lt;/h2&gt;
&lt;p&gt;Following what we did last week, we are going to keep working with the penguins
today. You can find the dataset after you extracted &lt;code&gt;session3.zip&lt;/code&gt; which
you can download from &lt;a href=&#34;https://nyusurp.github.io/assets/session3.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;figure-things-out-on-the-internet&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Figure things out on the internet&lt;/h3&gt;
&lt;p&gt;If you don’t remember how to do something with R and happen to be the most
R-fluent people in the peer, don’t panic. Most of the time, searching for
&lt;em&gt;[what you want to do] in R&lt;/em&gt; work out great.&lt;/p&gt;
&lt;p&gt;Online forums like StackOverflow and Kaggle often give great answers with code
examples that you could play with. If you are a genomic person, Biostar and
SEQanswers would be your friend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How do you load a csv file with R?
penguins &amp;lt;- read.csv(&amp;quot;penguins.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;figuring-things-out-within-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Figuring things out within R&lt;/h3&gt;
&lt;p&gt;Oftentimes, an answer you found online provides a code that almost works, but
you might not yet know enough to make it work. For times like this, R has
documentation built in for each function describing the arguments that you can
tweak and what it meant.&lt;/p&gt;
&lt;p&gt;You can trigger the help page with &lt;code&gt;?[function]&lt;/code&gt; in the console. Let’s try it
out: We used &lt;code&gt;head()&lt;/code&gt; last week to take a glimpse of the first few rows of a
table, so how do we print the first &lt;em&gt;3&lt;/em&gt; instead of 6 rows?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(penguins, n = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1  Adelie Torgersen           39.1          18.7               181        3750
## 2  Adelie Torgersen           39.5          17.4               186        3800
## 3  Adelie Torgersen           40.3          18.0               195        3250
##      sex year
## 1   male 2007
## 2 female 2007
## 3 female 2007&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;count-things&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;count()&lt;/code&gt; things&lt;/h2&gt;
&lt;p&gt;How many penguins of each &lt;code&gt;species&lt;/code&gt; were observed on each &lt;code&gt;island&lt;/code&gt;?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  count(island, species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      island   species   n
## 1    Biscoe    Adelie  44
## 2    Biscoe    Gentoo 124
## 3     Dream    Adelie  56
## 4     Dream Chinstrap  68
## 5 Torgersen    Adelie  52&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which species is found on all islands? I know it’s obvious, but let’s use a
sledgehammer to crack a nut this time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The output in the previous chunk is also a table that could be count()ed.
penguins %&amp;gt;%
  count(island, species) %&amp;gt;%
  count(species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     species n
## 1    Adelie 3
## 2 Chinstrap 1
## 3    Gentoo 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-out-your-species&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;filter()&lt;/code&gt; out your species&lt;/h2&gt;
&lt;p&gt;Let’s say you are interested in comparing how the islands influences the growth
of penguins. Either you’ll need to go to Antarctica to observe more Gentoo or
Chinstrap penguins on other islands, or only Adelie penguins make sense for
your purpose.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Since none of us is going to leave for Antarctica any time soon (right?)
# Let&amp;#39;s keep only the Adelie penguins, and **assign it to a new object**.
adelie &amp;lt;- penguins %&amp;gt;%
  filter(species == &amp;quot;Adelie&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;revisiting-the-criteria-for-filter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Revisiting the criteria for &lt;code&gt;filter()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;There are 6 basic types of comparison:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;: Equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt;: Not equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;: Larger than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;: Larger or equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;: Less than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;: Less than or equal to&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many male Adelie penguins were observed?
adelie %&amp;gt;%
  filter(sex == &amp;quot;male&amp;quot;) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    n
## 1 73&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many Adelie penguins were found on islands that are not Dream island?
adelie %&amp;gt;%
  filter(island != &amp;quot;Dream&amp;quot;) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    n
## 1 96&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many Adelie penguins were observed during or before 2008?
adelie %&amp;gt;%
  filter(year &amp;lt;= 2008) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     n
## 1 100&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-criteria&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining criteria&lt;/h3&gt;
&lt;p&gt;Sometimes, we’ll need more than one criteria to get the data we want.
For example, if you are interested in the female Adelie penguins on the Biscoe
island:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie %&amp;gt;%
  filter(sex == &amp;quot;female&amp;quot;, island == &amp;quot;Biscoe&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1   Adelie Biscoe           37.8          18.3               174        3400
## 2   Adelie Biscoe           35.9          19.2               189        3800
## 3   Adelie Biscoe           35.3          18.9               187        3800
## 4   Adelie Biscoe           40.5          17.9               187        3200
## 5   Adelie Biscoe           37.9          18.6               172        3150
## 6   Adelie Biscoe           39.6          17.7               186        3500
## 7   Adelie Biscoe           35.0          17.9               190        3450
## 8   Adelie Biscoe           34.5          18.1               187        2900
## 9   Adelie Biscoe           39.0          17.5               186        3550
## 10  Adelie Biscoe           36.5          16.6               181        2850
## 11  Adelie Biscoe           35.7          16.9               185        3150
## 12  Adelie Biscoe           37.6          17.0               185        3600
## 13  Adelie Biscoe           36.4          17.1               184        2850
## 14  Adelie Biscoe           35.5          16.2               195        3350
## 15  Adelie Biscoe           35.0          17.9               192        3725
## 16  Adelie Biscoe           37.7          16.0               183        3075
## 17  Adelie Biscoe           37.9          18.6               193        2925
## 18  Adelie Biscoe           38.6          17.2               199        3750
## 19  Adelie Biscoe           38.1          17.0               181        3175
## 20  Adelie Biscoe           38.1          16.5               198        3825
## 21  Adelie Biscoe           39.7          17.7               193        3200
## 22  Adelie Biscoe           39.6          20.7               191        3900
##       sex year
## 1  female 2007
## 2  female 2007
## 3  female 2007
## 4  female 2007
## 5  female 2007
## 6  female 2008
## 7  female 2008
## 8  female 2008
## 9  female 2008
## 10 female 2008
## 11 female 2008
## 12 female 2008
## 13 female 2008
## 14 female 2008
## 15 female 2009
## 16 female 2009
## 17 female 2009
## 18 female 2009
## 19 female 2009
## 20 female 2009
## 21 female 2009
## 22 female 2009&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if you need penguins with extreme body weight? Say either over 4700g or
below 2900g.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie %&amp;gt;%
  filter(body_mass_g &amp;gt; 4700 | body_mass_g &amp;lt; 2900)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1  Adelie Biscoe           36.5          16.6               181        2850
## 2  Adelie Biscoe           36.4          17.1               184        2850
## 3  Adelie Biscoe           41.0          20.0               203        4725
## 4  Adelie Biscoe           43.2          19.0               197        4775
##      sex year
## 1 female 2008
## 2 female 2008
## 3   male 2009
## 4   male 2009&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;logical-operations-whats-happening-under-the-dplyr-table&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Logical operations: What’s happening under the &lt;code&gt;dplyr&lt;/code&gt; table&lt;/h4&gt;
&lt;p&gt;Essentially, what &lt;code&gt;filter()&lt;/code&gt; relies on is to ask a series of yes/no question
to each row of a column, and the answers to these yes/no questions are called
Boolean or logical values.&lt;/p&gt;
&lt;p&gt;In R, &lt;code&gt;TRUE&lt;/code&gt; means yes, while &lt;code&gt;FALSE&lt;/code&gt; means no.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Is 3 larger than 5?
3 &amp;gt; 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Is 2022 equal to 2020?
2022 == 2020&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Is &amp;quot;apple&amp;quot; not equal to &amp;quot;orange&amp;quot;?
&amp;quot;apple&amp;quot; != &amp;quot;orange&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These logical values can be further calculated with &lt;code&gt;&amp;amp;&lt;/code&gt; (AND), &lt;code&gt;|&lt;/code&gt; (OR), and
&lt;code&gt;xor()&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;|&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;xor()&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;TRUE/TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;TRUE/FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;FALSE/TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;FALSE/FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, how many Adelie penguins either have a bill length shorter than 35mm
or a bill depth below 15mm?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie %&amp;gt;%
  filter(bill_length_mm &amp;lt; 35 | bill_depth_mm &amp;lt; 15) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   n
## 1 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we know &lt;code&gt;filter()&lt;/code&gt; is working with logical values, you won’t be
surprised that it can also use other functions that gives a logical value
as its output as a criterion.&lt;/p&gt;
&lt;p&gt;For example, we mentioned that &lt;code&gt;NA&lt;/code&gt; is how R labels missing data. Since we are
interested in body weight, we might want throw away rows with missing body
weight…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You might want to try filtering for body_mass_g== NA
adelie %&amp;gt;%
  filter(body_mass_g == NA)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] species           island            bill_length_mm    bill_depth_mm    
## [5] flipper_length_mm body_mass_g       sex               year             
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is happening? Remember that we said R treats NA very differently. As a
matter of fact, almost every operation gives you &lt;code&gt;NA&lt;/code&gt; when &lt;code&gt;NA&lt;/code&gt; is involved.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try these
5 == NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;3 &amp;gt; NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;&amp;quot;North America&amp;quot; != NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;3.1415926 &amp;lt;= NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;NA&lt;/code&gt; is missing data, this actually makes sense:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;5 == NA&lt;/code&gt; is like asking “is 5 equal to something I don’t know?”, and the
answer has to be “I don’t know”.&lt;/p&gt;
&lt;p&gt;So, how do we ask R if it doesn’t know something or has an &lt;code&gt;NA&lt;/code&gt; there? We use
&lt;code&gt;is.na()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is.na(NA)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is.na(&amp;quot;National Academy&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;is.na()&lt;/code&gt; with &lt;code&gt;filter()&lt;/code&gt; to find the rows where body weight is
&lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use is.na() to get rows with NA in body_mass_g
adelie %&amp;gt;%
  filter(is.na(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
## 1  Adelie Torgersen             NA            NA                NA          NA
##    sex year
## 1 &amp;lt;NA&amp;gt; 2007&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How do we select all other rows then? In R, &lt;code&gt;!&lt;/code&gt; flips a logical value, and you
can pronounce it as &lt;em&gt;not&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Not TRUE
!TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Not FALSE
!FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Flipping (3 &amp;gt; 5)
!(3 &amp;gt; 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;!&lt;/code&gt; to find rows that are &lt;em&gt;not&lt;/em&gt; &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many Adelie penguins have their body mass recorded?
adelie %&amp;gt;%
  filter(!is.na(body_mass_g)) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     n
## 1 151&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;extended-reading-dealing-with-missing-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extended reading: Dealing with missing values&lt;/h3&gt;
&lt;p&gt;Depends on what you work with, you might not always want to drop missing values.&lt;/p&gt;
&lt;p&gt;If you are not going to throw those data away, you’ll need to ask yourself
questions like “Does missing value appear randomly?”, and decide how to best
deal with them.&lt;/p&gt;
&lt;p&gt;If you are interested, Hadley Wickham has
&lt;a href=&#34;https://r4ds.hadley.nz/missing-values.html&#34;&gt;a section in his book &lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt;
discussing this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;group-your-data-for-further-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Group your data for further analysis&lt;/h2&gt;
&lt;p&gt;Let’s say we are interested in how body weight differs between islands.
To perform this analysis, we might want to calculate the median and standard
deviation of body mass per island.&lt;/p&gt;
&lt;p&gt;To indicate how &lt;code&gt;dplyr&lt;/code&gt; should group your data, we use &lt;code&gt;group_by()&lt;/code&gt; to tell
it which column contains the group labels.&lt;/p&gt;
&lt;p&gt;Let’s assign the grouped data to another object named &lt;code&gt;adelie_per_island&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie_per_island &amp;lt;- adelie %&amp;gt;%
  filter(!is.na(body_mass_g)) %&amp;gt;%
  group_by(island)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-summary-statistics-with-summarize&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Get summary statistics with &lt;code&gt;summarize()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we grouped the data, we can calculate the summary statistics.&lt;/p&gt;
&lt;p&gt;The syntax for &lt;code&gt;summarize()&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You tell summarize() which functions to use on which column
adelie_per_island %&amp;gt;%
  summarize(mean(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##   island    `mean(body_mass_g)`
##   &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt;
## 1 Biscoe                  3710.
## 2 Dream                   3688.
## 3 Torgersen               3706.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the column names of the summary table is the function call we gives
to &lt;code&gt;summarize()&lt;/code&gt;, which could be a bit ugly. We can rename the columns by:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie_per_island %&amp;gt;%
  summarize(mean_bw = mean(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##   island    mean_bw
##   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 Biscoe      3710.
## 2 Dream       3688.
## 3 Torgersen   3706.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The summary statistics that we use the most often are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arithmetic mean (&lt;code&gt;mean()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Median (&lt;code&gt;median()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Standard deviation (&lt;code&gt;sd()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s summarize the data with median and standard deviation per island.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Summarize the Adelie subset per island with the median and standard deviation 
# of the body mass
adelie_per_island %&amp;gt;%
  summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   island    bw_median bw_sd
##   &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Biscoe         3750  488.
## 2 Dream          3575  455.
## 3 Torgersen      3700  445.&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;what-if-you-dont-group&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What if you don’t group?&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adelie %&amp;gt;%
  filter(!is.na(body_mass_g)) %&amp;gt;%
  summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   bw_median    bw_sd
## 1      3700 458.5661&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;what-if-you-want-to-group-with-another-grouping-variable&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What if you want to group with another grouping variable?&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s group with sex
adelie %&amp;gt;%
  filter(!is.na(body_mass_g), !is.na(sex)) %&amp;gt;%
  group_by(sex) %&amp;gt;%
  summarize(bw_median = median(body_mass_g), bw_sd = sd(body_mass_g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 3
##   sex    bw_median bw_sd
##   &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1 female      3400  269.
## 2 male        4000  347.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;a-picture-is-worth-a-thousand-words&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A picture is worth a thousand words&lt;/h2&gt;
&lt;p&gt;While it’s great to have summary statistics, oftentimes a quick visualization
of our data will be very helpful.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qplot()&lt;/code&gt; provided by &lt;code&gt;ggplot2&lt;/code&gt; is designed for this purpose and can be easily
incorporated into your pipeline.&lt;/p&gt;
&lt;div id=&#34;example-a-quick-scatterstrip-plot-per-island&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example: a quick scatter/strip plot per island&lt;/h3&gt;
&lt;p&gt;Let’s plot something with &lt;em&gt;points&lt;/em&gt; on a plane where the x-axis is the islands
and the y-axis is the body weight.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load ggplot2
library(ggplot2)

adelie_per_island %&amp;gt;%
  qplot(data = ., x = island, y = body_mass_g, geom = &amp;quot;point&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/index.en_files/figure-html/qplot-strip-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There several required arguments for &lt;code&gt;qplot()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data: The data you want to plot.&lt;/li&gt;
&lt;li&gt;x: The column name of the variable you want to use as the x-axis&lt;/li&gt;
&lt;li&gt;y: The column name of the variable you want to use as the y-axis&lt;/li&gt;
&lt;li&gt;color: The column name of the variable you want to color your plot by&lt;/li&gt;
&lt;li&gt;geom: Short for “geometry”, the type of plots you want to do. Popular ones
include:
&lt;ul&gt;
&lt;li&gt;point&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;li&gt;boxplot&lt;/li&gt;
&lt;li&gt;violin&lt;/li&gt;
&lt;li&gt;histogram&lt;/li&gt;
&lt;li&gt;density&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s do a boxplot instead
adelie_per_island %&amp;gt;%
  qplot(data = ., x = island, y = body_mass_g, geom = &amp;quot;boxplot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/index.en_files/figure-html/qplot-box-1.png&#34; width=&#34;672&#34; /&gt;
### What is the distribution of bill lengths of the whole dataset?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot a histogram with bill lengths on the x-axis
penguins %&amp;gt;%
  qplot(data = ., x = bill_length_mm, geom = &amp;quot;histogram&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 2 rows containing non-finite values (stat_bin).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/index.en_files/figure-html/qplot-histogram-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;is-bill-length-and-depth-correlated-for-the-adelie-penguins&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Is bill length and depth correlated for the Adelie penguins?&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot a point plot with bill length on the x, bill depth on the y, and
# color by sex
adelie %&amp;gt;%
  qplot(
    data = .,
    x = bill_length_mm,
    y = bill_depth_mm,
    color = sex,
    geom = &amp;quot;point&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 1 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/21/hands-on-data-wrangling/index.en_files/figure-html/qplot-scatter-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Prepare your computer for R</title>
      <link>https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/</guid>
      <description>


&lt;div id=&#34;agenda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;AGENDA&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Introductions&lt;/li&gt;
&lt;li&gt;Installing R&lt;/li&gt;
&lt;li&gt;This Worksheet :)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Adpated from material curated by Eugene Plavskin and Grace Avecilla&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploring &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34;&gt;RStudio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The console: Where you run commands one by one (bottom)&lt;/li&gt;
&lt;li&gt;The environment: Where you can see what is loaded in R (upper right)&lt;/li&gt;
&lt;li&gt;The file explorer: An easier way for you to find files (otherwise you’ll need to know the &lt;em&gt;path&lt;/em&gt; of a file to use it in R; lower right)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installing &lt;em&gt;packages&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Packages are like kits in experiments: They &lt;em&gt;package&lt;/em&gt; the reagents and instructions for otherwise complicated processes for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll be installing 3 packages today&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com&#34;&gt;rmarkdown&lt;/a&gt;: A tool that allows you to write your code along with your notes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt;: A handy and powerful visualization tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt;: A tool that handles and summarizes tables&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This is how we ask R to install packages
# R will try to ask several central repositories if they have this package
install.packages(&amp;quot;rmarkdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-rmarkdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using Rmarkdown&lt;/h2&gt;
&lt;p&gt;Rmarkdown file allow you to record your thinking process (as text) along with
your analyses (as &lt;em&gt;code chunks&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Having why you are doing the analysis and the specific code for it will help
you catch up faster if you ever need to go back to the same analysis again.&lt;/p&gt;
&lt;div id=&#34;text-and-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Text and code&lt;/h3&gt;
&lt;p&gt;This is a line of text:&lt;/p&gt;
&lt;p&gt;“I know how to use R!”&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This is a chunk of code. Do you notice that the background looks different?
# Also there is three buttons at the upper right corner

# Press the _play_ button, and the output will be shown below the chunk
print(&amp;quot;I know how to use R&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;I know how to use R&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2+2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running code:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the run button on the upper-right corner of a chunk&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl + Enter (Windows) / Cmd + Return (Mac)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generating output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the &lt;em&gt;knit&lt;/em&gt; button on the upper rim of the editor&lt;/li&gt;
&lt;li&gt;Knitting will &lt;em&gt;re-run all your code in the file from scratch&lt;/em&gt;, which is a
good thing because it makes sure:
&lt;ul&gt;
&lt;li&gt;The code works on its own&lt;/li&gt;
&lt;li&gt;We haven’t accidentally deleted or added some lines of code that will
break the code.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;working-directory-and-rstudio-projects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Working directory and Rstudio projects&lt;/h2&gt;
&lt;div id=&#34;what-is-a-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What is a working directory?&lt;/h3&gt;
&lt;p&gt;A working directory is where R will try to find things if you ask it to&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-and-setting-your-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Checking and setting your working directory&lt;/h3&gt;
&lt;p&gt;You can check the path of your working directory with &lt;code&gt;getwd()&lt;/code&gt;
(short for &lt;em&gt;get working directory&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Expect to see a path printed below
# This is where R find things for you
getwd()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/ycc/Dropbox/Docs/NYU/Teaching/SURP/NYU_SURP_blogdown/content/handout/2022-06-13-prepare-your-computer-for-r&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-files-from-your-working-directory&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loading files from your working directory&lt;/h3&gt;
&lt;p&gt;Now that you have a directory, files inside that directory can be loaded using
functions like &lt;code&gt;read.csv()&lt;/code&gt;. This function will take a comma-separated file
(which you can make in Excel) and allow you to save it as a variable that R can
work with.&lt;/p&gt;
&lt;p&gt;For the example below, &lt;code&gt;mytestdata.csv&lt;/code&gt; can be found in the &lt;a href=&#34;assets/session1.zip&#34;&gt;example data&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Open the csv file with Excel or Google Sheet to take a look
# mytestdata

# And then we load it to see how it looks like in R
read.csv(&amp;quot;mytestdata.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Day Count Group
## 1   1    12     1
## 2   1    15     2
## 3   2     8     1
## 4   2     3     2
## 5   3    10     1
## 6   3    24     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You need to ask R to keep the csv files
# *Check the environment tab on the upper right corner of your window
mytestdata &amp;lt;- read.csv(&amp;quot;mytestdata.csv&amp;quot;)

# You can ask R to retrieve what it keeps later by the name you gave to the data
mytestdata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Day Count Group
## 1   1    12     1
## 2   1    15     2
## 3   2     8     1
## 4   2     3     2
## 5   3    10     1
## 6   3    24     2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-usage-of-r-using-it-as-a-calculator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic usage of R: Using it as a calculator&lt;/h2&gt;
&lt;p&gt;Enter the following line of command in the console&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;17 + 2.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 19.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In programming, division is often written as slashes (&lt;code&gt;/&lt;/code&gt;), while
multiplication is written as asterisks (&lt;code&gt;*&lt;/code&gt;). Now, let’s try doing these in the
console as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try multiplying 8 by 7

8*7&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 56&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try dividing 48 by 12

48/12&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;an-example-of-our-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An example of our data&lt;/h2&gt;
&lt;p&gt;Cassandra’s data is allele frequencies as read counts from sequencing. To
analyze it, she first:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;loads in the data,&lt;/li&gt;
&lt;li&gt;runs an R function to analyze it,&lt;/li&gt;
&lt;li&gt;plots using &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a quick version of this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)

#Read in the data
WeightedMeanZStats.100 &amp;lt;- read.csv(&amp;quot;CBData.csv&amp;quot;)

#Look at the data (this only prints the first 6 rows)
head(WeightedMeanZStats.100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          X CHROM    POS       Bulk     Parent         Int Stat
## 1 result.1    II 100153 -2.3893709 -1.0534663  1.64175559    Z
## 2 result.2    II 100367 -0.9361101 -0.2837268  0.55031705    Z
## 3 result.3    II 100413 -1.1028976 -0.6802854  0.95854049    Z
## 4 result.4    II 100878  0.7191787  0.9999416 -1.25245792    Z
## 5 result.5    II 101289 -1.2163032  1.4995884  0.07063202    Z
## 6 result.6    II 101340 -1.4019217  1.1382948 -0.29809070    Z&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Find the dimensions of the datast
dim(WeightedMeanZStats.100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 95106     7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(WeightedMeanZStats.100$Stat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Z&amp;quot;      &amp;quot;ZPrime&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Plot the data using ggplot (which we&amp;#39;ll go into more later!)
WeightedMeanZStats.100 %&amp;gt;% filter(Stat == &amp;quot;ZPrime&amp;quot;) %&amp;gt;% pivot_longer(c(&amp;quot;Bulk&amp;quot;, &amp;quot;Parent&amp;quot;, &amp;quot;Int&amp;quot;)) %&amp;gt;% 
  ggplot(., aes(x = POS, y = value, color = name)) + geom_line(size = 1) + #geom_point(alpha = 0.1) + #+ 
  geom_hline(yintercept = 0, color = &amp;quot;gray&amp;quot;) +
  geom_hline(yintercept = c(1.96, -1.96), color = &amp;quot;black&amp;quot;, linetype = &amp;quot;dashed&amp;quot;) +
  theme(axis.text.x = element_blank()) +  ylab(&amp;quot;Oak &amp;lt;- Effect -&amp;gt; Wine&amp;quot;) +
  scale_color_manual(values = c(&amp;quot;violet&amp;quot;, &amp;quot;lightblue&amp;quot;, &amp;quot;darkorange&amp;quot;)) +
  facet_grid(~CHROM, scales = &amp;quot;free&amp;quot;) + ggtitle(&amp;quot;Comparison of Zprime per Factor | Weighted Means W = 100&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://nyusurp.github.io/2022/06/13/prepare-your-computer-for-r/index.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes footnotes-end-of-document&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://nyusurp.github.io/2022/06/14/working-directories&#34;&gt;working directory&lt;/a&gt; if you are interested.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
